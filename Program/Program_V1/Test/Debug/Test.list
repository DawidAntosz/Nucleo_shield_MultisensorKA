
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e94  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08005f50  08005f50  00015f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fec  08005fec  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005fec  08005fec  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005fec  08005fec  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fec  08005fec  00015fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ff0  08005ff0  00015ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ff4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000074  08006068  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08006068  000204e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122f4  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6d  00000000  00000000  00032390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00034e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee0  00000000  00000000  00035e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d452  00000000  00000000  00036cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c94  00000000  00000000  0005414a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aed3b  00000000  00000000  00068dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00117b19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca8  00000000  00000000  00117b6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000074 	.word	0x20000074
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005f38 	.word	0x08005f38

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000078 	.word	0x20000078
 8000100:	08005f38 	.word	0x08005f38

08000104 <__gnu_thumb1_case_shi>:
 8000104:	b403      	push	{r0, r1}
 8000106:	4671      	mov	r1, lr
 8000108:	0849      	lsrs	r1, r1, #1
 800010a:	0040      	lsls	r0, r0, #1
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	5e09      	ldrsh	r1, [r1, r0]
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	448e      	add	lr, r1
 8000114:	bc03      	pop	{r0, r1}
 8000116:	4770      	bx	lr

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	0018      	movs	r0, r3
 800040e:	230c      	movs	r3, #12
 8000410:	001a      	movs	r2, r3
 8000412:	2100      	movs	r1, #0
 8000414:	f005 f91e 	bl	8005654 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000418:	4b25      	ldr	r3, [pc, #148]	; (80004b0 <MX_ADC_Init+0xac>)
 800041a:	4a26      	ldr	r2, [pc, #152]	; (80004b4 <MX_ADC_Init+0xb0>)
 800041c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800041e:	4b24      	ldr	r3, [pc, #144]	; (80004b0 <MX_ADC_Init+0xac>)
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000424:	4b22      	ldr	r3, [pc, #136]	; (80004b0 <MX_ADC_Init+0xac>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800042a:	4b21      	ldr	r3, [pc, #132]	; (80004b0 <MX_ADC_Init+0xac>)
 800042c:	2200      	movs	r2, #0
 800042e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000430:	4b1f      	ldr	r3, [pc, #124]	; (80004b0 <MX_ADC_Init+0xac>)
 8000432:	2201      	movs	r2, #1
 8000434:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000436:	4b1e      	ldr	r3, [pc, #120]	; (80004b0 <MX_ADC_Init+0xac>)
 8000438:	2204      	movs	r2, #4
 800043a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800043c:	4b1c      	ldr	r3, [pc, #112]	; (80004b0 <MX_ADC_Init+0xac>)
 800043e:	2200      	movs	r2, #0
 8000440:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000442:	4b1b      	ldr	r3, [pc, #108]	; (80004b0 <MX_ADC_Init+0xac>)
 8000444:	2200      	movs	r2, #0
 8000446:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000448:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <MX_ADC_Init+0xac>)
 800044a:	2200      	movs	r2, #0
 800044c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <MX_ADC_Init+0xac>)
 8000450:	2200      	movs	r2, #0
 8000452:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000454:	4b16      	ldr	r3, [pc, #88]	; (80004b0 <MX_ADC_Init+0xac>)
 8000456:	22c2      	movs	r2, #194	; 0xc2
 8000458:	32ff      	adds	r2, #255	; 0xff
 800045a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800045c:	4b14      	ldr	r3, [pc, #80]	; (80004b0 <MX_ADC_Init+0xac>)
 800045e:	2200      	movs	r2, #0
 8000460:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <MX_ADC_Init+0xac>)
 8000464:	2224      	movs	r2, #36	; 0x24
 8000466:	2101      	movs	r1, #1
 8000468:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <MX_ADC_Init+0xac>)
 800046c:	2201      	movs	r2, #1
 800046e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <MX_ADC_Init+0xac>)
 8000472:	0018      	movs	r0, r3
 8000474:	f001 f99e 	bl	80017b4 <HAL_ADC_Init>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 800047c:	f000 fcd4 	bl	8000e28 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2201      	movs	r2, #1
 8000484:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000486:	1d3b      	adds	r3, r7, #4
 8000488:	2280      	movs	r2, #128	; 0x80
 800048a:	0152      	lsls	r2, r2, #5
 800048c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2201      	movs	r2, #1
 8000492:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000494:	1d3a      	adds	r2, r7, #4
 8000496:	4b06      	ldr	r3, [pc, #24]	; (80004b0 <MX_ADC_Init+0xac>)
 8000498:	0011      	movs	r1, r2
 800049a:	0018      	movs	r0, r3
 800049c:	f001 fb64 	bl	8001b68 <HAL_ADC_ConfigChannel>
 80004a0:	1e03      	subs	r3, r0, #0
 80004a2:	d001      	beq.n	80004a8 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80004a4:	f000 fcc0 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80004a8:	46c0      	nop			; (mov r8, r8)
 80004aa:	46bd      	mov	sp, r7
 80004ac:	b004      	add	sp, #16
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	20000090 	.word	0x20000090
 80004b4:	40012400 	.word	0x40012400

080004b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80004b8:	b590      	push	{r4, r7, lr}
 80004ba:	b08b      	sub	sp, #44	; 0x2c
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c0:	2414      	movs	r4, #20
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	0018      	movs	r0, r3
 80004c6:	2314      	movs	r3, #20
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f005 f8c2 	bl	8005654 <memset>
  if(adcHandle->Instance==ADC1)
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a35      	ldr	r2, [pc, #212]	; (80005ac <HAL_ADC_MspInit+0xf4>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d164      	bne.n	80005a4 <HAL_ADC_MspInit+0xec>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80004da:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <HAL_ADC_MspInit+0xf8>)
 80004dc:	699a      	ldr	r2, [r3, #24]
 80004de:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <HAL_ADC_MspInit+0xf8>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0089      	lsls	r1, r1, #2
 80004e4:	430a      	orrs	r2, r1
 80004e6:	619a      	str	r2, [r3, #24]
 80004e8:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <HAL_ADC_MspInit+0xf8>)
 80004ea:	699a      	ldr	r2, [r3, #24]
 80004ec:	2380      	movs	r3, #128	; 0x80
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4013      	ands	r3, r2
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f6:	4b2e      	ldr	r3, [pc, #184]	; (80005b0 <HAL_ADC_MspInit+0xf8>)
 80004f8:	695a      	ldr	r2, [r3, #20]
 80004fa:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <HAL_ADC_MspInit+0xf8>)
 80004fc:	2180      	movs	r1, #128	; 0x80
 80004fe:	0289      	lsls	r1, r1, #10
 8000500:	430a      	orrs	r2, r1
 8000502:	615a      	str	r2, [r3, #20]
 8000504:	4b2a      	ldr	r3, [pc, #168]	; (80005b0 <HAL_ADC_MspInit+0xf8>)
 8000506:	695a      	ldr	r2, [r3, #20]
 8000508:	2380      	movs	r3, #128	; 0x80
 800050a:	029b      	lsls	r3, r3, #10
 800050c:	4013      	ands	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000512:	193b      	adds	r3, r7, r4
 8000514:	2202      	movs	r2, #2
 8000516:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2203      	movs	r2, #3
 800051c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000524:	193a      	adds	r2, r7, r4
 8000526:	2390      	movs	r3, #144	; 0x90
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	0011      	movs	r1, r2
 800052c:	0018      	movs	r0, r3
 800052e:	f001 ffc5 	bl	80024bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA2_Channel5;
 8000532:	4b20      	ldr	r3, [pc, #128]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 8000534:	4a20      	ldr	r2, [pc, #128]	; (80005b8 <HAL_ADC_MspInit+0x100>)
 8000536:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000538:	4b1e      	ldr	r3, [pc, #120]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 800053a:	2200      	movs	r2, #0
 800053c:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 800053e:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000544:	4b1b      	ldr	r3, [pc, #108]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800054a:	4b1a      	ldr	r3, [pc, #104]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	0052      	lsls	r2, r2, #1
 8000550:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000552:	4b18      	ldr	r3, [pc, #96]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 8000554:	2280      	movs	r2, #128	; 0x80
 8000556:	00d2      	lsls	r2, r2, #3
 8000558:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800055a:	4b16      	ldr	r3, [pc, #88]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 800055c:	2220      	movs	r2, #32
 800055e:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000560:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 8000568:	0018      	movs	r0, r3
 800056a:	f001 fdf1 	bl	8002150 <HAL_DMA_Init>
 800056e:	1e03      	subs	r3, r0, #0
 8000570:	d001      	beq.n	8000576 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000572:	f000 fc59 	bl	8000e28 <Error_Handler>
    }

    __HAL_DMA2_REMAP(HAL_DMA2_CH5_ADC);
 8000576:	4a11      	ldr	r2, [pc, #68]	; (80005bc <HAL_ADC_MspInit+0x104>)
 8000578:	23a8      	movs	r3, #168	; 0xa8
 800057a:	58d3      	ldr	r3, [r2, r3]
 800057c:	490f      	ldr	r1, [pc, #60]	; (80005bc <HAL_ADC_MspInit+0x104>)
 800057e:	4a10      	ldr	r2, [pc, #64]	; (80005c0 <HAL_ADC_MspInit+0x108>)
 8000580:	4013      	ands	r3, r2
 8000582:	22a8      	movs	r2, #168	; 0xa8
 8000584:	508b      	str	r3, [r1, r2]
 8000586:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <HAL_ADC_MspInit+0x104>)
 8000588:	23a8      	movs	r3, #168	; 0xa8
 800058a:	58d3      	ldr	r3, [r2, r3]
 800058c:	490b      	ldr	r1, [pc, #44]	; (80005bc <HAL_ADC_MspInit+0x104>)
 800058e:	2280      	movs	r2, #128	; 0x80
 8000590:	0252      	lsls	r2, r2, #9
 8000592:	4313      	orrs	r3, r2
 8000594:	22a8      	movs	r2, #168	; 0xa8
 8000596:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 800059c:	631a      	str	r2, [r3, #48]	; 0x30
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_ADC_MspInit+0xfc>)
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b00b      	add	sp, #44	; 0x2c
 80005aa:	bd90      	pop	{r4, r7, pc}
 80005ac:	40012400 	.word	0x40012400
 80005b0:	40021000 	.word	0x40021000
 80005b4:	200000d0 	.word	0x200000d0
 80005b8:	40020458 	.word	0x40020458
 80005bc:	40020400 	.word	0x40020400
 80005c0:	fff0ffff 	.word	0xfff0ffff

080005c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_DMA_Init+0x70>)
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	4b19      	ldr	r3, [pc, #100]	; (8000634 <MX_DMA_Init+0x70>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	615a      	str	r2, [r3, #20]
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_DMA_Init+0x70>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_DMA_Init+0x70>)
 80005e4:	695a      	ldr	r2, [r3, #20]
 80005e6:	4b13      	ldr	r3, [pc, #76]	; (8000634 <MX_DMA_Init+0x70>)
 80005e8:	2102      	movs	r1, #2
 80005ea:	430a      	orrs	r2, r1
 80005ec:	615a      	str	r2, [r3, #20]
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_DMA_Init+0x70>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	2202      	movs	r2, #2
 80005f4:	4013      	ands	r3, r2
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Ch1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch1_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	2009      	movs	r0, #9
 8000600:	f001 fd74 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch1_IRQn);
 8000604:	2009      	movs	r0, #9
 8000606:	f001 fd86 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch2_3_DMA2_Ch1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch2_3_DMA2_Ch1_2_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	200a      	movs	r0, #10
 8000610:	f001 fd6c 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch2_3_DMA2_Ch1_2_IRQn);
 8000614:	200a      	movs	r0, #10
 8000616:	f001 fd7e 	bl	8002116 <HAL_NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2100      	movs	r1, #0
 800061e:	200b      	movs	r0, #11
 8000620:	f001 fd64 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8000624:	200b      	movs	r0, #11
 8000626:	f001 fd76 	bl	8002116 <HAL_NVIC_EnableIRQ>

}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b002      	add	sp, #8
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	40021000 	.word	0x40021000

08000638 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000638:	b590      	push	{r4, r7, lr}
 800063a:	b08b      	sub	sp, #44	; 0x2c
 800063c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063e:	2414      	movs	r4, #20
 8000640:	193b      	adds	r3, r7, r4
 8000642:	0018      	movs	r0, r3
 8000644:	2314      	movs	r3, #20
 8000646:	001a      	movs	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f005 f803 	bl	8005654 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064e:	4b50      	ldr	r3, [pc, #320]	; (8000790 <MX_GPIO_Init+0x158>)
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	4b4f      	ldr	r3, [pc, #316]	; (8000790 <MX_GPIO_Init+0x158>)
 8000654:	2180      	movs	r1, #128	; 0x80
 8000656:	0309      	lsls	r1, r1, #12
 8000658:	430a      	orrs	r2, r1
 800065a:	615a      	str	r2, [r3, #20]
 800065c:	4b4c      	ldr	r3, [pc, #304]	; (8000790 <MX_GPIO_Init+0x158>)
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	2380      	movs	r3, #128	; 0x80
 8000662:	031b      	lsls	r3, r3, #12
 8000664:	4013      	ands	r3, r2
 8000666:	613b      	str	r3, [r7, #16]
 8000668:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800066a:	4b49      	ldr	r3, [pc, #292]	; (8000790 <MX_GPIO_Init+0x158>)
 800066c:	695a      	ldr	r2, [r3, #20]
 800066e:	4b48      	ldr	r3, [pc, #288]	; (8000790 <MX_GPIO_Init+0x158>)
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	03c9      	lsls	r1, r1, #15
 8000674:	430a      	orrs	r2, r1
 8000676:	615a      	str	r2, [r3, #20]
 8000678:	4b45      	ldr	r3, [pc, #276]	; (8000790 <MX_GPIO_Init+0x158>)
 800067a:	695a      	ldr	r2, [r3, #20]
 800067c:	2380      	movs	r3, #128	; 0x80
 800067e:	03db      	lsls	r3, r3, #15
 8000680:	4013      	ands	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000686:	4b42      	ldr	r3, [pc, #264]	; (8000790 <MX_GPIO_Init+0x158>)
 8000688:	695a      	ldr	r2, [r3, #20]
 800068a:	4b41      	ldr	r3, [pc, #260]	; (8000790 <MX_GPIO_Init+0x158>)
 800068c:	2180      	movs	r1, #128	; 0x80
 800068e:	0289      	lsls	r1, r1, #10
 8000690:	430a      	orrs	r2, r1
 8000692:	615a      	str	r2, [r3, #20]
 8000694:	4b3e      	ldr	r3, [pc, #248]	; (8000790 <MX_GPIO_Init+0x158>)
 8000696:	695a      	ldr	r2, [r3, #20]
 8000698:	2380      	movs	r3, #128	; 0x80
 800069a:	029b      	lsls	r3, r3, #10
 800069c:	4013      	ands	r3, r2
 800069e:	60bb      	str	r3, [r7, #8]
 80006a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <MX_GPIO_Init+0x158>)
 80006a4:	695a      	ldr	r2, [r3, #20]
 80006a6:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <MX_GPIO_Init+0x158>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	02c9      	lsls	r1, r1, #11
 80006ac:	430a      	orrs	r2, r1
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <MX_GPIO_Init+0x158>)
 80006b2:	695a      	ldr	r2, [r3, #20]
 80006b4:	2380      	movs	r3, #128	; 0x80
 80006b6:	02db      	lsls	r3, r3, #11
 80006b8:	4013      	ands	r3, r2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SEG_G_Pin|SEG_D_Pin|SEG_E_Pin|SEG_C_Pin
 80006be:	4935      	ldr	r1, [pc, #212]	; (8000794 <MX_GPIO_Init+0x15c>)
 80006c0:	4b35      	ldr	r3, [pc, #212]	; (8000798 <MX_GPIO_Init+0x160>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f002 f871 	bl	80027ac <HAL_GPIO_WritePin>
                          |SEG_B_Pin|SEG_F_Pin|SEG_A_Pin|SEG_DP_Pin
                          |COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NSS_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006ca:	2390      	movs	r3, #144	; 0x90
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2200      	movs	r2, #0
 80006d0:	2130      	movs	r1, #48	; 0x30
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 f86a 	bl	80027ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2280      	movs	r2, #128	; 0x80
 80006dc:	0192      	lsls	r2, r2, #6
 80006de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2284      	movs	r2, #132	; 0x84
 80006e4:	0392      	lsls	r2, r2, #14
 80006e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	4a29      	ldr	r2, [pc, #164]	; (8000798 <MX_GPIO_Init+0x160>)
 80006f2:	0019      	movs	r1, r3
 80006f4:	0010      	movs	r0, r2
 80006f6:	f001 fee1 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SEG_G_Pin|SEG_D_Pin|SEG_E_Pin|SEG_C_Pin
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	4a25      	ldr	r2, [pc, #148]	; (8000794 <MX_GPIO_Init+0x15c>)
 80006fe:	601a      	str	r2, [r3, #0]
                          |SEG_B_Pin|SEG_F_Pin|SEG_A_Pin|SEG_DP_Pin
                          |COM4_Pin|COM3_Pin|COM2_Pin|COM1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000700:	193b      	adds	r3, r7, r4
 8000702:	2201      	movs	r2, #1
 8000704:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	193b      	adds	r3, r7, r4
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	193b      	adds	r3, r7, r4
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000712:	193b      	adds	r3, r7, r4
 8000714:	4a20      	ldr	r2, [pc, #128]	; (8000798 <MX_GPIO_Init+0x160>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f001 fecf 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin|LD2_Pin;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2230      	movs	r2, #48	; 0x30
 8000722:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2201      	movs	r2, #1
 8000728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000736:	193a      	adds	r2, r7, r4
 8000738:	2390      	movs	r3, #144	; 0x90
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	0011      	movs	r1, r2
 800073e:	0018      	movs	r0, r3
 8000740:	f001 febc 	bl	80024bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin;
 8000744:	0021      	movs	r1, r4
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2221      	movs	r2, #33	; 0x21
 800074a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2288      	movs	r2, #136	; 0x88
 8000750:	0352      	lsls	r2, r2, #13
 8000752:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2201      	movs	r2, #1
 8000758:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	187b      	adds	r3, r7, r1
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <MX_GPIO_Init+0x164>)
 800075e:	0019      	movs	r1, r3
 8000760:	0010      	movs	r0, r2
 8000762:	f001 feab 	bl	80024bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000766:	2200      	movs	r2, #0
 8000768:	2100      	movs	r1, #0
 800076a:	2005      	movs	r0, #5
 800076c:	f001 fcbe 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000770:	2005      	movs	r0, #5
 8000772:	f001 fcd0 	bl	8002116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	2007      	movs	r0, #7
 800077c:	f001 fcb6 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000780:	2007      	movs	r0, #7
 8000782:	f001 fcc8 	bl	8002116 <HAL_NVIC_EnableIRQ>

}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b00b      	add	sp, #44	; 0x2c
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40021000 	.word	0x40021000
 8000794:	00000fff 	.word	0x00000fff
 8000798:	48000800 	.word	0x48000800
 800079c:	48000400 	.word	0x48000400

080007a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b084      	sub	sp, #16
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a6:	f000 ff7d 	bl	80016a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007aa:	f000 f861 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ae:	f7ff ff43 	bl	8000638 <MX_GPIO_Init>
  MX_DMA_Init();
 80007b2:	f7ff ff07 	bl	80005c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80007b6:	f000 fe55 	bl	8001464 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80007ba:	f000 fddd 	bl	8001378 <MX_TIM16_Init>
  MX_SPI1_Init();
 80007be:	f000 fb39 	bl	8000e34 <MX_SPI1_Init>
  MX_ADC_Init();
 80007c2:	f7ff fe1f 	bl	8000404 <MX_ADC_Init>
  MX_TIM2_Init();
 80007c6:	f000 fd29 	bl	800121c <MX_TIM2_Init>
  MX_TIM3_Init();
 80007ca:	f000 fd7d 	bl	80012c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16);
 80007ce:	4b23      	ldr	r3, [pc, #140]	; (800085c <main+0xbc>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f003 fe41 	bl	8004458 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc, (uint32_t *) bufferADC, 1);
 80007d6:	4922      	ldr	r1, [pc, #136]	; (8000860 <main+0xc0>)
 80007d8:	4b22      	ldr	r3, [pc, #136]	; (8000864 <main+0xc4>)
 80007da:	2201      	movs	r2, #1
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 f929 	bl	8001a34 <HAL_ADC_Start_DMA>


	uint8_t MEMSTxBuf[2];
	uint8_t MEMSRxBuf[2];

	MEMSTxBuf[0] = 0x00 | 0x20;
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2220      	movs	r2, #32
 80007e6:	701a      	strb	r2, [r3, #0]
	MEMSTxBuf[1] = 0x47;
 80007e8:	1d3b      	adds	r3, r7, #4
 80007ea:	2247      	movs	r2, #71	; 0x47
 80007ec:	705a      	strb	r2, [r3, #1]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80007ee:	2390      	movs	r3, #144	; 0x90
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	2200      	movs	r2, #0
 80007f4:	2110      	movs	r1, #16
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 ffd8 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, MEMSTxBuf, 2, 10);
 80007fc:	1d39      	adds	r1, r7, #4
 80007fe:	481a      	ldr	r0, [pc, #104]	; (8000868 <main+0xc8>)
 8000800:	230a      	movs	r3, #10
 8000802:	2202      	movs	r2, #2
 8000804:	f002 feb6 	bl	8003574 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000808:	2390      	movs	r3, #144	; 0x90
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	2201      	movs	r2, #1
 800080e:	2110      	movs	r1, #16
 8000810:	0018      	movs	r0, r3
 8000812:	f001 ffcb 	bl	80027ac <HAL_GPIO_WritePin>

	uint8_t *MEMSTxBuf_ptr;
	uint8_t *MEMSRxBuf_ptr;

	MEMSTxBuf_ptr = &MEMSTxBuf;
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	60fb      	str	r3, [r7, #12]
	MEMSRxBuf_ptr = &MEMSRxBuf;
 800081a:	003b      	movs	r3, r7
 800081c:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  State_Buttons(); // Function check button state
 800081e:	f000 f94f 	bl	8000ac0 <State_Buttons>

	  switch(Menu_cnt){
 8000822:	4b12      	ldr	r3, [pc, #72]	; (800086c <main+0xcc>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	2b03      	cmp	r3, #3
 800082a:	d00f      	beq.n	800084c <main+0xac>
 800082c:	dc11      	bgt.n	8000852 <main+0xb2>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d002      	beq.n	8000838 <main+0x98>
 8000832:	2b02      	cmp	r3, #2
 8000834:	d003      	beq.n	800083e <main+0x9e>
		  break;
	  case 3:
		  Program_3();
		  break;
	  default:
		  break;
 8000836:	e00c      	b.n	8000852 <main+0xb2>
		  Program_1();
 8000838:	f000 f882 	bl	8000940 <Program_1>
		  break;
 800083c:	e00a      	b.n	8000854 <main+0xb4>
		  Program_2(MEMSTxBuf_ptr, MEMSRxBuf_ptr);
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	0011      	movs	r1, r2
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f8a5 	bl	8000994 <Program_2>
		  break;
 800084a:	e003      	b.n	8000854 <main+0xb4>
		  Program_3();
 800084c:	f000 f932 	bl	8000ab4 <Program_3>
		  break;
 8000850:	e000      	b.n	8000854 <main+0xb4>
		  break;
 8000852:	46c0      	nop			; (mov r8, r8)
	  }


	  HAL_Delay(100);
 8000854:	2064      	movs	r0, #100	; 0x64
 8000856:	f000 ff89 	bl	800176c <HAL_Delay>
	  State_Buttons(); // Function check button state
 800085a:	e7e0      	b.n	800081e <main+0x7e>
 800085c:	2000037c 	.word	0x2000037c
 8000860:	2000018c 	.word	0x2000018c
 8000864:	20000090 	.word	0x20000090
 8000868:	200001fc 	.word	0x200001fc
 800086c:	20000114 	.word	0x20000114

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b099      	sub	sp, #100	; 0x64
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	242c      	movs	r4, #44	; 0x2c
 8000878:	193b      	adds	r3, r7, r4
 800087a:	0018      	movs	r0, r3
 800087c:	2334      	movs	r3, #52	; 0x34
 800087e:	001a      	movs	r2, r3
 8000880:	2100      	movs	r1, #0
 8000882:	f004 fee7 	bl	8005654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000886:	231c      	movs	r3, #28
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	0018      	movs	r0, r3
 800088c:	2310      	movs	r3, #16
 800088e:	001a      	movs	r2, r3
 8000890:	2100      	movs	r1, #0
 8000892:	f004 fedf 	bl	8005654 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000896:	003b      	movs	r3, r7
 8000898:	0018      	movs	r0, r3
 800089a:	231c      	movs	r3, #28
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f004 fed8 	bl	8005654 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80008a4:	0021      	movs	r1, r4
 80008a6:	187b      	adds	r3, r7, r1
 80008a8:	2212      	movs	r2, #18
 80008aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ac:	187b      	adds	r3, r7, r1
 80008ae:	2201      	movs	r2, #1
 80008b0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80008b2:	187b      	adds	r3, r7, r1
 80008b4:	2201      	movs	r2, #1
 80008b6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	187b      	adds	r3, r7, r1
 80008ba:	2210      	movs	r2, #16
 80008bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80008be:	187b      	adds	r3, r7, r1
 80008c0:	2210      	movs	r2, #16
 80008c2:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2202      	movs	r2, #2
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0212      	lsls	r2, r2, #8
 80008d0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	22a0      	movs	r2, #160	; 0xa0
 80008d6:	0392      	lsls	r2, r2, #14
 80008d8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	2201      	movs	r2, #1
 80008de:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	0018      	movs	r0, r3
 80008e4:	f001 ff9c 	bl	8002820 <HAL_RCC_OscConfig>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80008ec:	f000 fa9c 	bl	8000e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	211c      	movs	r1, #28
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2207      	movs	r2, #7
 80008f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2202      	movs	r2, #2
 80008fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fe:	187b      	adds	r3, r7, r1
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000904:	187b      	adds	r3, r7, r1
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800090a:	187b      	adds	r3, r7, r1
 800090c:	2101      	movs	r1, #1
 800090e:	0018      	movs	r0, r3
 8000910:	f002 fb0c 	bl	8002f2c <HAL_RCC_ClockConfig>
 8000914:	1e03      	subs	r3, r0, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000918:	f000 fa86 	bl	8000e28 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800091c:	003b      	movs	r3, r7
 800091e:	2202      	movs	r2, #2
 8000920:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000922:	003b      	movs	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	003b      	movs	r3, r7
 800092a:	0018      	movs	r0, r3
 800092c:	f002 fc6a 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000930:	1e03      	subs	r3, r0, #0
 8000932:	d001      	beq.n	8000938 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000934:	f000 fa78 	bl	8000e28 <Error_Handler>
  }
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b019      	add	sp, #100	; 0x64
 800093e:	bd90      	pop	{r4, r7, pc}

08000940 <Program_1>:

/* USER CODE BEGIN 4 */

void Program_1(){
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc, bufferADC, 1);
 8000944:	490d      	ldr	r1, [pc, #52]	; (800097c <Program_1+0x3c>)
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <Program_1+0x40>)
 8000948:	2201      	movs	r2, #1
 800094a:	0018      	movs	r0, r3
 800094c:	f001 f872 	bl	8001a34 <HAL_ADC_Start_DMA>
	tx_buf_length = sprintf(tx_buf,"%d \r\n", bufferADC[0]);
 8000950:	4b0a      	ldr	r3, [pc, #40]	; (800097c <Program_1+0x3c>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	490b      	ldr	r1, [pc, #44]	; (8000984 <Program_1+0x44>)
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <Program_1+0x48>)
 8000958:	0018      	movs	r0, r3
 800095a:	f004 fe83 	bl	8005664 <siprintf>
 800095e:	0003      	movs	r3, r0
 8000960:	b29a      	uxth	r2, r3
 8000962:	4b0a      	ldr	r3, [pc, #40]	; (800098c <Program_1+0x4c>)
 8000964:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, tx_buf, tx_buf_length, 10);
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <Program_1+0x4c>)
 8000968:	881b      	ldrh	r3, [r3, #0]
 800096a:	b29a      	uxth	r2, r3
 800096c:	4906      	ldr	r1, [pc, #24]	; (8000988 <Program_1+0x48>)
 800096e:	4808      	ldr	r0, [pc, #32]	; (8000990 <Program_1+0x50>)
 8000970:	230a      	movs	r3, #10
 8000972:	f004 f993 	bl	8004c9c <HAL_UART_Transmit>
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000018c 	.word	0x2000018c
 8000980:	20000090 	.word	0x20000090
 8000984:	08005f50 	.word	0x08005f50
 8000988:	20000124 	.word	0x20000124
 800098c:	20000188 	.word	0x20000188
 8000990:	200003c4 	.word	0x200003c4

08000994 <Program_2>:


void Program_2(uint8_t * MEMSTxBuf, uint8_t * MEMSRxBuf){
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b085      	sub	sp, #20
 8000998:	af02      	add	r7, sp, #8
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
	MEMSRxBuf[0]= 0x80 | 0x29;
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	22a9      	movs	r2, #169	; 0xa9
 80009a2:	701a      	strb	r2, [r3, #0]
	MEMSRxBuf[1]= 0x00;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	3301      	adds	r3, #1
 80009a8:	2200      	movs	r2, #0
 80009aa:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80009ac:	2390      	movs	r3, #144	; 0x90
 80009ae:	05db      	lsls	r3, r3, #23
 80009b0:	2200      	movs	r2, #0
 80009b2:	2110      	movs	r1, #16
 80009b4:	0018      	movs	r0, r3
 80009b6:	f001 fef9 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_SPI_Receive_DMA(&hspi1, MEMSRxBuf, 2);
 80009ba:	6839      	ldr	r1, [r7, #0]
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <Program_2+0x108>)
 80009be:	2202      	movs	r2, #2
 80009c0:	0018      	movs	r0, r3
 80009c2:	f002 ff37 	bl	8003834 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80009c6:	2390      	movs	r3, #144	; 0x90
 80009c8:	05db      	lsls	r3, r3, #23
 80009ca:	2201      	movs	r2, #1
 80009cc:	2110      	movs	r1, #16
 80009ce:	0018      	movs	r0, r3
 80009d0:	f001 feec 	bl	80027ac <HAL_GPIO_WritePin>
	Mems[0]= MEMSRxBuf[1];
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	785a      	ldrb	r2, [r3, #1]
 80009d8:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <Program_2+0x10c>)
 80009da:	701a      	strb	r2, [r3, #0]

	MEMSRxBuf[0]= 0x80 | 0x2B;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	22ab      	movs	r2, #171	; 0xab
 80009e0:	701a      	strb	r2, [r3, #0]
	MEMSRxBuf[1]= 0x00;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80009ea:	2390      	movs	r3, #144	; 0x90
 80009ec:	05db      	lsls	r3, r3, #23
 80009ee:	2200      	movs	r2, #0
 80009f0:	2110      	movs	r1, #16
 80009f2:	0018      	movs	r0, r3
 80009f4:	f001 feda 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_SPI_Receive_DMA(&hspi1, MEMSRxBuf, 2);
 80009f8:	6839      	ldr	r1, [r7, #0]
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <Program_2+0x108>)
 80009fc:	2202      	movs	r2, #2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 ff18 	bl	8003834 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000a04:	2390      	movs	r3, #144	; 0x90
 8000a06:	05db      	lsls	r3, r3, #23
 8000a08:	2201      	movs	r2, #1
 8000a0a:	2110      	movs	r1, #16
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f001 fecd 	bl	80027ac <HAL_GPIO_WritePin>
	Mems[1]= MEMSRxBuf[1];
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	785a      	ldrb	r2, [r3, #1]
 8000a16:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <Program_2+0x10c>)
 8000a18:	705a      	strb	r2, [r3, #1]

	MEMSRxBuf[0]= 0x80 | 0x2D;
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	22ad      	movs	r2, #173	; 0xad
 8000a1e:	701a      	strb	r2, [r3, #0]
	MEMSRxBuf[1]= 0x00;
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000a28:	2390      	movs	r3, #144	; 0x90
 8000a2a:	05db      	lsls	r3, r3, #23
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 febb 	bl	80027ac <HAL_GPIO_WritePin>
	HAL_SPI_Receive_DMA(&hspi1, MEMSRxBuf, 2);
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <Program_2+0x108>)
 8000a3a:	2202      	movs	r2, #2
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f002 fef9 	bl	8003834 <HAL_SPI_Receive_DMA>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000a42:	2390      	movs	r3, #144	; 0x90
 8000a44:	05db      	lsls	r3, r3, #23
 8000a46:	2201      	movs	r2, #1
 8000a48:	2110      	movs	r1, #16
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 feae 	bl	80027ac <HAL_GPIO_WritePin>
	Mems[2]= MEMSRxBuf[1];
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	785a      	ldrb	r2, [r3, #1]
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <Program_2+0x10c>)
 8000a56:	709a      	strb	r2, [r3, #2]

	Buffer_tx_len = sprintf(Buffer_tx, "x: %d | y: %d | z: %d \r\n",Mems[0], Mems[1], Mems[2]);
 8000a58:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <Program_2+0x10c>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	001a      	movs	r2, r3
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <Program_2+0x10c>)
 8000a62:	785b      	ldrb	r3, [r3, #1]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	001c      	movs	r4, r3
 8000a68:	4b0d      	ldr	r3, [pc, #52]	; (8000aa0 <Program_2+0x10c>)
 8000a6a:	789b      	ldrb	r3, [r3, #2]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	490d      	ldr	r1, [pc, #52]	; (8000aa4 <Program_2+0x110>)
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <Program_2+0x114>)
 8000a72:	9300      	str	r3, [sp, #0]
 8000a74:	0023      	movs	r3, r4
 8000a76:	f004 fdf5 	bl	8005664 <siprintf>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	; (8000aac <Program_2+0x118>)
 8000a80:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Buffer_tx, Buffer_tx_len, 10);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <Program_2+0x118>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	4907      	ldr	r1, [pc, #28]	; (8000aa8 <Program_2+0x114>)
 8000a8c:	4808      	ldr	r0, [pc, #32]	; (8000ab0 <Program_2+0x11c>)
 8000a8e:	230a      	movs	r3, #10
 8000a90:	f004 f904 	bl	8004c9c <HAL_UART_Transmit>
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b003      	add	sp, #12
 8000a9a:	bd90      	pop	{r4, r7, pc}
 8000a9c:	200001fc 	.word	0x200001fc
 8000aa0:	200001f8 	.word	0x200001f8
 8000aa4:	08005f58 	.word	0x08005f58
 8000aa8:	20000190 	.word	0x20000190
 8000aac:	200001f4 	.word	0x200001f4
 8000ab0:	200003c4 	.word	0x200003c4

08000ab4 <Program_3>:

void Program_3(){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <State_Buttons>:

void State_Buttons(){
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	int actual = HAL_GetTick() ;
 8000ac6:	f000 fe47 	bl	8001758 <HAL_GetTick>
 8000aca:	0003      	movs	r3, r0
 8000acc:	607b      	str	r3, [r7, #4]
	if(state1 != 0){
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <State_Buttons+0x7c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d013      	beq.n	8000b00 <State_Buttons+0x40>
		if((actual - lastDebounceTime1) > debounceDelay){
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <State_Buttons+0x80>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	1ad3      	subs	r3, r2, r3
 8000ae0:	22fa      	movs	r2, #250	; 0xfa
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	dd0c      	ble.n	8000b00 <State_Buttons+0x40>
			Menu_cnt++;
 8000ae6:	4b17      	ldr	r3, [pc, #92]	; (8000b44 <State_Buttons+0x84>)
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <State_Buttons+0x84>)
 8000af2:	701a      	strb	r2, [r3, #0]
			lastDebounceTime1 = 0;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <State_Buttons+0x80>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
			state1 = 0;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <State_Buttons+0x7c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
			}
		}
	if(state2 != 0){
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <State_Buttons+0x88>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d013      	beq.n	8000b32 <State_Buttons+0x72>
		if((actual - lastDebounceTime2) > debounceDelay){
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <State_Buttons+0x8c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	687a      	ldr	r2, [r7, #4]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	22fa      	movs	r2, #250	; 0xfa
 8000b14:	4293      	cmp	r3, r2
 8000b16:	dd0c      	ble.n	8000b32 <State_Buttons+0x72>
			Menu_cnt--;
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <State_Buttons+0x84>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	3b01      	subs	r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <State_Buttons+0x84>)
 8000b24:	701a      	strb	r2, [r3, #0]
			lastDebounceTime2 = 0;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <State_Buttons+0x8c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
			state2 = 0;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <State_Buttons+0x88>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
			}
		}
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b002      	add	sp, #8
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	20000120 	.word	0x20000120
 8000b40:	20000118 	.word	0x20000118
 8000b44:	20000114 	.word	0x20000114
 8000b48:	20000121 	.word	0x20000121
 8000b4c:	2000011c 	.word	0x2000011c

08000b50 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	0002      	movs	r2, r0
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	801a      	strh	r2, [r3, #0]
	switch( GPIO_Pin ){
 8000b5c:	1dbb      	adds	r3, r7, #6
 8000b5e:	881b      	ldrh	r3, [r3, #0]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d00b      	beq.n	8000b7c <HAL_GPIO_EXTI_Callback+0x2c>
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d113      	bne.n	8000b90 <HAL_GPIO_EXTI_Callback+0x40>
		case Button2_Pin:
			state1 = 1;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	701a      	strb	r2, [r3, #0]
			lastDebounceTime1 = HAL_GetTick();
 8000b6e:	f000 fdf3 	bl	8001758 <HAL_GetTick>
 8000b72:	0003      	movs	r3, r0
 8000b74:	001a      	movs	r2, r3
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_GPIO_EXTI_Callback+0x50>)
 8000b78:	601a      	str	r2, [r3, #0]
			break;
 8000b7a:	e00a      	b.n	8000b92 <HAL_GPIO_EXTI_Callback+0x42>
		case Button1_Pin:
			state2 = 1;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <HAL_GPIO_EXTI_Callback+0x54>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
			lastDebounceTime2 = HAL_GetTick();
 8000b82:	f000 fde9 	bl	8001758 <HAL_GetTick>
 8000b86:	0003      	movs	r3, r0
 8000b88:	001a      	movs	r2, r3
 8000b8a:	4b07      	ldr	r3, [pc, #28]	; (8000ba8 <HAL_GPIO_EXTI_Callback+0x58>)
 8000b8c:	601a      	str	r2, [r3, #0]
			break;
 8000b8e:	e000      	b.n	8000b92 <HAL_GPIO_EXTI_Callback+0x42>
		default:
			break;
 8000b90:	46c0      	nop			; (mov r8, r8)
		}
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46bd      	mov	sp, r7
 8000b96:	b002      	add	sp, #8
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	20000120 	.word	0x20000120
 8000ba0:	20000118 	.word	0x20000118
 8000ba4:	20000121 	.word	0x20000121
 8000ba8:	2000011c 	.word	0x2000011c

08000bac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM16){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a15      	ldr	r2, [pc, #84]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d123      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x5a>

		if(Menu_cnt < 0) Menu_cnt = 0;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
		if(Menu_cnt > 10) Menu_cnt = 10;
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	b2db      	uxtb	r3, r3
 8000bc8:	2b0a      	cmp	r3, #10
 8000bca:	d902      	bls.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x26>
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bce:	220a      	movs	r2, #10
 8000bd0:	701a      	strb	r2, [r3, #0]

		Display(Menu_cnt,counter_timer);
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	001a      	movs	r2, r3
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	0019      	movs	r1, r3
 8000be2:	0010      	movs	r0, r2
 8000be4:	f000 f85c 	bl	8000ca0 <Display>

		counter_timer++;
 8000be8:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bf4:	701a      	strb	r2, [r3, #0]
		if(counter_timer > 4){
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b04      	cmp	r3, #4
 8000bfe:	d902      	bls.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x5a>
			counter_timer = 1;
 8000c00:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	40014400 	.word	0x40014400
 8000c14:	20000114 	.word	0x20000114
 8000c18:	20000000 	.word	0x20000000

08000c1c <Set_Sign>:

void Set_Sign(uint8_t count, uint8_t display_number){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	1dbb      	adds	r3, r7, #6
 8000c2a:	1c0a      	adds	r2, r1, #0
 8000c2c:	701a      	strb	r2, [r3, #0]
	GPIOC -> ODR |= ~(0x0F << 8); // clear all display
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <Set_Sign+0x78>)
 8000c30:	695a      	ldr	r2, [r3, #20]
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <Set_Sign+0x78>)
 8000c34:	4918      	ldr	r1, [pc, #96]	; (8000c98 <Set_Sign+0x7c>)
 8000c36:	430a      	orrs	r2, r1
 8000c38:	615a      	str	r2, [r3, #20]
	//set displayHAL_ADC_ConvCpltCallback
	GPIOC -> ODR |= (0x0F << 8);
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <Set_Sign+0x78>)
 8000c3c:	695a      	ldr	r2, [r3, #20]
 8000c3e:	4b15      	ldr	r3, [pc, #84]	; (8000c94 <Set_Sign+0x78>)
 8000c40:	21f0      	movs	r1, #240	; 0xf0
 8000c42:	0109      	lsls	r1, r1, #4
 8000c44:	430a      	orrs	r2, r1
 8000c46:	615a      	str	r2, [r3, #20]
	GPIOC -> ODR &= ((0x0F ^ (1 << (display_number -1))) << 8);
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <Set_Sign+0x78>)
 8000c4a:	695a      	ldr	r2, [r3, #20]
 8000c4c:	1dbb      	adds	r3, r7, #6
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	3b01      	subs	r3, #1
 8000c52:	2101      	movs	r1, #1
 8000c54:	4099      	lsls	r1, r3
 8000c56:	000b      	movs	r3, r1
 8000c58:	021b      	lsls	r3, r3, #8
 8000c5a:	21f0      	movs	r1, #240	; 0xf0
 8000c5c:	0109      	lsls	r1, r1, #4
 8000c5e:	404b      	eors	r3, r1
 8000c60:	0019      	movs	r1, r3
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <Set_Sign+0x78>)
 8000c64:	400a      	ands	r2, r1
 8000c66:	615a      	str	r2, [r3, #20]
	//print sign
	GPIOC -> ODR |= (0xFF << 0);
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <Set_Sign+0x78>)
 8000c6a:	695a      	ldr	r2, [r3, #20]
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <Set_Sign+0x78>)
 8000c6e:	21ff      	movs	r1, #255	; 0xff
 8000c70:	430a      	orrs	r2, r1
 8000c72:	615a      	str	r2, [r3, #20]
	GPIOC -> ODR &= (~(Set_number[count])<<0);
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <Set_Sign+0x78>)
 8000c76:	695a      	ldr	r2, [r3, #20]
 8000c78:	1dfb      	adds	r3, r7, #7
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4907      	ldr	r1, [pc, #28]	; (8000c9c <Set_Sign+0x80>)
 8000c7e:	5ccb      	ldrb	r3, [r1, r3]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	0019      	movs	r1, r3
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <Set_Sign+0x78>)
 8000c86:	400a      	ands	r2, r1
 8000c88:	615a      	str	r2, [r3, #20]
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b002      	add	sp, #8
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	48000800 	.word	0x48000800
 8000c98:	fffff0ff 	.word	0xfffff0ff
 8000c9c:	08005f74 	.word	0x08005f74

08000ca0 <Display>:

void Display(int number_display, uint8_t counter_timer){
 8000ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	000a      	movs	r2, r1
 8000caa:	1cfb      	adds	r3, r7, #3
 8000cac:	701a      	strb	r2, [r3, #0]
	// Devide to units count to display

	//ONLY FOR COUNT type INT FROM RANGE --- [0-9999]
	if(number_display >= 0 && number_display <= 9999){
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	da00      	bge.n	8000cb6 <Display+0x16>
 8000cb4:	e0b2      	b.n	8000e1c <Display+0x17c>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4a5a      	ldr	r2, [pc, #360]	; (8000e24 <Display+0x184>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	dd00      	ble.n	8000cc0 <Display+0x20>
 8000cbe:	e0ad      	b.n	8000e1c <Display+0x17c>
		uint8_t sign = 10;
 8000cc0:	230b      	movs	r3, #11
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	220a      	movs	r2, #10
 8000cc6:	701a      	strb	r2, [r3, #0]

			//data to divide example: number_display = 1234, a = 1, b = 2, c = 3, d = 4
			uint8_t a = 10;
 8000cc8:	240f      	movs	r4, #15
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	220a      	movs	r2, #10
 8000cce:	701a      	strb	r2, [r3, #0]
			uint8_t b = 10;
 8000cd0:	250e      	movs	r5, #14
 8000cd2:	197b      	adds	r3, r7, r5
 8000cd4:	220a      	movs	r2, #10
 8000cd6:	701a      	strb	r2, [r3, #0]
			uint8_t c = 10;
 8000cd8:	260d      	movs	r6, #13
 8000cda:	19bb      	adds	r3, r7, r6
 8000cdc:	220a      	movs	r2, #10
 8000cde:	701a      	strb	r2, [r3, #0]
			uint8_t d = 10; // 10 is clear display
 8000ce0:	210c      	movs	r1, #12
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	220a      	movs	r2, #10
 8000ce6:	701a      	strb	r2, [r3, #0]

			//Divide:
			a = number_display / 1000;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	22fa      	movs	r2, #250	; 0xfa
 8000cec:	0091      	lsls	r1, r2, #2
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f7ff fa9c 	bl	800022c <__divsi3>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	193b      	adds	r3, r7, r4
 8000cfa:	701a      	strb	r2, [r3, #0]
			number_display = number_display % 1000;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	22fa      	movs	r2, #250	; 0xfa
 8000d00:	0091      	lsls	r1, r2, #2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fb78 	bl	80003f8 <__aeabi_idivmod>
 8000d08:	000b      	movs	r3, r1
 8000d0a:	607b      	str	r3, [r7, #4]

			b = number_display / 100;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2164      	movs	r1, #100	; 0x64
 8000d10:	0018      	movs	r0, r3
 8000d12:	f7ff fa8b 	bl	800022c <__divsi3>
 8000d16:	0003      	movs	r3, r0
 8000d18:	001a      	movs	r2, r3
 8000d1a:	197b      	adds	r3, r7, r5
 8000d1c:	701a      	strb	r2, [r3, #0]
			number_display = number_display % 100;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2164      	movs	r1, #100	; 0x64
 8000d22:	0018      	movs	r0, r3
 8000d24:	f7ff fb68 	bl	80003f8 <__aeabi_idivmod>
 8000d28:	000b      	movs	r3, r1
 8000d2a:	607b      	str	r3, [r7, #4]

			c = number_display / 10;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	210a      	movs	r1, #10
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff fa7b 	bl	800022c <__divsi3>
 8000d36:	0003      	movs	r3, r0
 8000d38:	001a      	movs	r2, r3
 8000d3a:	19bb      	adds	r3, r7, r6
 8000d3c:	701a      	strb	r2, [r3, #0]
			number_display = number_display % 10;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	210a      	movs	r1, #10
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff fb58 	bl	80003f8 <__aeabi_idivmod>
 8000d48:	000b      	movs	r3, r1
 8000d4a:	607b      	str	r3, [r7, #4]

			d = number_display;
 8000d4c:	210c      	movs	r1, #12
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	687a      	ldr	r2, [r7, #4]
 8000d52:	701a      	strb	r2, [r3, #0]

			if(a == 0){
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d117      	bne.n	8000d8c <Display+0xec>
				a = 10;
 8000d5c:	193b      	adds	r3, r7, r4
 8000d5e:	220a      	movs	r2, #10
 8000d60:	701a      	strb	r2, [r3, #0]
				if(b == 0){
 8000d62:	197b      	adds	r3, r7, r5
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d110      	bne.n	8000d8c <Display+0xec>
					b = 10;
 8000d6a:	197b      	adds	r3, r7, r5
 8000d6c:	220a      	movs	r2, #10
 8000d6e:	701a      	strb	r2, [r3, #0]
					if(c == 0){
 8000d70:	19bb      	adds	r3, r7, r6
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d109      	bne.n	8000d8c <Display+0xec>
						c = 10;
 8000d78:	19bb      	adds	r3, r7, r6
 8000d7a:	220a      	movs	r2, #10
 8000d7c:	701a      	strb	r2, [r3, #0]
						if(d == 0){
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <Display+0xec>
							d = 10;
 8000d86:	187b      	adds	r3, r7, r1
 8000d88:	220a      	movs	r2, #10
 8000d8a:	701a      	strb	r2, [r3, #0]
						}
					}
				}
			}
			// Display is [4, 3, 2, 1] 4 - is oldest
			if(counter_timer == 1){
 8000d8c:	1cfb      	adds	r3, r7, #3
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d10d      	bne.n	8000db0 <Display+0x110>
				sign = d;
 8000d94:	210b      	movs	r1, #11
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	220c      	movs	r2, #12
 8000d9a:	18ba      	adds	r2, r7, r2
 8000d9c:	7812      	ldrb	r2, [r2, #0]
 8000d9e:	701a      	strb	r2, [r3, #0]
				Set_Sign(sign, counter_timer);
 8000da0:	1cfb      	adds	r3, r7, #3
 8000da2:	781a      	ldrb	r2, [r3, #0]
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	781b      	ldrb	r3, [r3, #0]
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f7ff ff36 	bl	8000c1c <Set_Sign>
			}
			if(counter_timer == 2){
 8000db0:	1cfb      	adds	r3, r7, #3
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d10d      	bne.n	8000dd4 <Display+0x134>
				sign = c;
 8000db8:	210b      	movs	r1, #11
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	220d      	movs	r2, #13
 8000dbe:	18ba      	adds	r2, r7, r2
 8000dc0:	7812      	ldrb	r2, [r2, #0]
 8000dc2:	701a      	strb	r2, [r3, #0]
				Set_Sign(sign, counter_timer);
 8000dc4:	1cfb      	adds	r3, r7, #3
 8000dc6:	781a      	ldrb	r2, [r3, #0]
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff ff24 	bl	8000c1c <Set_Sign>
			}
			if(counter_timer == 3){
 8000dd4:	1cfb      	adds	r3, r7, #3
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b03      	cmp	r3, #3
 8000dda:	d10d      	bne.n	8000df8 <Display+0x158>
				sign = b;
 8000ddc:	210b      	movs	r1, #11
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	220e      	movs	r2, #14
 8000de2:	18ba      	adds	r2, r7, r2
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	701a      	strb	r2, [r3, #0]
				Set_Sign(sign, counter_timer);
 8000de8:	1cfb      	adds	r3, r7, #3
 8000dea:	781a      	ldrb	r2, [r3, #0]
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f7ff ff12 	bl	8000c1c <Set_Sign>
			}
			if(counter_timer == 4){
 8000df8:	1cfb      	adds	r3, r7, #3
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b04      	cmp	r3, #4
 8000dfe:	d10d      	bne.n	8000e1c <Display+0x17c>
				sign = a;
 8000e00:	210b      	movs	r1, #11
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	220f      	movs	r2, #15
 8000e06:	18ba      	adds	r2, r7, r2
 8000e08:	7812      	ldrb	r2, [r2, #0]
 8000e0a:	701a      	strb	r2, [r3, #0]
				Set_Sign(sign, counter_timer);
 8000e0c:	1cfb      	adds	r3, r7, #3
 8000e0e:	781a      	ldrb	r2, [r3, #0]
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff ff00 	bl	8000c1c <Set_Sign>
			}
	}
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b005      	add	sp, #20
 8000e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e24:	0000270f 	.word	0x0000270f

08000e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e2c:	b672      	cpsid	i
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <Error_Handler+0x8>
	...

08000e34 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e3a:	4a1c      	ldr	r2, [pc, #112]	; (8000eac <MX_SPI1_Init+0x78>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e40:	2282      	movs	r2, #130	; 0x82
 8000e42:	0052      	lsls	r2, r2, #1
 8000e44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e4e:	22e0      	movs	r2, #224	; 0xe0
 8000e50:	00d2      	lsls	r2, r2, #3
 8000e52:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000e54:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e56:	2202      	movs	r2, #2
 8000e58:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e5a:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e62:	2280      	movs	r2, #128	; 0x80
 8000e64:	0092      	lsls	r2, r2, #2
 8000e66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e6a:	2218      	movs	r2, #24
 8000e6c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e82:	2207      	movs	r2, #7
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <MX_SPI1_Init+0x74>)
 8000e94:	0018      	movs	r0, r3
 8000e96:	f002 fab5 	bl	8003404 <HAL_SPI_Init>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000e9e:	f7ff ffc3 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	200001fc 	.word	0x200001fc
 8000eac:	40013000 	.word	0x40013000

08000eb0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	2414      	movs	r4, #20
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	2314      	movs	r3, #20
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f004 fbc6 	bl	8005654 <memset>
  if(spiHandle->Instance==SPI1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a66      	ldr	r2, [pc, #408]	; (8001068 <HAL_SPI_MspInit+0x1b8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d000      	beq.n	8000ed4 <HAL_SPI_MspInit+0x24>
 8000ed2:	e0c4      	b.n	800105e <HAL_SPI_MspInit+0x1ae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed4:	4b65      	ldr	r3, [pc, #404]	; (800106c <HAL_SPI_MspInit+0x1bc>)
 8000ed6:	699a      	ldr	r2, [r3, #24]
 8000ed8:	4b64      	ldr	r3, [pc, #400]	; (800106c <HAL_SPI_MspInit+0x1bc>)
 8000eda:	2180      	movs	r1, #128	; 0x80
 8000edc:	0149      	lsls	r1, r1, #5
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	619a      	str	r2, [r3, #24]
 8000ee2:	4b62      	ldr	r3, [pc, #392]	; (800106c <HAL_SPI_MspInit+0x1bc>)
 8000ee4:	699a      	ldr	r2, [r3, #24]
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	015b      	lsls	r3, r3, #5
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
 8000eee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef0:	4b5e      	ldr	r3, [pc, #376]	; (800106c <HAL_SPI_MspInit+0x1bc>)
 8000ef2:	695a      	ldr	r2, [r3, #20]
 8000ef4:	4b5d      	ldr	r3, [pc, #372]	; (800106c <HAL_SPI_MspInit+0x1bc>)
 8000ef6:	2180      	movs	r1, #128	; 0x80
 8000ef8:	0289      	lsls	r1, r1, #10
 8000efa:	430a      	orrs	r2, r1
 8000efc:	615a      	str	r2, [r3, #20]
 8000efe:	4b5b      	ldr	r3, [pc, #364]	; (800106c <HAL_SPI_MspInit+0x1bc>)
 8000f00:	695a      	ldr	r2, [r3, #20]
 8000f02:	2380      	movs	r3, #128	; 0x80
 8000f04:	029b      	lsls	r3, r3, #10
 8000f06:	4013      	ands	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b57      	ldr	r3, [pc, #348]	; (800106c <HAL_SPI_MspInit+0x1bc>)
 8000f0e:	695a      	ldr	r2, [r3, #20]
 8000f10:	4b56      	ldr	r3, [pc, #344]	; (800106c <HAL_SPI_MspInit+0x1bc>)
 8000f12:	2180      	movs	r1, #128	; 0x80
 8000f14:	02c9      	lsls	r1, r1, #11
 8000f16:	430a      	orrs	r2, r1
 8000f18:	615a      	str	r2, [r3, #20]
 8000f1a:	4b54      	ldr	r3, [pc, #336]	; (800106c <HAL_SPI_MspInit+0x1bc>)
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	02db      	lsls	r3, r3, #11
 8000f22:	4013      	ands	r3, r2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f28:	193b      	adds	r3, r7, r4
 8000f2a:	22c0      	movs	r2, #192	; 0xc0
 8000f2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	2202      	movs	r2, #2
 8000f32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	193b      	adds	r3, r7, r4
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f3a:	193b      	adds	r3, r7, r4
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f40:	193b      	adds	r3, r7, r4
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	193a      	adds	r2, r7, r4
 8000f48:	2390      	movs	r3, #144	; 0x90
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	0011      	movs	r1, r2
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f001 fab4 	bl	80024bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f54:	0021      	movs	r1, r4
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2208      	movs	r2, #8
 8000f5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2202      	movs	r2, #2
 8000f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	187b      	adds	r3, r7, r1
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f68:	187b      	adds	r3, r7, r1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	4a3e      	ldr	r2, [pc, #248]	; (8001070 <HAL_SPI_MspInit+0x1c0>)
 8000f78:	0019      	movs	r1, r3
 8000f7a:	0010      	movs	r0, r2
 8000f7c:	f001 fa9e 	bl	80024bc <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8000f80:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000f82:	4a3d      	ldr	r2, [pc, #244]	; (8001078 <HAL_SPI_MspInit+0x1c8>)
 8000f84:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f86:	4b3b      	ldr	r3, [pc, #236]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8c:	4b39      	ldr	r3, [pc, #228]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f9e:	4b35      	ldr	r3, [pc, #212]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000fa4:	4b33      	ldr	r3, [pc, #204]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000faa:	4b32      	ldr	r3, [pc, #200]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000fac:	2280      	movs	r2, #128	; 0x80
 8000fae:	0152      	lsls	r2, r2, #5
 8000fb0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f001 f8cb 	bl	8002150 <HAL_DMA_Init>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8000fbe:	f7ff ff33 	bl	8000e28 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH2_SPI1_RX);
 8000fc2:	4a2e      	ldr	r2, [pc, #184]	; (800107c <HAL_SPI_MspInit+0x1cc>)
 8000fc4:	23a8      	movs	r3, #168	; 0xa8
 8000fc6:	58d3      	ldr	r3, [r2, r3]
 8000fc8:	492c      	ldr	r1, [pc, #176]	; (800107c <HAL_SPI_MspInit+0x1cc>)
 8000fca:	22f0      	movs	r2, #240	; 0xf0
 8000fcc:	4393      	bics	r3, r2
 8000fce:	22a8      	movs	r2, #168	; 0xa8
 8000fd0:	508b      	str	r3, [r1, r2]
 8000fd2:	4a2a      	ldr	r2, [pc, #168]	; (800107c <HAL_SPI_MspInit+0x1cc>)
 8000fd4:	23a8      	movs	r3, #168	; 0xa8
 8000fd6:	58d3      	ldr	r3, [r2, r3]
 8000fd8:	4928      	ldr	r1, [pc, #160]	; (800107c <HAL_SPI_MspInit+0x1cc>)
 8000fda:	2230      	movs	r2, #48	; 0x30
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	22a8      	movs	r2, #168	; 0xa8
 8000fe0:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a23      	ldr	r2, [pc, #140]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000fe6:	659a      	str	r2, [r3, #88]	; 0x58
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_SPI_MspInit+0x1c4>)
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 8000ff0:	4a24      	ldr	r2, [pc, #144]	; (8001084 <HAL_SPI_MspInit+0x1d4>)
 8000ff2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 8000ff6:	2210      	movs	r2, #16
 8000ff8:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 8001002:	2280      	movs	r2, #128	; 0x80
 8001004:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 800100e:	2200      	movs	r2, #0
 8001010:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001012:	4b1b      	ldr	r3, [pc, #108]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001018:	4b19      	ldr	r3, [pc, #100]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 800101a:	2280      	movs	r2, #128	; 0x80
 800101c:	0152      	lsls	r2, r2, #5
 800101e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 8001022:	0018      	movs	r0, r3
 8001024:	f001 f894 	bl	8002150 <HAL_DMA_Init>
 8001028:	1e03      	subs	r3, r0, #0
 800102a:	d001      	beq.n	8001030 <HAL_SPI_MspInit+0x180>
    {
      Error_Handler();
 800102c:	f7ff fefc 	bl	8000e28 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH3_SPI1_TX);
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <HAL_SPI_MspInit+0x1cc>)
 8001032:	23a8      	movs	r3, #168	; 0xa8
 8001034:	58d3      	ldr	r3, [r2, r3]
 8001036:	4911      	ldr	r1, [pc, #68]	; (800107c <HAL_SPI_MspInit+0x1cc>)
 8001038:	4a13      	ldr	r2, [pc, #76]	; (8001088 <HAL_SPI_MspInit+0x1d8>)
 800103a:	4013      	ands	r3, r2
 800103c:	22a8      	movs	r2, #168	; 0xa8
 800103e:	508b      	str	r3, [r1, r2]
 8001040:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_SPI_MspInit+0x1cc>)
 8001042:	23a8      	movs	r3, #168	; 0xa8
 8001044:	58d3      	ldr	r3, [r2, r3]
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <HAL_SPI_MspInit+0x1cc>)
 8001048:	22c0      	movs	r2, #192	; 0xc0
 800104a:	0092      	lsls	r2, r2, #2
 800104c:	4313      	orrs	r3, r2
 800104e:	22a8      	movs	r2, #168	; 0xa8
 8001050:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 8001056:	655a      	str	r2, [r3, #84]	; 0x54
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_SPI_MspInit+0x1d0>)
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	b00b      	add	sp, #44	; 0x2c
 8001064:	bd90      	pop	{r4, r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	40013000 	.word	0x40013000
 800106c:	40021000 	.word	0x40021000
 8001070:	48000400 	.word	0x48000400
 8001074:	20000260 	.word	0x20000260
 8001078:	4002001c 	.word	0x4002001c
 800107c:	40020000 	.word	0x40020000
 8001080:	200002a4 	.word	0x200002a4
 8001084:	40020030 	.word	0x40020030
 8001088:	fffff0ff 	.word	0xfffff0ff

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_MspInit+0x44>)
 8001094:	699a      	ldr	r2, [r3, #24]
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_MspInit+0x44>)
 8001098:	2101      	movs	r1, #1
 800109a:	430a      	orrs	r2, r1
 800109c:	619a      	str	r2, [r3, #24]
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_MspInit+0x44>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	2201      	movs	r2, #1
 80010a4:	4013      	ands	r3, r2
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_MspInit+0x44>)
 80010ac:	69da      	ldr	r2, [r3, #28]
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_MspInit+0x44>)
 80010b0:	2180      	movs	r1, #128	; 0x80
 80010b2:	0549      	lsls	r1, r1, #21
 80010b4:	430a      	orrs	r2, r1
 80010b6:	61da      	str	r2, [r3, #28]
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <HAL_MspInit+0x44>)
 80010ba:	69da      	ldr	r2, [r3, #28]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	055b      	lsls	r3, r3, #21
 80010c0:	4013      	ands	r3, r2
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	40021000 	.word	0x40021000

080010d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler+0x4>

080010da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <HardFault_Handler+0x4>

080010e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010e4:	46c0      	nop			; (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010f8:	f000 fb1c 	bl	8001734 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8001106:	2001      	movs	r0, #1
 8001108:	f001 fb6e 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button2_Pin);
 8001116:	2020      	movs	r0, #32
 8001118:	f001 fb66 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800111c:	2380      	movs	r3, #128	; 0x80
 800111e:	019b      	lsls	r3, r3, #6
 8001120:	0018      	movs	r0, r3
 8001122:	f001 fb61 	bl	80027e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <DMA1_Ch1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Ch1_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch1_IRQn 0 */

  /* USER CODE END DMA1_Ch1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001130:	4b03      	ldr	r3, [pc, #12]	; (8001140 <DMA1_Ch1_IRQHandler+0x14>)
 8001132:	0018      	movs	r0, r3
 8001134:	f001 f8ba 	bl	80022ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch1_IRQn 1 */

  /* USER CODE END DMA1_Ch1_IRQn 1 */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	2000044c 	.word	0x2000044c

08001144 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 to 3 and DMA2 channel 1 to 2 interrupts.
  */
void DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x1c>)
 800114a:	0018      	movs	r0, r3
 800114c:	f001 f8ae 	bl	80022ac <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001150:	4b04      	ldr	r3, [pc, #16]	; (8001164 <DMA1_Ch2_3_DMA2_Ch1_2_IRQHandler+0x20>)
 8001152:	0018      	movs	r0, r3
 8001154:	f001 f8aa 	bl	80022ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */

  /* USER CODE END DMA1_Ch2_3_DMA2_Ch1_2_IRQn 1 */
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	20000260 	.word	0x20000260
 8001164:	200002a4 	.word	0x200002a4

08001168 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800116c:	4b05      	ldr	r3, [pc, #20]	; (8001184 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x1c>)
 800116e:	0018      	movs	r0, r3
 8001170:	f001 f89c 	bl	80022ac <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_adc);
 8001174:	4b04      	ldr	r3, [pc, #16]	; (8001188 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x20>)
 8001176:	0018      	movs	r0, r3
 8001178:	f001 f898 	bl	80022ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 800117c:	46c0      	nop			; (mov r8, r8)
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	20000490 	.word	0x20000490
 8001188:	200000d0 	.word	0x200000d0

0800118c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001190:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <TIM16_IRQHandler+0x14>)
 8001192:	0018      	movs	r0, r3
 8001194:	f003 f9b2 	bl	80044fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	46c0      	nop			; (mov r8, r8)
 80011a0:	2000037c 	.word	0x2000037c

080011a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b086      	sub	sp, #24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011ac:	4a14      	ldr	r2, [pc, #80]	; (8001200 <_sbrk+0x5c>)
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <_sbrk+0x60>)
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d102      	bne.n	80011c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <_sbrk+0x64>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <_sbrk+0x68>)
 80011c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <_sbrk+0x64>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	18d3      	adds	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d207      	bcs.n	80011e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011d4:	f004 fa14 	bl	8005600 <__errno>
 80011d8:	0003      	movs	r3, r0
 80011da:	220c      	movs	r2, #12
 80011dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011de:	2301      	movs	r3, #1
 80011e0:	425b      	negs	r3, r3
 80011e2:	e009      	b.n	80011f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011e4:	4b08      	ldr	r3, [pc, #32]	; (8001208 <_sbrk+0x64>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <_sbrk+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	18d2      	adds	r2, r2, r3
 80011f2:	4b05      	ldr	r3, [pc, #20]	; (8001208 <_sbrk+0x64>)
 80011f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011f6:	68fb      	ldr	r3, [r7, #12]
}
 80011f8:	0018      	movs	r0, r3
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b006      	add	sp, #24
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20008000 	.word	0x20008000
 8001204:	00000400 	.word	0x00000400
 8001208:	200002e8 	.word	0x200002e8
 800120c:	200004e8 	.word	0x200004e8

08001210 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001214:	46c0      	nop			; (mov r8, r8)
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
	...

0800121c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim16;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001222:	230c      	movs	r3, #12
 8001224:	18fb      	adds	r3, r7, r3
 8001226:	0018      	movs	r0, r3
 8001228:	2314      	movs	r3, #20
 800122a:	001a      	movs	r2, r3
 800122c:	2100      	movs	r1, #0
 800122e:	f004 fa11 	bl	8005654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	0018      	movs	r0, r3
 8001236:	2308      	movs	r3, #8
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f004 fa0a 	bl	8005654 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <MX_TIM2_Init+0xa8>)
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	05d2      	lsls	r2, r2, #23
 8001246:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001248:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <MX_TIM2_Init+0xa8>)
 800124a:	2200      	movs	r2, #0
 800124c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124e:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_TIM2_Init+0xa8>)
 8001250:	2200      	movs	r2, #0
 8001252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <MX_TIM2_Init+0xa8>)
 8001256:	2201      	movs	r2, #1
 8001258:	4252      	negs	r2, r2
 800125a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125c:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_TIM2_Init+0xa8>)
 800125e:	2200      	movs	r2, #0
 8001260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001262:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <MX_TIM2_Init+0xa8>)
 8001264:	2200      	movs	r2, #0
 8001266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_TIM2_Init+0xa8>)
 800126a:	0018      	movs	r0, r3
 800126c:	f003 f8a4 	bl	80043b8 <HAL_TIM_Base_Init>
 8001270:	1e03      	subs	r3, r0, #0
 8001272:	d001      	beq.n	8001278 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001274:	f7ff fdd8 	bl	8000e28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001278:	210c      	movs	r1, #12
 800127a:	187b      	adds	r3, r7, r1
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001280:	187b      	adds	r3, r7, r1
 8001282:	2210      	movs	r2, #16
 8001284:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001286:	187a      	adds	r2, r7, r1
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_TIM2_Init+0xa8>)
 800128a:	0011      	movs	r1, r2
 800128c:	0018      	movs	r0, r3
 800128e:	f003 fa4b 	bl	8004728 <HAL_TIM_SlaveConfigSynchro>
 8001292:	1e03      	subs	r3, r0, #0
 8001294:	d001      	beq.n	800129a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001296:	f7ff fdc7 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	2200      	movs	r2, #0
 80012a4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012a6:	1d3a      	adds	r2, r7, #4
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_TIM2_Init+0xa8>)
 80012aa:	0011      	movs	r1, r2
 80012ac:	0018      	movs	r0, r3
 80012ae:	f003 fc33 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 80012b2:	1e03      	subs	r3, r0, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80012b6:	f7ff fdb7 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ba:	46c0      	nop			; (mov r8, r8)
 80012bc:	46bd      	mov	sp, r7
 80012be:	b008      	add	sp, #32
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	200002ec 	.word	0x200002ec

080012c8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012ce:	230c      	movs	r3, #12
 80012d0:	18fb      	adds	r3, r7, r3
 80012d2:	0018      	movs	r0, r3
 80012d4:	2314      	movs	r3, #20
 80012d6:	001a      	movs	r2, r3
 80012d8:	2100      	movs	r1, #0
 80012da:	f004 f9bb 	bl	8005654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	1d3b      	adds	r3, r7, #4
 80012e0:	0018      	movs	r0, r3
 80012e2:	2308      	movs	r3, #8
 80012e4:	001a      	movs	r2, r3
 80012e6:	2100      	movs	r1, #0
 80012e8:	f004 f9b4 	bl	8005654 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <MX_TIM3_Init+0xa4>)
 80012ee:	4a20      	ldr	r2, [pc, #128]	; (8001370 <MX_TIM3_Init+0xa8>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <MX_TIM3_Init+0xa4>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_TIM3_Init+0xa4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_TIM3_Init+0xa4>)
 8001300:	4a1c      	ldr	r2, [pc, #112]	; (8001374 <MX_TIM3_Init+0xac>)
 8001302:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_TIM3_Init+0xa4>)
 8001306:	2200      	movs	r2, #0
 8001308:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_TIM3_Init+0xa4>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <MX_TIM3_Init+0xa4>)
 8001312:	0018      	movs	r0, r3
 8001314:	f003 f850 	bl	80043b8 <HAL_TIM_Base_Init>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800131c:	f7ff fd84 	bl	8000e28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001320:	210c      	movs	r1, #12
 8001322:	187b      	adds	r3, r7, r1
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001328:	187b      	adds	r3, r7, r1
 800132a:	2200      	movs	r2, #0
 800132c:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800132e:	187a      	adds	r2, r7, r1
 8001330:	4b0e      	ldr	r3, [pc, #56]	; (800136c <MX_TIM3_Init+0xa4>)
 8001332:	0011      	movs	r1, r2
 8001334:	0018      	movs	r0, r3
 8001336:	f003 f9f7 	bl	8004728 <HAL_TIM_SlaveConfigSynchro>
 800133a:	1e03      	subs	r3, r0, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800133e:	f7ff fd73 	bl	8000e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800134e:	1d3a      	adds	r2, r7, #4
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <MX_TIM3_Init+0xa4>)
 8001352:	0011      	movs	r1, r2
 8001354:	0018      	movs	r0, r3
 8001356:	f003 fbdf 	bl	8004b18 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	1e03      	subs	r3, r0, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800135e:	f7ff fd63 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	46bd      	mov	sp, r7
 8001366:	b008      	add	sp, #32
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	20000334 	.word	0x20000334
 8001370:	40000400 	.word	0x40000400
 8001374:	0000ffff 	.word	0x0000ffff

08001378 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_TIM16_Init+0x44>)
 800137e:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <MX_TIM16_Init+0x48>)
 8001380:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_TIM16_Init+0x44>)
 8001384:	222f      	movs	r2, #47	; 0x2f
 8001386:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_TIM16_Init+0x44>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4999;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_TIM16_Init+0x44>)
 8001390:	4a0c      	ldr	r2, [pc, #48]	; (80013c4 <MX_TIM16_Init+0x4c>)
 8001392:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_TIM16_Init+0x44>)
 8001396:	2200      	movs	r2, #0
 8001398:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_TIM16_Init+0x44>)
 800139c:	2200      	movs	r2, #0
 800139e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_TIM16_Init+0x44>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80013a6:	4b05      	ldr	r3, [pc, #20]	; (80013bc <MX_TIM16_Init+0x44>)
 80013a8:	0018      	movs	r0, r3
 80013aa:	f003 f805 	bl	80043b8 <HAL_TIM_Base_Init>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80013b2:	f7ff fd39 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000037c 	.word	0x2000037c
 80013c0:	40014400 	.word	0x40014400
 80013c4:	00001387 	.word	0x00001387

080013c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	05db      	lsls	r3, r3, #23
 80013d8:	429a      	cmp	r2, r3
 80013da:	d10c      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <HAL_TIM_Base_MspInit+0x90>)
 80013de:	69da      	ldr	r2, [r3, #28]
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_TIM_Base_MspInit+0x90>)
 80013e2:	2101      	movs	r1, #1
 80013e4:	430a      	orrs	r2, r1
 80013e6:	61da      	str	r2, [r3, #28]
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <HAL_TIM_Base_MspInit+0x90>)
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2201      	movs	r2, #1
 80013ee:	4013      	ands	r3, r2
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80013f4:	e02c      	b.n	8001450 <HAL_TIM_Base_MspInit+0x88>
  else if(tim_baseHandle->Instance==TIM3)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a18      	ldr	r2, [pc, #96]	; (800145c <HAL_TIM_Base_MspInit+0x94>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d10c      	bne.n	800141a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <HAL_TIM_Base_MspInit+0x90>)
 8001402:	69da      	ldr	r2, [r3, #28]
 8001404:	4b14      	ldr	r3, [pc, #80]	; (8001458 <HAL_TIM_Base_MspInit+0x90>)
 8001406:	2102      	movs	r1, #2
 8001408:	430a      	orrs	r2, r1
 800140a:	61da      	str	r2, [r3, #28]
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_TIM_Base_MspInit+0x90>)
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	2202      	movs	r2, #2
 8001412:	4013      	ands	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	693b      	ldr	r3, [r7, #16]
}
 8001418:	e01a      	b.n	8001450 <HAL_TIM_Base_MspInit+0x88>
  else if(tim_baseHandle->Instance==TIM16)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <HAL_TIM_Base_MspInit+0x98>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d115      	bne.n	8001450 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001424:	4b0c      	ldr	r3, [pc, #48]	; (8001458 <HAL_TIM_Base_MspInit+0x90>)
 8001426:	699a      	ldr	r2, [r3, #24]
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_TIM_Base_MspInit+0x90>)
 800142a:	2180      	movs	r1, #128	; 0x80
 800142c:	0289      	lsls	r1, r1, #10
 800142e:	430a      	orrs	r2, r1
 8001430:	619a      	str	r2, [r3, #24]
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <HAL_TIM_Base_MspInit+0x90>)
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	2380      	movs	r3, #128	; 0x80
 8001438:	029b      	lsls	r3, r3, #10
 800143a:	4013      	ands	r3, r2
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8001440:	2200      	movs	r2, #0
 8001442:	2100      	movs	r1, #0
 8001444:	2015      	movs	r0, #21
 8001446:	f000 fe51 	bl	80020ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 800144a:	2015      	movs	r0, #21
 800144c:	f000 fe63 	bl	8002116 <HAL_NVIC_EnableIRQ>
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	b006      	add	sp, #24
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	40000400 	.word	0x40000400
 8001460:	40014400 	.word	0x40014400

08001464 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_USART2_UART_Init+0x58>)
 800146a:	4a15      	ldr	r2, [pc, #84]	; (80014c0 <MX_USART2_UART_Init+0x5c>)
 800146c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001470:	22e1      	movs	r2, #225	; 0xe1
 8001472:	0252      	lsls	r2, r2, #9
 8001474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_USART2_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_USART2_UART_Init+0x58>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_USART2_UART_Init+0x58>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_USART2_UART_Init+0x58>)
 800149c:	2200      	movs	r2, #0
 800149e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_USART2_UART_Init+0x58>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <MX_USART2_UART_Init+0x58>)
 80014a8:	0018      	movs	r0, r3
 80014aa:	f003 fba3 	bl	8004bf4 <HAL_UART_Init>
 80014ae:	1e03      	subs	r3, r0, #0
 80014b0:	d001      	beq.n	80014b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014b2:	f7ff fcb9 	bl	8000e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200003c4 	.word	0x200003c4
 80014c0:	40004400 	.word	0x40004400

080014c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b08b      	sub	sp, #44	; 0x2c
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	2414      	movs	r4, #20
 80014ce:	193b      	adds	r3, r7, r4
 80014d0:	0018      	movs	r0, r3
 80014d2:	2314      	movs	r3, #20
 80014d4:	001a      	movs	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	f004 f8bc 	bl	8005654 <memset>
  if(uartHandle->Instance==USART2)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a53      	ldr	r2, [pc, #332]	; (8001630 <HAL_UART_MspInit+0x16c>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d000      	beq.n	80014e8 <HAL_UART_MspInit+0x24>
 80014e6:	e09f      	b.n	8001628 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014e8:	4b52      	ldr	r3, [pc, #328]	; (8001634 <HAL_UART_MspInit+0x170>)
 80014ea:	69da      	ldr	r2, [r3, #28]
 80014ec:	4b51      	ldr	r3, [pc, #324]	; (8001634 <HAL_UART_MspInit+0x170>)
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	0289      	lsls	r1, r1, #10
 80014f2:	430a      	orrs	r2, r1
 80014f4:	61da      	str	r2, [r3, #28]
 80014f6:	4b4f      	ldr	r3, [pc, #316]	; (8001634 <HAL_UART_MspInit+0x170>)
 80014f8:	69da      	ldr	r2, [r3, #28]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	029b      	lsls	r3, r3, #10
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	4b4b      	ldr	r3, [pc, #300]	; (8001634 <HAL_UART_MspInit+0x170>)
 8001506:	695a      	ldr	r2, [r3, #20]
 8001508:	4b4a      	ldr	r3, [pc, #296]	; (8001634 <HAL_UART_MspInit+0x170>)
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	0289      	lsls	r1, r1, #10
 800150e:	430a      	orrs	r2, r1
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	4b48      	ldr	r3, [pc, #288]	; (8001634 <HAL_UART_MspInit+0x170>)
 8001514:	695a      	ldr	r2, [r3, #20]
 8001516:	2380      	movs	r3, #128	; 0x80
 8001518:	029b      	lsls	r3, r3, #10
 800151a:	4013      	ands	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001520:	0021      	movs	r1, r4
 8001522:	187b      	adds	r3, r7, r1
 8001524:	220c      	movs	r2, #12
 8001526:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2202      	movs	r2, #2
 800152c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	187b      	adds	r3, r7, r1
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	187b      	adds	r3, r7, r1
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800153a:	187b      	adds	r3, r7, r1
 800153c:	2201      	movs	r2, #1
 800153e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	187a      	adds	r2, r7, r1
 8001542:	2390      	movs	r3, #144	; 0x90
 8001544:	05db      	lsls	r3, r3, #23
 8001546:	0011      	movs	r1, r2
 8001548:	0018      	movs	r0, r3
 800154a:	f000 ffb7 	bl	80024bc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800154e:	4b3a      	ldr	r3, [pc, #232]	; (8001638 <HAL_UART_MspInit+0x174>)
 8001550:	4a3a      	ldr	r2, [pc, #232]	; (800163c <HAL_UART_MspInit+0x178>)
 8001552:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001554:	4b38      	ldr	r3, [pc, #224]	; (8001638 <HAL_UART_MspInit+0x174>)
 8001556:	2200      	movs	r2, #0
 8001558:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800155a:	4b37      	ldr	r3, [pc, #220]	; (8001638 <HAL_UART_MspInit+0x174>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001560:	4b35      	ldr	r3, [pc, #212]	; (8001638 <HAL_UART_MspInit+0x174>)
 8001562:	2280      	movs	r2, #128	; 0x80
 8001564:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001566:	4b34      	ldr	r3, [pc, #208]	; (8001638 <HAL_UART_MspInit+0x174>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800156c:	4b32      	ldr	r3, [pc, #200]	; (8001638 <HAL_UART_MspInit+0x174>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001572:	4b31      	ldr	r3, [pc, #196]	; (8001638 <HAL_UART_MspInit+0x174>)
 8001574:	2220      	movs	r2, #32
 8001576:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001578:	4b2f      	ldr	r3, [pc, #188]	; (8001638 <HAL_UART_MspInit+0x174>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800157e:	4b2e      	ldr	r3, [pc, #184]	; (8001638 <HAL_UART_MspInit+0x174>)
 8001580:	0018      	movs	r0, r3
 8001582:	f000 fde5 	bl	8002150 <HAL_DMA_Init>
 8001586:	1e03      	subs	r3, r0, #0
 8001588:	d001      	beq.n	800158e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800158a:	f7ff fc4d 	bl	8000e28 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH1_USART2_RX);
 800158e:	4a2c      	ldr	r2, [pc, #176]	; (8001640 <HAL_UART_MspInit+0x17c>)
 8001590:	23a8      	movs	r3, #168	; 0xa8
 8001592:	58d3      	ldr	r3, [r2, r3]
 8001594:	492a      	ldr	r1, [pc, #168]	; (8001640 <HAL_UART_MspInit+0x17c>)
 8001596:	220f      	movs	r2, #15
 8001598:	4393      	bics	r3, r2
 800159a:	22a8      	movs	r2, #168	; 0xa8
 800159c:	508b      	str	r3, [r1, r2]
 800159e:	4a28      	ldr	r2, [pc, #160]	; (8001640 <HAL_UART_MspInit+0x17c>)
 80015a0:	23a8      	movs	r3, #168	; 0xa8
 80015a2:	58d3      	ldr	r3, [r2, r3]
 80015a4:	4926      	ldr	r1, [pc, #152]	; (8001640 <HAL_UART_MspInit+0x17c>)
 80015a6:	2209      	movs	r2, #9
 80015a8:	4313      	orrs	r3, r2
 80015aa:	22a8      	movs	r2, #168	; 0xa8
 80015ac:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a21      	ldr	r2, [pc, #132]	; (8001638 <HAL_UART_MspInit+0x174>)
 80015b2:	675a      	str	r2, [r3, #116]	; 0x74
 80015b4:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_UART_MspInit+0x174>)
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 80015ba:	4b22      	ldr	r3, [pc, #136]	; (8001644 <HAL_UART_MspInit+0x180>)
 80015bc:	4a22      	ldr	r2, [pc, #136]	; (8001648 <HAL_UART_MspInit+0x184>)
 80015be:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_UART_MspInit+0x180>)
 80015c2:	2210      	movs	r2, #16
 80015c4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_UART_MspInit+0x180>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015cc:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_UART_MspInit+0x180>)
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HAL_UART_MspInit+0x180>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d8:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HAL_UART_MspInit+0x180>)
 80015da:	2200      	movs	r2, #0
 80015dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_UART_MspInit+0x180>)
 80015e0:	2220      	movs	r2, #32
 80015e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e4:	4b17      	ldr	r3, [pc, #92]	; (8001644 <HAL_UART_MspInit+0x180>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_UART_MspInit+0x180>)
 80015ec:	0018      	movs	r0, r3
 80015ee:	f000 fdaf 	bl	8002150 <HAL_DMA_Init>
 80015f2:	1e03      	subs	r3, r0, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0x136>
    {
      Error_Handler();
 80015f6:	f7ff fc17 	bl	8000e28 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_USART2_TX);
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <HAL_UART_MspInit+0x17c>)
 80015fc:	23a8      	movs	r3, #168	; 0xa8
 80015fe:	58d3      	ldr	r3, [r2, r3]
 8001600:	490f      	ldr	r1, [pc, #60]	; (8001640 <HAL_UART_MspInit+0x17c>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <HAL_UART_MspInit+0x188>)
 8001604:	4013      	ands	r3, r2
 8001606:	22a8      	movs	r2, #168	; 0xa8
 8001608:	508b      	str	r3, [r1, r2]
 800160a:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <HAL_UART_MspInit+0x17c>)
 800160c:	23a8      	movs	r3, #168	; 0xa8
 800160e:	58d3      	ldr	r3, [r2, r3]
 8001610:	490b      	ldr	r1, [pc, #44]	; (8001640 <HAL_UART_MspInit+0x17c>)
 8001612:	2290      	movs	r2, #144	; 0x90
 8001614:	0212      	lsls	r2, r2, #8
 8001616:	4313      	orrs	r3, r2
 8001618:	22a8      	movs	r2, #168	; 0xa8
 800161a:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_UART_MspInit+0x180>)
 8001620:	671a      	str	r2, [r3, #112]	; 0x70
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_UART_MspInit+0x180>)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001628:	46c0      	nop			; (mov r8, r8)
 800162a:	46bd      	mov	sp, r7
 800162c:	b00b      	add	sp, #44	; 0x2c
 800162e:	bd90      	pop	{r4, r7, pc}
 8001630:	40004400 	.word	0x40004400
 8001634:	40021000 	.word	0x40021000
 8001638:	2000044c 	.word	0x2000044c
 800163c:	40020008 	.word	0x40020008
 8001640:	40020000 	.word	0x40020000
 8001644:	20000490 	.word	0x20000490
 8001648:	40020044 	.word	0x40020044
 800164c:	ffff0fff 	.word	0xffff0fff

08001650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001650:	480d      	ldr	r0, [pc, #52]	; (8001688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001652:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001654:	f7ff fddc 	bl	8001210 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480c      	ldr	r0, [pc, #48]	; (800168c <LoopForever+0x6>)
  ldr r1, =_edata
 800165a:	490d      	ldr	r1, [pc, #52]	; (8001690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800165c:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <LoopForever+0xe>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a0a      	ldr	r2, [pc, #40]	; (8001698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001670:	4c0a      	ldr	r4, [pc, #40]	; (800169c <LoopForever+0x16>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800167e:	f003 ffc5 	bl	800560c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001682:	f7ff f88d 	bl	80007a0 <main>

08001686 <LoopForever>:

LoopForever:
    b LoopForever
 8001686:	e7fe      	b.n	8001686 <LoopForever>
  ldr   r0, =_estack
 8001688:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800168c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001690:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001694:	08005ff4 	.word	0x08005ff4
  ldr r2, =_sbss
 8001698:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800169c:	200004e8 	.word	0x200004e8

080016a0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016a0:	e7fe      	b.n	80016a0 <ADC1_COMP_IRQHandler>
	...

080016a4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <HAL_Init+0x24>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_Init+0x24>)
 80016ae:	2110      	movs	r1, #16
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 f809 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ba:	f7ff fce7 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d4:	4b14      	ldr	r3, [pc, #80]	; (8001728 <HAL_InitTick+0x5c>)
 80016d6:	681c      	ldr	r4, [r3, #0]
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <HAL_InitTick+0x60>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	0019      	movs	r1, r3
 80016de:	23fa      	movs	r3, #250	; 0xfa
 80016e0:	0098      	lsls	r0, r3, #2
 80016e2:	f7fe fd19 	bl	8000118 <__udivsi3>
 80016e6:	0003      	movs	r3, r0
 80016e8:	0019      	movs	r1, r3
 80016ea:	0020      	movs	r0, r4
 80016ec:	f7fe fd14 	bl	8000118 <__udivsi3>
 80016f0:	0003      	movs	r3, r0
 80016f2:	0018      	movs	r0, r3
 80016f4:	f000 fd1f 	bl	8002136 <HAL_SYSTICK_Config>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d001      	beq.n	8001700 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e00f      	b.n	8001720 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b03      	cmp	r3, #3
 8001704:	d80b      	bhi.n	800171e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	2301      	movs	r3, #1
 800170a:	425b      	negs	r3, r3
 800170c:	2200      	movs	r2, #0
 800170e:	0018      	movs	r0, r3
 8001710:	f000 fcec 	bl	80020ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_InitTick+0x64>)
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800171a:	2300      	movs	r3, #0
 800171c:	e000      	b.n	8001720 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
}
 8001720:	0018      	movs	r0, r3
 8001722:	46bd      	mov	sp, r7
 8001724:	b003      	add	sp, #12
 8001726:	bd90      	pop	{r4, r7, pc}
 8001728:	20000004 	.word	0x20000004
 800172c:	2000000c 	.word	0x2000000c
 8001730:	20000008 	.word	0x20000008

08001734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001738:	4b05      	ldr	r3, [pc, #20]	; (8001750 <HAL_IncTick+0x1c>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	001a      	movs	r2, r3
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_IncTick+0x20>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	18d2      	adds	r2, r2, r3
 8001744:	4b03      	ldr	r3, [pc, #12]	; (8001754 <HAL_IncTick+0x20>)
 8001746:	601a      	str	r2, [r3, #0]
}
 8001748:	46c0      	nop			; (mov r8, r8)
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	2000000c 	.word	0x2000000c
 8001754:	200004d4 	.word	0x200004d4

08001758 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b02      	ldr	r3, [pc, #8]	; (8001768 <HAL_GetTick+0x10>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	0018      	movs	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	200004d4 	.word	0x200004d4

0800176c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fff0 	bl	8001758 <HAL_GetTick>
 8001778:	0003      	movs	r3, r0
 800177a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	3301      	adds	r3, #1
 8001784:	d005      	beq.n	8001792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <HAL_Delay+0x44>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	001a      	movs	r2, r3
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	189b      	adds	r3, r3, r2
 8001790:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	f7ff ffe0 	bl	8001758 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d8f7      	bhi.n	8001794 <HAL_Delay+0x28>
  {
  }
}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b004      	add	sp, #16
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	2000000c 	.word	0x2000000c

080017b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017bc:	230f      	movs	r3, #15
 80017be:	18fb      	adds	r3, r7, r3
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e125      	b.n	8001a1e <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10a      	bne.n	80017f0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2234      	movs	r2, #52	; 0x34
 80017e4:	2100      	movs	r1, #0
 80017e6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7fe fe64 	bl	80004b8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f4:	2210      	movs	r2, #16
 80017f6:	4013      	ands	r3, r2
 80017f8:	d000      	beq.n	80017fc <HAL_ADC_Init+0x48>
 80017fa:	e103      	b.n	8001a04 <HAL_ADC_Init+0x250>
 80017fc:	230f      	movs	r3, #15
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d000      	beq.n	8001808 <HAL_ADC_Init+0x54>
 8001806:	e0fd      	b.n	8001a04 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2204      	movs	r2, #4
 8001810:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001812:	d000      	beq.n	8001816 <HAL_ADC_Init+0x62>
 8001814:	e0f6      	b.n	8001a04 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	4a83      	ldr	r2, [pc, #524]	; (8001a28 <HAL_ADC_Init+0x274>)
 800181c:	4013      	ands	r3, r2
 800181e:	2202      	movs	r2, #2
 8001820:	431a      	orrs	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	2203      	movs	r2, #3
 800182e:	4013      	ands	r3, r2
 8001830:	2b01      	cmp	r3, #1
 8001832:	d112      	bne.n	800185a <HAL_ADC_Init+0xa6>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	2b01      	cmp	r3, #1
 8001840:	d009      	beq.n	8001856 <HAL_ADC_Init+0xa2>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68da      	ldr	r2, [r3, #12]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	401a      	ands	r2, r3
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	429a      	cmp	r2, r3
 8001854:	d101      	bne.n	800185a <HAL_ADC_Init+0xa6>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_ADC_Init+0xa8>
 800185a:	2300      	movs	r3, #0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d116      	bne.n	800188e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	2218      	movs	r2, #24
 8001868:	4393      	bics	r3, r2
 800186a:	0019      	movs	r1, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	0899      	lsrs	r1, r3, #2
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	430a      	orrs	r2, r1
 800188c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68da      	ldr	r2, [r3, #12]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4964      	ldr	r1, [pc, #400]	; (8001a2c <HAL_ADC_Init+0x278>)
 800189a:	400a      	ands	r2, r1
 800189c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	7e1b      	ldrb	r3, [r3, #24]
 80018a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7e5b      	ldrb	r3, [r3, #25]
 80018a8:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e9b      	ldrb	r3, [r3, #26]
 80018b0:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80018b2:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d002      	beq.n	80018c2 <HAL_ADC_Init+0x10e>
 80018bc:	2380      	movs	r3, #128	; 0x80
 80018be:	015b      	lsls	r3, r3, #5
 80018c0:	e000      	b.n	80018c4 <HAL_ADC_Init+0x110>
 80018c2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80018c4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80018ca:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d101      	bne.n	80018d8 <HAL_ADC_Init+0x124>
 80018d4:	2304      	movs	r3, #4
 80018d6:	e000      	b.n	80018da <HAL_ADC_Init+0x126>
 80018d8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80018da:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2124      	movs	r1, #36	; 0x24
 80018e0:	5c5b      	ldrb	r3, [r3, r1]
 80018e2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80018e4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	7edb      	ldrb	r3, [r3, #27]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d115      	bne.n	8001920 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7e9b      	ldrb	r3, [r3, #26]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d105      	bne.n	8001908 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	0252      	lsls	r2, r2, #9
 8001902:	4313      	orrs	r3, r2
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	e00b      	b.n	8001920 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190c:	2220      	movs	r2, #32
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001918:	2201      	movs	r2, #1
 800191a:	431a      	orrs	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69da      	ldr	r2, [r3, #28]
 8001924:	23c2      	movs	r3, #194	; 0xc2
 8001926:	33ff      	adds	r3, #255	; 0xff
 8001928:	429a      	cmp	r2, r3
 800192a:	d007      	beq.n	800193c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001934:	4313      	orrs	r3, r2
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4313      	orrs	r3, r2
 800193a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68d9      	ldr	r1, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	430a      	orrs	r2, r1
 800194a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	055b      	lsls	r3, r3, #21
 8001954:	429a      	cmp	r2, r3
 8001956:	d01b      	beq.n	8001990 <HAL_ADC_Init+0x1dc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	2b01      	cmp	r3, #1
 800195e:	d017      	beq.n	8001990 <HAL_ADC_Init+0x1dc>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001964:	2b02      	cmp	r3, #2
 8001966:	d013      	beq.n	8001990 <HAL_ADC_Init+0x1dc>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196c:	2b03      	cmp	r3, #3
 800196e:	d00f      	beq.n	8001990 <HAL_ADC_Init+0x1dc>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001974:	2b04      	cmp	r3, #4
 8001976:	d00b      	beq.n	8001990 <HAL_ADC_Init+0x1dc>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	2b05      	cmp	r3, #5
 800197e:	d007      	beq.n	8001990 <HAL_ADC_Init+0x1dc>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	2b06      	cmp	r3, #6
 8001986:	d003      	beq.n	8001990 <HAL_ADC_Init+0x1dc>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	2b07      	cmp	r3, #7
 800198e:	d112      	bne.n	80019b6 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2107      	movs	r1, #7
 800199c:	438a      	bics	r2, r1
 800199e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6959      	ldr	r1, [r3, #20]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	2207      	movs	r2, #7
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_ADC_Init+0x27c>)
 80019be:	4013      	ands	r3, r2
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d10b      	bne.n	80019de <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d0:	2203      	movs	r2, #3
 80019d2:	4393      	bics	r3, r2
 80019d4:	2201      	movs	r2, #1
 80019d6:	431a      	orrs	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80019dc:	e01c      	b.n	8001a18 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e2:	2212      	movs	r2, #18
 80019e4:	4393      	bics	r3, r2
 80019e6:	2210      	movs	r2, #16
 80019e8:	431a      	orrs	r2, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019f2:	2201      	movs	r2, #1
 80019f4:	431a      	orrs	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80019fa:	230f      	movs	r3, #15
 80019fc:	18fb      	adds	r3, r7, r3
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a02:	e009      	b.n	8001a18 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a08:	2210      	movs	r2, #16
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001a10:	230f      	movs	r3, #15
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001a18:	230f      	movs	r3, #15
 8001a1a:	18fb      	adds	r3, r7, r3
 8001a1c:	781b      	ldrb	r3, [r3, #0]
}
 8001a1e:	0018      	movs	r0, r3
 8001a20:	46bd      	mov	sp, r7
 8001a22:	b004      	add	sp, #16
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			; (mov r8, r8)
 8001a28:	fffffefd 	.word	0xfffffefd
 8001a2c:	fffe0219 	.word	0xfffe0219
 8001a30:	833fffe7 	.word	0x833fffe7

08001a34 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a34:	b590      	push	{r4, r7, lr}
 8001a36:	b087      	sub	sp, #28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a40:	2317      	movs	r3, #23
 8001a42:	18fb      	adds	r3, r7, r3
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	4013      	ands	r3, r2
 8001a52:	d15e      	bne.n	8001b12 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2234      	movs	r2, #52	; 0x34
 8001a58:	5c9b      	ldrb	r3, [r3, r2]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_Start_DMA+0x2e>
 8001a5e:	2302      	movs	r3, #2
 8001a60:	e05e      	b.n	8001b20 <HAL_ADC_Start_DMA+0xec>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2234      	movs	r2, #52	; 0x34
 8001a66:	2101      	movs	r1, #1
 8001a68:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	7e5b      	ldrb	r3, [r3, #25]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d007      	beq.n	8001a82 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001a72:	2317      	movs	r3, #23
 8001a74:	18fc      	adds	r4, r7, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	0018      	movs	r0, r3
 8001a7a:	f000 f983 	bl	8001d84 <ADC_Enable>
 8001a7e:	0003      	movs	r3, r0
 8001a80:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a82:	2317      	movs	r3, #23
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d146      	bne.n	8001b1a <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a90:	4a25      	ldr	r2, [pc, #148]	; (8001b28 <HAL_ADC_Start_DMA+0xf4>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	2280      	movs	r2, #128	; 0x80
 8001a96:	0052      	lsls	r2, r2, #1
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2234      	movs	r2, #52	; 0x34
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab0:	4a1e      	ldr	r2, [pc, #120]	; (8001b2c <HAL_ADC_Start_DMA+0xf8>)
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab8:	4a1d      	ldr	r2, [pc, #116]	; (8001b30 <HAL_ADC_Start_DMA+0xfc>)
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4a1c      	ldr	r2, [pc, #112]	; (8001b34 <HAL_ADC_Start_DMA+0x100>)
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	221c      	movs	r2, #28
 8001aca:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685a      	ldr	r2, [r3, #4]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2110      	movs	r1, #16
 8001ad8:	430a      	orrs	r2, r1
 8001ada:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68da      	ldr	r2, [r3, #12]
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	3340      	adds	r3, #64	; 0x40
 8001af6:	0019      	movs	r1, r3
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f000 fb70 	bl	80021e0 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2104      	movs	r1, #4
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	e003      	b.n	8001b1a <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b12:	2317      	movs	r3, #23
 8001b14:	18fb      	adds	r3, r7, r3
 8001b16:	2202      	movs	r2, #2
 8001b18:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b1a:	2317      	movs	r3, #23
 8001b1c:	18fb      	adds	r3, r7, r3
 8001b1e:	781b      	ldrb	r3, [r3, #0]
}
 8001b20:	0018      	movs	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	b007      	add	sp, #28
 8001b26:	bd90      	pop	{r4, r7, pc}
 8001b28:	fffff0fe 	.word	0xfffff0fe
 8001b2c:	08001e8d 	.word	0x08001e8d
 8001b30:	08001f41 	.word	0x08001f41
 8001b34:	08001f5f 	.word	0x08001f5f

08001b38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b40:	46c0      	nop			; (mov r8, r8)
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b002      	add	sp, #8
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}

08001b58 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b60:	46c0      	nop			; (mov r8, r8)
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b72:	230f      	movs	r3, #15
 8001b74:	18fb      	adds	r3, r7, r3
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	055b      	lsls	r3, r3, #21
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d011      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x46>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d00d      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x46>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d009      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x46>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d005      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x46>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d001      	beq.n	8001bae <HAL_ADC_ConfigChannel+0x46>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2234      	movs	r2, #52	; 0x34
 8001bb2:	5c9b      	ldrb	r3, [r3, r2]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_ADC_ConfigChannel+0x54>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e0d0      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x1f6>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2234      	movs	r2, #52	; 0x34
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d000      	beq.n	8001bd2 <HAL_ADC_ConfigChannel+0x6a>
 8001bd0:	e0b4      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a64      	ldr	r2, [pc, #400]	; (8001d68 <HAL_ADC_ConfigChannel+0x200>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d100      	bne.n	8001bde <HAL_ADC_ConfigChannel+0x76>
 8001bdc:	e082      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	409a      	lsls	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf8:	2380      	movs	r3, #128	; 0x80
 8001bfa:	055b      	lsls	r3, r3, #21
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d037      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x108>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d033      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x108>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d02f      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x108>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	2b03      	cmp	r3, #3
 8001c16:	d02b      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x108>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d027      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x108>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	2b05      	cmp	r3, #5
 8001c26:	d023      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x108>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2c:	2b06      	cmp	r3, #6
 8001c2e:	d01f      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x108>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	2b07      	cmp	r3, #7
 8001c36:	d01b      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	2107      	movs	r1, #7
 8001c44:	400b      	ands	r3, r1
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d012      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695a      	ldr	r2, [r3, #20]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2107      	movs	r1, #7
 8001c56:	438a      	bics	r2, r1
 8001c58:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6959      	ldr	r1, [r3, #20]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2207      	movs	r2, #7
 8001c66:	401a      	ands	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b10      	cmp	r3, #16
 8001c76:	d007      	beq.n	8001c88 <HAL_ADC_ConfigChannel+0x120>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2b11      	cmp	r3, #17
 8001c7e:	d003      	beq.n	8001c88 <HAL_ADC_ConfigChannel+0x120>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2b12      	cmp	r3, #18
 8001c86:	d163      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <HAL_ADC_ConfigChannel+0x204>)
 8001c8a:	6819      	ldr	r1, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b10      	cmp	r3, #16
 8001c92:	d009      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0x140>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2b11      	cmp	r3, #17
 8001c9a:	d102      	bne.n	8001ca2 <HAL_ADC_ConfigChannel+0x13a>
 8001c9c:	2380      	movs	r3, #128	; 0x80
 8001c9e:	03db      	lsls	r3, r3, #15
 8001ca0:	e004      	b.n	8001cac <HAL_ADC_ConfigChannel+0x144>
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	045b      	lsls	r3, r3, #17
 8001ca6:	e001      	b.n	8001cac <HAL_ADC_ConfigChannel+0x144>
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	041b      	lsls	r3, r3, #16
 8001cac:	4a2f      	ldr	r2, [pc, #188]	; (8001d6c <HAL_ADC_ConfigChannel+0x204>)
 8001cae:	430b      	orrs	r3, r1
 8001cb0:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b10      	cmp	r3, #16
 8001cb8:	d14a      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cba:	4b2d      	ldr	r3, [pc, #180]	; (8001d70 <HAL_ADC_ConfigChannel+0x208>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	492d      	ldr	r1, [pc, #180]	; (8001d74 <HAL_ADC_ConfigChannel+0x20c>)
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	f7fe fa29 	bl	8000118 <__udivsi3>
 8001cc6:	0003      	movs	r3, r0
 8001cc8:	001a      	movs	r2, r3
 8001cca:	0013      	movs	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	189b      	adds	r3, r3, r2
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cd4:	e002      	b.n	8001cdc <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f9      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x16e>
 8001ce2:	e035      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2101      	movs	r1, #1
 8001cf0:	4099      	lsls	r1, r3
 8001cf2:	000b      	movs	r3, r1
 8001cf4:	43d9      	mvns	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b10      	cmp	r3, #16
 8001d04:	d007      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x1ae>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b11      	cmp	r3, #17
 8001d0c:	d003      	beq.n	8001d16 <HAL_ADC_ConfigChannel+0x1ae>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2b12      	cmp	r3, #18
 8001d14:	d11c      	bne.n	8001d50 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_ADC_ConfigChannel+0x204>)
 8001d18:	6819      	ldr	r1, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b10      	cmp	r3, #16
 8001d20:	d007      	beq.n	8001d32 <HAL_ADC_ConfigChannel+0x1ca>
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b11      	cmp	r3, #17
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_ConfigChannel+0x1c6>
 8001d2a:	4b13      	ldr	r3, [pc, #76]	; (8001d78 <HAL_ADC_ConfigChannel+0x210>)
 8001d2c:	e002      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x1cc>
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_ADC_ConfigChannel+0x214>)
 8001d30:	e000      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x1cc>
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_ADC_ConfigChannel+0x218>)
 8001d34:	4a0d      	ldr	r2, [pc, #52]	; (8001d6c <HAL_ADC_ConfigChannel+0x204>)
 8001d36:	400b      	ands	r3, r1
 8001d38:	6013      	str	r3, [r2, #0]
 8001d3a:	e009      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d40:	2220      	movs	r2, #32
 8001d42:	431a      	orrs	r2, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001d48:	230f      	movs	r3, #15
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2234      	movs	r2, #52	; 0x34
 8001d54:	2100      	movs	r1, #0
 8001d56:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001d58:	230f      	movs	r3, #15
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	781b      	ldrb	r3, [r3, #0]
}
 8001d5e:	0018      	movs	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	b004      	add	sp, #16
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	46c0      	nop			; (mov r8, r8)
 8001d68:	00001001 	.word	0x00001001
 8001d6c:	40012708 	.word	0x40012708
 8001d70:	20000004 	.word	0x20000004
 8001d74:	000f4240 	.word	0x000f4240
 8001d78:	ffbfffff 	.word	0xffbfffff
 8001d7c:	feffffff 	.word	0xfeffffff
 8001d80:	ff7fffff 	.word	0xff7fffff

08001d84 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2203      	movs	r2, #3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d112      	bne.n	8001dc8 <ADC_Enable+0x44>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d009      	beq.n	8001dc4 <ADC_Enable+0x40>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	2380      	movs	r3, #128	; 0x80
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	401a      	ands	r2, r3
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	021b      	lsls	r3, r3, #8
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d101      	bne.n	8001dc8 <ADC_Enable+0x44>
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <ADC_Enable+0x46>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d152      	bne.n	8001e74 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <ADC_Enable+0xfc>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d00d      	beq.n	8001df6 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	2210      	movs	r2, #16
 8001de0:	431a      	orrs	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dea:	2201      	movs	r2, #1
 8001dec:	431a      	orrs	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e03f      	b.n	8001e76 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e06:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <ADC_Enable+0x100>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	491f      	ldr	r1, [pc, #124]	; (8001e88 <ADC_Enable+0x104>)
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7fe f983 	bl	8000118 <__udivsi3>
 8001e12:	0003      	movs	r3, r0
 8001e14:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e16:	e002      	b.n	8001e1e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001e18:	68bb      	ldr	r3, [r7, #8]
 8001e1a:	3b01      	subs	r3, #1
 8001e1c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f9      	bne.n	8001e18 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001e24:	f7ff fc98 	bl	8001758 <HAL_GetTick>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e2c:	e01b      	b.n	8001e66 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e2e:	f7ff fc93 	bl	8001758 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d914      	bls.n	8001e66 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2201      	movs	r2, #1
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d00d      	beq.n	8001e66 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4e:	2210      	movs	r2, #16
 8001e50:	431a      	orrs	r2, r3
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e007      	b.n	8001e76 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d1dc      	bne.n	8001e2e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b004      	add	sp, #16
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	80000017 	.word	0x80000017
 8001e84:	20000004 	.word	0x20000004
 8001e88:	000f4240 	.word	0x000f4240

08001e8c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	2250      	movs	r2, #80	; 0x50
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d140      	bne.n	8001f26 <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea8:	2280      	movs	r2, #128	; 0x80
 8001eaa:	0092      	lsls	r2, r2, #2
 8001eac:	431a      	orrs	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	23c0      	movs	r3, #192	; 0xc0
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d12d      	bne.n	8001f1c <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d129      	bne.n	8001f1c <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2208      	movs	r2, #8
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b08      	cmp	r3, #8
 8001ed4:	d122      	bne.n	8001f1c <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2204      	movs	r2, #4
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d110      	bne.n	8001f04 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	210c      	movs	r1, #12
 8001eee:	438a      	bics	r2, r1
 8001ef0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef6:	4a11      	ldr	r2, [pc, #68]	; (8001f3c <ADC_DMAConvCplt+0xb0>)
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2201      	movs	r2, #1
 8001efc:	431a      	orrs	r2, r3
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38
 8001f02:	e00b      	b.n	8001f1c <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f08:	2220      	movs	r2, #32
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f14:	2201      	movs	r2, #1
 8001f16:	431a      	orrs	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7ff fe0a 	bl	8001b38 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001f24:	e005      	b.n	8001f32 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	0010      	movs	r0, r2
 8001f30:	4798      	blx	r3
}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b004      	add	sp, #16
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	fffffefe 	.word	0xfffffefe

08001f40 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	0018      	movs	r0, r3
 8001f52:	f7ff fdf9 	bl	8001b48 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	b004      	add	sp, #16
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b084      	sub	sp, #16
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f70:	2240      	movs	r2, #64	; 0x40
 8001f72:	431a      	orrs	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	431a      	orrs	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	0018      	movs	r0, r3
 8001f88:	f7ff fde6 	bl	8001b58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b004      	add	sp, #16
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	0002      	movs	r2, r0
 8001f9c:	1dfb      	adds	r3, r7, #7
 8001f9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b7f      	cmp	r3, #127	; 0x7f
 8001fa6:	d809      	bhi.n	8001fbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fa8:	1dfb      	adds	r3, r7, #7
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	001a      	movs	r2, r3
 8001fae:	231f      	movs	r3, #31
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	4b04      	ldr	r3, [pc, #16]	; (8001fc4 <__NVIC_EnableIRQ+0x30>)
 8001fb4:	2101      	movs	r1, #1
 8001fb6:	4091      	lsls	r1, r2
 8001fb8:	000a      	movs	r2, r1
 8001fba:	601a      	str	r2, [r3, #0]
  }
}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b002      	add	sp, #8
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	0002      	movs	r2, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	1dfb      	adds	r3, r7, #7
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	2b7f      	cmp	r3, #127	; 0x7f
 8001fdc:	d828      	bhi.n	8002030 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fde:	4a2f      	ldr	r2, [pc, #188]	; (800209c <__NVIC_SetPriority+0xd4>)
 8001fe0:	1dfb      	adds	r3, r7, #7
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	33c0      	adds	r3, #192	; 0xc0
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	589b      	ldr	r3, [r3, r2]
 8001fee:	1dfa      	adds	r2, r7, #7
 8001ff0:	7812      	ldrb	r2, [r2, #0]
 8001ff2:	0011      	movs	r1, r2
 8001ff4:	2203      	movs	r2, #3
 8001ff6:	400a      	ands	r2, r1
 8001ff8:	00d2      	lsls	r2, r2, #3
 8001ffa:	21ff      	movs	r1, #255	; 0xff
 8001ffc:	4091      	lsls	r1, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	43d2      	mvns	r2, r2
 8002002:	401a      	ands	r2, r3
 8002004:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	019b      	lsls	r3, r3, #6
 800200a:	22ff      	movs	r2, #255	; 0xff
 800200c:	401a      	ands	r2, r3
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	0018      	movs	r0, r3
 8002014:	2303      	movs	r3, #3
 8002016:	4003      	ands	r3, r0
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800201c:	481f      	ldr	r0, [pc, #124]	; (800209c <__NVIC_SetPriority+0xd4>)
 800201e:	1dfb      	adds	r3, r7, #7
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	b25b      	sxtb	r3, r3
 8002024:	089b      	lsrs	r3, r3, #2
 8002026:	430a      	orrs	r2, r1
 8002028:	33c0      	adds	r3, #192	; 0xc0
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800202e:	e031      	b.n	8002094 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002030:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <__NVIC_SetPriority+0xd8>)
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	0019      	movs	r1, r3
 8002038:	230f      	movs	r3, #15
 800203a:	400b      	ands	r3, r1
 800203c:	3b08      	subs	r3, #8
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3306      	adds	r3, #6
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	18d3      	adds	r3, r2, r3
 8002046:	3304      	adds	r3, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	1dfa      	adds	r2, r7, #7
 800204c:	7812      	ldrb	r2, [r2, #0]
 800204e:	0011      	movs	r1, r2
 8002050:	2203      	movs	r2, #3
 8002052:	400a      	ands	r2, r1
 8002054:	00d2      	lsls	r2, r2, #3
 8002056:	21ff      	movs	r1, #255	; 0xff
 8002058:	4091      	lsls	r1, r2
 800205a:	000a      	movs	r2, r1
 800205c:	43d2      	mvns	r2, r2
 800205e:	401a      	ands	r2, r3
 8002060:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	019b      	lsls	r3, r3, #6
 8002066:	22ff      	movs	r2, #255	; 0xff
 8002068:	401a      	ands	r2, r3
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	0018      	movs	r0, r3
 8002070:	2303      	movs	r3, #3
 8002072:	4003      	ands	r3, r0
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002078:	4809      	ldr	r0, [pc, #36]	; (80020a0 <__NVIC_SetPriority+0xd8>)
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	001c      	movs	r4, r3
 8002080:	230f      	movs	r3, #15
 8002082:	4023      	ands	r3, r4
 8002084:	3b08      	subs	r3, #8
 8002086:	089b      	lsrs	r3, r3, #2
 8002088:	430a      	orrs	r2, r1
 800208a:	3306      	adds	r3, #6
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	18c3      	adds	r3, r0, r3
 8002090:	3304      	adds	r3, #4
 8002092:	601a      	str	r2, [r3, #0]
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b003      	add	sp, #12
 800209a:	bd90      	pop	{r4, r7, pc}
 800209c:	e000e100 	.word	0xe000e100
 80020a0:	e000ed00 	.word	0xe000ed00

080020a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	1e5a      	subs	r2, r3, #1
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	045b      	lsls	r3, r3, #17
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d301      	bcc.n	80020bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020b8:	2301      	movs	r3, #1
 80020ba:	e010      	b.n	80020de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <SysTick_Config+0x44>)
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	3a01      	subs	r2, #1
 80020c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c4:	2301      	movs	r3, #1
 80020c6:	425b      	negs	r3, r3
 80020c8:	2103      	movs	r1, #3
 80020ca:	0018      	movs	r0, r3
 80020cc:	f7ff ff7c 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Config+0x44>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <SysTick_Config+0x44>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b002      	add	sp, #8
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			; (mov r8, r8)
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	210f      	movs	r1, #15
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	1c02      	adds	r2, r0, #0
 80020fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	187b      	adds	r3, r7, r1
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b25b      	sxtb	r3, r3
 8002106:	0011      	movs	r1, r2
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff ff5d 	bl	8001fc8 <__NVIC_SetPriority>
}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	b004      	add	sp, #16
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b082      	sub	sp, #8
 800211a:	af00      	add	r7, sp, #0
 800211c:	0002      	movs	r2, r0
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002122:	1dfb      	adds	r3, r7, #7
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	b25b      	sxtb	r3, r3
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff33 	bl	8001f94 <__NVIC_EnableIRQ>
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b002      	add	sp, #8
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff ffaf 	bl	80020a4 <SysTick_Config>
 8002146:	0003      	movs	r3, r0
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	b002      	add	sp, #8
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e036      	b.n	80021d4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2221      	movs	r2, #33	; 0x21
 800216a:	2102      	movs	r1, #2
 800216c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4a18      	ldr	r2, [pc, #96]	; (80021dc <HAL_DMA_Init+0x8c>)
 800217a:	4013      	ands	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002186:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800219e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 f946 	bl	8002448 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2221      	movs	r2, #33	; 0x21
 80021c6:	2101      	movs	r1, #1
 80021c8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	2100      	movs	r1, #0
 80021d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	0018      	movs	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	b004      	add	sp, #16
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	ffffc00f 	.word	0xffffc00f

080021e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
 80021ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ee:	2317      	movs	r3, #23
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	2200      	movs	r2, #0
 80021f4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	5c9b      	ldrb	r3, [r3, r2]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d101      	bne.n	8002204 <HAL_DMA_Start_IT+0x24>
 8002200:	2302      	movs	r3, #2
 8002202:	e04f      	b.n	80022a4 <HAL_DMA_Start_IT+0xc4>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2220      	movs	r2, #32
 8002208:	2101      	movs	r1, #1
 800220a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2221      	movs	r2, #33	; 0x21
 8002210:	5c9b      	ldrb	r3, [r3, r2]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b01      	cmp	r3, #1
 8002216:	d13a      	bne.n	800228e <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2221      	movs	r2, #33	; 0x21
 800221c:	2102      	movs	r1, #2
 800221e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2101      	movs	r1, #1
 8002232:	438a      	bics	r2, r1
 8002234:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	68b9      	ldr	r1, [r7, #8]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f8d7 	bl	80023f0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	210e      	movs	r1, #14
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e00f      	b.n	800227c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	210a      	movs	r1, #10
 8002268:	430a      	orrs	r2, r1
 800226a:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2104      	movs	r1, #4
 8002278:	438a      	bics	r2, r1
 800227a:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2101      	movs	r1, #1
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	e007      	b.n	800229e <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2220      	movs	r2, #32
 8002292:	2100      	movs	r1, #0
 8002294:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002296:	2317      	movs	r3, #23
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	2202      	movs	r2, #2
 800229c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800229e:	2317      	movs	r3, #23
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	781b      	ldrb	r3, [r3, #0]
}
 80022a4:	0018      	movs	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b006      	add	sp, #24
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	2204      	movs	r2, #4
 80022ca:	409a      	lsls	r2, r3
 80022cc:	0013      	movs	r3, r2
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	4013      	ands	r3, r2
 80022d2:	d024      	beq.n	800231e <HAL_DMA_IRQHandler+0x72>
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	2204      	movs	r2, #4
 80022d8:	4013      	ands	r3, r2
 80022da:	d020      	beq.n	800231e <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	2220      	movs	r2, #32
 80022e4:	4013      	ands	r3, r2
 80022e6:	d107      	bne.n	80022f8 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2104      	movs	r1, #4
 80022f4:	438a      	bics	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002300:	2104      	movs	r1, #4
 8002302:	4091      	lsls	r1, r2
 8002304:	000a      	movs	r2, r1
 8002306:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	2b00      	cmp	r3, #0
 800230e:	d100      	bne.n	8002312 <HAL_DMA_IRQHandler+0x66>
 8002310:	e06a      	b.n	80023e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	0010      	movs	r0, r2
 800231a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800231c:	e064      	b.n	80023e8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	2202      	movs	r2, #2
 8002324:	409a      	lsls	r2, r3
 8002326:	0013      	movs	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4013      	ands	r3, r2
 800232c:	d02b      	beq.n	8002386 <HAL_DMA_IRQHandler+0xda>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2202      	movs	r2, #2
 8002332:	4013      	ands	r3, r2
 8002334:	d027      	beq.n	8002386 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2220      	movs	r2, #32
 800233e:	4013      	ands	r3, r2
 8002340:	d10b      	bne.n	800235a <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	210a      	movs	r1, #10
 800234e:	438a      	bics	r2, r1
 8002350:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2221      	movs	r2, #33	; 0x21
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002362:	2102      	movs	r1, #2
 8002364:	4091      	lsls	r1, r2
 8002366:	000a      	movs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002376:	2b00      	cmp	r3, #0
 8002378:	d036      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	0010      	movs	r0, r2
 8002382:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002384:	e030      	b.n	80023e8 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	2208      	movs	r2, #8
 800238c:	409a      	lsls	r2, r3
 800238e:	0013      	movs	r3, r2
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	4013      	ands	r3, r2
 8002394:	d028      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x13c>
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	2208      	movs	r2, #8
 800239a:	4013      	ands	r3, r2
 800239c:	d024      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	210e      	movs	r1, #14
 80023aa:	438a      	bics	r2, r1
 80023ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	2101      	movs	r1, #1
 80023b8:	4091      	lsls	r1, r2
 80023ba:	000a      	movs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2221      	movs	r2, #33	; 0x21
 80023c8:	2101      	movs	r1, #1
 80023ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2220      	movs	r2, #32
 80023d0:	2100      	movs	r1, #0
 80023d2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	0010      	movs	r0, r2
 80023e4:	4798      	blx	r3
    }
  }
}
 80023e6:	e7ff      	b.n	80023e8 <HAL_DMA_IRQHandler+0x13c>
 80023e8:	46c0      	nop			; (mov r8, r8)
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b004      	add	sp, #16
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
 80023fc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	2101      	movs	r1, #1
 8002408:	4091      	lsls	r1, r2
 800240a:	000a      	movs	r2, r1
 800240c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b10      	cmp	r3, #16
 800241c:	d108      	bne.n	8002430 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800242e:	e007      	b.n	8002440 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	60da      	str	r2, [r3, #12]
}
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b004      	add	sp, #16
 8002446:	bd80      	pop	{r7, pc}

08002448 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	001a      	movs	r2, r3
 8002456:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <DMA_CalcBaseAndBitshift+0x60>)
 8002458:	429a      	cmp	r2, r3
 800245a:	d810      	bhi.n	800247e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a12      	ldr	r2, [pc, #72]	; (80024ac <DMA_CalcBaseAndBitshift+0x64>)
 8002462:	4694      	mov	ip, r2
 8002464:	4463      	add	r3, ip
 8002466:	2114      	movs	r1, #20
 8002468:	0018      	movs	r0, r3
 800246a:	f7fd fe55 	bl	8000118 <__udivsi3>
 800246e:	0003      	movs	r3, r0
 8002470:	009a      	lsls	r2, r3, #2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <DMA_CalcBaseAndBitshift+0x68>)
 800247a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800247c:	e00f      	b.n	800249e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a0c      	ldr	r2, [pc, #48]	; (80024b4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002484:	4694      	mov	ip, r2
 8002486:	4463      	add	r3, ip
 8002488:	2114      	movs	r1, #20
 800248a:	0018      	movs	r0, r3
 800248c:	f7fd fe44 	bl	8000118 <__udivsi3>
 8002490:	0003      	movs	r3, r0
 8002492:	009a      	lsls	r2, r3, #2
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a07      	ldr	r2, [pc, #28]	; (80024b8 <DMA_CalcBaseAndBitshift+0x70>)
 800249c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	b002      	add	sp, #8
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	46c0      	nop			; (mov r8, r8)
 80024a8:	40020407 	.word	0x40020407
 80024ac:	bffdfff8 	.word	0xbffdfff8
 80024b0:	40020000 	.word	0x40020000
 80024b4:	bffdfbf8 	.word	0xbffdfbf8
 80024b8:	40020400 	.word	0x40020400

080024bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b086      	sub	sp, #24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024ca:	e155      	b.n	8002778 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4091      	lsls	r1, r2
 80024d6:	000a      	movs	r2, r1
 80024d8:	4013      	ands	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d100      	bne.n	80024e4 <HAL_GPIO_Init+0x28>
 80024e2:	e146      	b.n	8002772 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2203      	movs	r2, #3
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d005      	beq.n	80024fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2203      	movs	r2, #3
 80024f6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d130      	bne.n	800255e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	409a      	lsls	r2, r3
 800250a:	0013      	movs	r3, r2
 800250c:	43da      	mvns	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	409a      	lsls	r2, r3
 800251e:	0013      	movs	r3, r2
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002532:	2201      	movs	r2, #1
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	409a      	lsls	r2, r3
 8002538:	0013      	movs	r3, r2
 800253a:	43da      	mvns	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	2201      	movs	r2, #1
 800254a:	401a      	ands	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	409a      	lsls	r2, r3
 8002550:	0013      	movs	r3, r2
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2203      	movs	r2, #3
 8002564:	4013      	ands	r3, r2
 8002566:	2b03      	cmp	r3, #3
 8002568:	d017      	beq.n	800259a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	409a      	lsls	r2, r3
 8002578:	0013      	movs	r3, r2
 800257a:	43da      	mvns	r2, r3
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	4013      	ands	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	409a      	lsls	r2, r3
 800258c:	0013      	movs	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	693a      	ldr	r2, [r7, #16]
 8002598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2203      	movs	r2, #3
 80025a0:	4013      	ands	r3, r2
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d123      	bne.n	80025ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	08da      	lsrs	r2, r3, #3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	3208      	adds	r2, #8
 80025ae:	0092      	lsls	r2, r2, #2
 80025b0:	58d3      	ldr	r3, [r2, r3]
 80025b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2207      	movs	r2, #7
 80025b8:	4013      	ands	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	220f      	movs	r2, #15
 80025be:	409a      	lsls	r2, r3
 80025c0:	0013      	movs	r3, r2
 80025c2:	43da      	mvns	r2, r3
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	691a      	ldr	r2, [r3, #16]
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2107      	movs	r1, #7
 80025d2:	400b      	ands	r3, r1
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	409a      	lsls	r2, r3
 80025d8:	0013      	movs	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	08da      	lsrs	r2, r3, #3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3208      	adds	r2, #8
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	6939      	ldr	r1, [r7, #16]
 80025ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	2203      	movs	r2, #3
 80025fa:	409a      	lsls	r2, r3
 80025fc:	0013      	movs	r3, r2
 80025fe:	43da      	mvns	r2, r3
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4013      	ands	r3, r2
 8002604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2203      	movs	r2, #3
 800260c:	401a      	ands	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	0013      	movs	r3, r2
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	23c0      	movs	r3, #192	; 0xc0
 8002628:	029b      	lsls	r3, r3, #10
 800262a:	4013      	ands	r3, r2
 800262c:	d100      	bne.n	8002630 <HAL_GPIO_Init+0x174>
 800262e:	e0a0      	b.n	8002772 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002630:	4b57      	ldr	r3, [pc, #348]	; (8002790 <HAL_GPIO_Init+0x2d4>)
 8002632:	699a      	ldr	r2, [r3, #24]
 8002634:	4b56      	ldr	r3, [pc, #344]	; (8002790 <HAL_GPIO_Init+0x2d4>)
 8002636:	2101      	movs	r1, #1
 8002638:	430a      	orrs	r2, r1
 800263a:	619a      	str	r2, [r3, #24]
 800263c:	4b54      	ldr	r3, [pc, #336]	; (8002790 <HAL_GPIO_Init+0x2d4>)
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	2201      	movs	r2, #1
 8002642:	4013      	ands	r3, r2
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002648:	4a52      	ldr	r2, [pc, #328]	; (8002794 <HAL_GPIO_Init+0x2d8>)
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	589b      	ldr	r3, [r3, r2]
 8002654:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	2203      	movs	r2, #3
 800265a:	4013      	ands	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	220f      	movs	r2, #15
 8002660:	409a      	lsls	r2, r3
 8002662:	0013      	movs	r3, r2
 8002664:	43da      	mvns	r2, r3
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	2390      	movs	r3, #144	; 0x90
 8002670:	05db      	lsls	r3, r3, #23
 8002672:	429a      	cmp	r2, r3
 8002674:	d019      	beq.n	80026aa <HAL_GPIO_Init+0x1ee>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a47      	ldr	r2, [pc, #284]	; (8002798 <HAL_GPIO_Init+0x2dc>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d013      	beq.n	80026a6 <HAL_GPIO_Init+0x1ea>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4a46      	ldr	r2, [pc, #280]	; (800279c <HAL_GPIO_Init+0x2e0>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d00d      	beq.n	80026a2 <HAL_GPIO_Init+0x1e6>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a45      	ldr	r2, [pc, #276]	; (80027a0 <HAL_GPIO_Init+0x2e4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x1e2>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a44      	ldr	r2, [pc, #272]	; (80027a4 <HAL_GPIO_Init+0x2e8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d101      	bne.n	800269a <HAL_GPIO_Init+0x1de>
 8002696:	2304      	movs	r3, #4
 8002698:	e008      	b.n	80026ac <HAL_GPIO_Init+0x1f0>
 800269a:	2305      	movs	r3, #5
 800269c:	e006      	b.n	80026ac <HAL_GPIO_Init+0x1f0>
 800269e:	2303      	movs	r3, #3
 80026a0:	e004      	b.n	80026ac <HAL_GPIO_Init+0x1f0>
 80026a2:	2302      	movs	r3, #2
 80026a4:	e002      	b.n	80026ac <HAL_GPIO_Init+0x1f0>
 80026a6:	2301      	movs	r3, #1
 80026a8:	e000      	b.n	80026ac <HAL_GPIO_Init+0x1f0>
 80026aa:	2300      	movs	r3, #0
 80026ac:	697a      	ldr	r2, [r7, #20]
 80026ae:	2103      	movs	r1, #3
 80026b0:	400a      	ands	r2, r1
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	4093      	lsls	r3, r2
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80026bc:	4935      	ldr	r1, [pc, #212]	; (8002794 <HAL_GPIO_Init+0x2d8>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	43da      	mvns	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	035b      	lsls	r3, r3, #13
 80026e2:	4013      	ands	r3, r2
 80026e4:	d003      	beq.n	80026ee <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 80026e6:	693a      	ldr	r2, [r7, #16]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80026ee:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80026f4:	4b2c      	ldr	r3, [pc, #176]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4013      	ands	r3, r2
 8002702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	039b      	lsls	r3, r3, #14
 800270c:	4013      	ands	r3, r2
 800270e:	d003      	beq.n	8002718 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4313      	orrs	r3, r2
 8002716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002718:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800271e:	4b22      	ldr	r3, [pc, #136]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	43da      	mvns	r2, r3
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4013      	ands	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	029b      	lsls	r3, r3, #10
 8002736:	4013      	ands	r3, r2
 8002738:	d003      	beq.n	8002742 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002742:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002748:	4b17      	ldr	r3, [pc, #92]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	43da      	mvns	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	025b      	lsls	r3, r3, #9
 8002760:	4013      	ands	r3, r2
 8002762:	d003      	beq.n	800276c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800276c:	4b0e      	ldr	r3, [pc, #56]	; (80027a8 <HAL_GPIO_Init+0x2ec>)
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	3301      	adds	r3, #1
 8002776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	40da      	lsrs	r2, r3
 8002780:	1e13      	subs	r3, r2, #0
 8002782:	d000      	beq.n	8002786 <HAL_GPIO_Init+0x2ca>
 8002784:	e6a2      	b.n	80024cc <HAL_GPIO_Init+0x10>
  } 
}
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	46c0      	nop			; (mov r8, r8)
 800278a:	46bd      	mov	sp, r7
 800278c:	b006      	add	sp, #24
 800278e:	bd80      	pop	{r7, pc}
 8002790:	40021000 	.word	0x40021000
 8002794:	40010000 	.word	0x40010000
 8002798:	48000400 	.word	0x48000400
 800279c:	48000800 	.word	0x48000800
 80027a0:	48000c00 	.word	0x48000c00
 80027a4:	48001000 	.word	0x48001000
 80027a8:	40010400 	.word	0x40010400

080027ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	0008      	movs	r0, r1
 80027b6:	0011      	movs	r1, r2
 80027b8:	1cbb      	adds	r3, r7, #2
 80027ba:	1c02      	adds	r2, r0, #0
 80027bc:	801a      	strh	r2, [r3, #0]
 80027be:	1c7b      	adds	r3, r7, #1
 80027c0:	1c0a      	adds	r2, r1, #0
 80027c2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c4:	1c7b      	adds	r3, r7, #1
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d004      	beq.n	80027d6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027cc:	1cbb      	adds	r3, r7, #2
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027d4:	e003      	b.n	80027de <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027d6:	1cbb      	adds	r3, r7, #2
 80027d8:	881a      	ldrh	r2, [r3, #0]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b002      	add	sp, #8
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	0002      	movs	r2, r0
 80027f0:	1dbb      	adds	r3, r7, #6
 80027f2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80027f6:	695b      	ldr	r3, [r3, #20]
 80027f8:	1dba      	adds	r2, r7, #6
 80027fa:	8812      	ldrh	r2, [r2, #0]
 80027fc:	4013      	ands	r3, r2
 80027fe:	d008      	beq.n	8002812 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002800:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002802:	1dba      	adds	r2, r7, #6
 8002804:	8812      	ldrh	r2, [r2, #0]
 8002806:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002808:	1dbb      	adds	r3, r7, #6
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	0018      	movs	r0, r3
 800280e:	f7fe f99f 	bl	8000b50 <HAL_GPIO_EXTI_Callback>
  }
}
 8002812:	46c0      	nop			; (mov r8, r8)
 8002814:	46bd      	mov	sp, r7
 8002816:	b002      	add	sp, #8
 8002818:	bd80      	pop	{r7, pc}
 800281a:	46c0      	nop			; (mov r8, r8)
 800281c:	40010400 	.word	0x40010400

08002820 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d102      	bne.n	8002834 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	f000 fb76 	bl	8002f20 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2201      	movs	r2, #1
 800283a:	4013      	ands	r3, r2
 800283c:	d100      	bne.n	8002840 <HAL_RCC_OscConfig+0x20>
 800283e:	e08e      	b.n	800295e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002840:	4bc5      	ldr	r3, [pc, #788]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	220c      	movs	r2, #12
 8002846:	4013      	ands	r3, r2
 8002848:	2b04      	cmp	r3, #4
 800284a:	d00e      	beq.n	800286a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800284c:	4bc2      	ldr	r3, [pc, #776]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	220c      	movs	r2, #12
 8002852:	4013      	ands	r3, r2
 8002854:	2b08      	cmp	r3, #8
 8002856:	d117      	bne.n	8002888 <HAL_RCC_OscConfig+0x68>
 8002858:	4bbf      	ldr	r3, [pc, #764]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	23c0      	movs	r3, #192	; 0xc0
 800285e:	025b      	lsls	r3, r3, #9
 8002860:	401a      	ands	r2, r3
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	025b      	lsls	r3, r3, #9
 8002866:	429a      	cmp	r2, r3
 8002868:	d10e      	bne.n	8002888 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286a:	4bbb      	ldr	r3, [pc, #748]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	029b      	lsls	r3, r3, #10
 8002872:	4013      	ands	r3, r2
 8002874:	d100      	bne.n	8002878 <HAL_RCC_OscConfig+0x58>
 8002876:	e071      	b.n	800295c <HAL_RCC_OscConfig+0x13c>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d000      	beq.n	8002882 <HAL_RCC_OscConfig+0x62>
 8002880:	e06c      	b.n	800295c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	f000 fb4c 	bl	8002f20 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d107      	bne.n	80028a0 <HAL_RCC_OscConfig+0x80>
 8002890:	4bb1      	ldr	r3, [pc, #708]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4bb0      	ldr	r3, [pc, #704]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002896:	2180      	movs	r1, #128	; 0x80
 8002898:	0249      	lsls	r1, r1, #9
 800289a:	430a      	orrs	r2, r1
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	e02f      	b.n	8002900 <HAL_RCC_OscConfig+0xe0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10c      	bne.n	80028c2 <HAL_RCC_OscConfig+0xa2>
 80028a8:	4bab      	ldr	r3, [pc, #684]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4baa      	ldr	r3, [pc, #680]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028ae:	49ab      	ldr	r1, [pc, #684]	; (8002b5c <HAL_RCC_OscConfig+0x33c>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	4ba8      	ldr	r3, [pc, #672]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4ba7      	ldr	r3, [pc, #668]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028ba:	49a9      	ldr	r1, [pc, #676]	; (8002b60 <HAL_RCC_OscConfig+0x340>)
 80028bc:	400a      	ands	r2, r1
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	e01e      	b.n	8002900 <HAL_RCC_OscConfig+0xe0>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d10e      	bne.n	80028e8 <HAL_RCC_OscConfig+0xc8>
 80028ca:	4ba3      	ldr	r3, [pc, #652]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	4ba2      	ldr	r3, [pc, #648]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	02c9      	lsls	r1, r1, #11
 80028d4:	430a      	orrs	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	4b9f      	ldr	r3, [pc, #636]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b9e      	ldr	r3, [pc, #632]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028de:	2180      	movs	r1, #128	; 0x80
 80028e0:	0249      	lsls	r1, r1, #9
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	e00b      	b.n	8002900 <HAL_RCC_OscConfig+0xe0>
 80028e8:	4b9b      	ldr	r3, [pc, #620]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b9a      	ldr	r3, [pc, #616]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028ee:	499b      	ldr	r1, [pc, #620]	; (8002b5c <HAL_RCC_OscConfig+0x33c>)
 80028f0:	400a      	ands	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	4b98      	ldr	r3, [pc, #608]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b97      	ldr	r3, [pc, #604]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80028fa:	4999      	ldr	r1, [pc, #612]	; (8002b60 <HAL_RCC_OscConfig+0x340>)
 80028fc:	400a      	ands	r2, r1
 80028fe:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d014      	beq.n	8002932 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002908:	f7fe ff26 	bl	8001758 <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002910:	e008      	b.n	8002924 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002912:	f7fe ff21 	bl	8001758 <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	2b64      	cmp	r3, #100	; 0x64
 800291e:	d901      	bls.n	8002924 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e2fd      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002924:	4b8c      	ldr	r3, [pc, #560]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	2380      	movs	r3, #128	; 0x80
 800292a:	029b      	lsls	r3, r3, #10
 800292c:	4013      	ands	r3, r2
 800292e:	d0f0      	beq.n	8002912 <HAL_RCC_OscConfig+0xf2>
 8002930:	e015      	b.n	800295e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002932:	f7fe ff11 	bl	8001758 <HAL_GetTick>
 8002936:	0003      	movs	r3, r0
 8002938:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800293a:	e008      	b.n	800294e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800293c:	f7fe ff0c 	bl	8001758 <HAL_GetTick>
 8002940:	0002      	movs	r2, r0
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	2b64      	cmp	r3, #100	; 0x64
 8002948:	d901      	bls.n	800294e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e2e8      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	4b82      	ldr	r3, [pc, #520]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	2380      	movs	r3, #128	; 0x80
 8002954:	029b      	lsls	r3, r3, #10
 8002956:	4013      	ands	r3, r2
 8002958:	d1f0      	bne.n	800293c <HAL_RCC_OscConfig+0x11c>
 800295a:	e000      	b.n	800295e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	2202      	movs	r2, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d100      	bne.n	800296a <HAL_RCC_OscConfig+0x14a>
 8002968:	e06c      	b.n	8002a44 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800296a:	4b7b      	ldr	r3, [pc, #492]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	220c      	movs	r2, #12
 8002970:	4013      	ands	r3, r2
 8002972:	d00e      	beq.n	8002992 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002974:	4b78      	ldr	r3, [pc, #480]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	220c      	movs	r2, #12
 800297a:	4013      	ands	r3, r2
 800297c:	2b08      	cmp	r3, #8
 800297e:	d11f      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1a0>
 8002980:	4b75      	ldr	r3, [pc, #468]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002982:	685a      	ldr	r2, [r3, #4]
 8002984:	23c0      	movs	r3, #192	; 0xc0
 8002986:	025b      	lsls	r3, r3, #9
 8002988:	401a      	ands	r2, r3
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	429a      	cmp	r2, r3
 8002990:	d116      	bne.n	80029c0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	4b71      	ldr	r3, [pc, #452]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2202      	movs	r2, #2
 8002998:	4013      	ands	r3, r2
 800299a:	d005      	beq.n	80029a8 <HAL_RCC_OscConfig+0x188>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d001      	beq.n	80029a8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e2bb      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a8:	4b6b      	ldr	r3, [pc, #428]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	22f8      	movs	r2, #248	; 0xf8
 80029ae:	4393      	bics	r3, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00da      	lsls	r2, r3, #3
 80029b8:	4b67      	ldr	r3, [pc, #412]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029be:	e041      	b.n	8002a44 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d024      	beq.n	8002a12 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029c8:	4b63      	ldr	r3, [pc, #396]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	4b62      	ldr	r3, [pc, #392]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80029ce:	2101      	movs	r1, #1
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe fec0 	bl	8001758 <HAL_GetTick>
 80029d8:	0003      	movs	r3, r0
 80029da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029dc:	e008      	b.n	80029f0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029de:	f7fe febb 	bl	8001758 <HAL_GetTick>
 80029e2:	0002      	movs	r2, r0
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d901      	bls.n	80029f0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80029ec:	2303      	movs	r3, #3
 80029ee:	e297      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f0:	4b59      	ldr	r3, [pc, #356]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	2202      	movs	r2, #2
 80029f6:	4013      	ands	r3, r2
 80029f8:	d0f1      	beq.n	80029de <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fa:	4b57      	ldr	r3, [pc, #348]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	22f8      	movs	r2, #248	; 0xf8
 8002a00:	4393      	bics	r3, r2
 8002a02:	0019      	movs	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	00da      	lsls	r2, r3, #3
 8002a0a:	4b53      	ldr	r3, [pc, #332]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e018      	b.n	8002a44 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a12:	4b51      	ldr	r3, [pc, #324]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002a14:	681a      	ldr	r2, [r3, #0]
 8002a16:	4b50      	ldr	r3, [pc, #320]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002a18:	2101      	movs	r1, #1
 8002a1a:	438a      	bics	r2, r1
 8002a1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1e:	f7fe fe9b 	bl	8001758 <HAL_GetTick>
 8002a22:	0003      	movs	r3, r0
 8002a24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a28:	f7fe fe96 	bl	8001758 <HAL_GetTick>
 8002a2c:	0002      	movs	r2, r0
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e272      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3a:	4b47      	ldr	r3, [pc, #284]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	4013      	ands	r3, r2
 8002a42:	d1f1      	bne.n	8002a28 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2208      	movs	r2, #8
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d036      	beq.n	8002abc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d019      	beq.n	8002a8a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a56:	4b40      	ldr	r3, [pc, #256]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002a5c:	2101      	movs	r1, #1
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a62:	f7fe fe79 	bl	8001758 <HAL_GetTick>
 8002a66:	0003      	movs	r3, r0
 8002a68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a6a:	e008      	b.n	8002a7e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a6c:	f7fe fe74 	bl	8001758 <HAL_GetTick>
 8002a70:	0002      	movs	r2, r0
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e250      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	4b36      	ldr	r3, [pc, #216]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	2202      	movs	r2, #2
 8002a84:	4013      	ands	r3, r2
 8002a86:	d0f1      	beq.n	8002a6c <HAL_RCC_OscConfig+0x24c>
 8002a88:	e018      	b.n	8002abc <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a8a:	4b33      	ldr	r3, [pc, #204]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002a8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a8e:	4b32      	ldr	r3, [pc, #200]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002a90:	2101      	movs	r1, #1
 8002a92:	438a      	bics	r2, r1
 8002a94:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a96:	f7fe fe5f 	bl	8001758 <HAL_GetTick>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fe5a 	bl	8001758 <HAL_GetTick>
 8002aa4:	0002      	movs	r2, r0
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e236      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab2:	4b29      	ldr	r3, [pc, #164]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d1f1      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2204      	movs	r2, #4
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d100      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2a8>
 8002ac6:	e0b5      	b.n	8002c34 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ac8:	201f      	movs	r0, #31
 8002aca:	183b      	adds	r3, r7, r0
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ad0:	4b21      	ldr	r3, [pc, #132]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	055b      	lsls	r3, r3, #21
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d110      	bne.n	8002afe <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002adc:	4b1e      	ldr	r3, [pc, #120]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002ade:	69da      	ldr	r2, [r3, #28]
 8002ae0:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	0549      	lsls	r1, r1, #21
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	61da      	str	r2, [r3, #28]
 8002aea:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	055b      	lsls	r3, r3, #21
 8002af2:	4013      	ands	r3, r2
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002af8:	183b      	adds	r3, r7, r0
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	4b19      	ldr	r3, [pc, #100]	; (8002b64 <HAL_RCC_OscConfig+0x344>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	4013      	ands	r3, r2
 8002b08:	d11a      	bne.n	8002b40 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b0a:	4b16      	ldr	r3, [pc, #88]	; (8002b64 <HAL_RCC_OscConfig+0x344>)
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCC_OscConfig+0x344>)
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	0049      	lsls	r1, r1, #1
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b18:	f7fe fe1e 	bl	8001758 <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b22:	f7fe fe19 	bl	8001758 <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b64      	cmp	r3, #100	; 0x64
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e1f5      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <HAL_RCC_OscConfig+0x344>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	2380      	movs	r3, #128	; 0x80
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d10f      	bne.n	8002b68 <HAL_RCC_OscConfig+0x348>
 8002b48:	4b03      	ldr	r3, [pc, #12]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002b4a:	6a1a      	ldr	r2, [r3, #32]
 8002b4c:	4b02      	ldr	r3, [pc, #8]	; (8002b58 <HAL_RCC_OscConfig+0x338>)
 8002b4e:	2101      	movs	r1, #1
 8002b50:	430a      	orrs	r2, r1
 8002b52:	621a      	str	r2, [r3, #32]
 8002b54:	e036      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3a4>
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	fffeffff 	.word	0xfffeffff
 8002b60:	fffbffff 	.word	0xfffbffff
 8002b64:	40007000 	.word	0x40007000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10c      	bne.n	8002b8a <HAL_RCC_OscConfig+0x36a>
 8002b70:	4bca      	ldr	r3, [pc, #808]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002b72:	6a1a      	ldr	r2, [r3, #32]
 8002b74:	4bc9      	ldr	r3, [pc, #804]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002b76:	2101      	movs	r1, #1
 8002b78:	438a      	bics	r2, r1
 8002b7a:	621a      	str	r2, [r3, #32]
 8002b7c:	4bc7      	ldr	r3, [pc, #796]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002b7e:	6a1a      	ldr	r2, [r3, #32]
 8002b80:	4bc6      	ldr	r3, [pc, #792]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002b82:	2104      	movs	r1, #4
 8002b84:	438a      	bics	r2, r1
 8002b86:	621a      	str	r2, [r3, #32]
 8002b88:	e01c      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3a4>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0x38c>
 8002b92:	4bc2      	ldr	r3, [pc, #776]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002b94:	6a1a      	ldr	r2, [r3, #32]
 8002b96:	4bc1      	ldr	r3, [pc, #772]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002b98:	2104      	movs	r1, #4
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	621a      	str	r2, [r3, #32]
 8002b9e:	4bbf      	ldr	r3, [pc, #764]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002ba0:	6a1a      	ldr	r2, [r3, #32]
 8002ba2:	4bbe      	ldr	r3, [pc, #760]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002ba4:	2101      	movs	r1, #1
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	621a      	str	r2, [r3, #32]
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3a4>
 8002bac:	4bbb      	ldr	r3, [pc, #748]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002bae:	6a1a      	ldr	r2, [r3, #32]
 8002bb0:	4bba      	ldr	r3, [pc, #744]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	621a      	str	r2, [r3, #32]
 8002bb8:	4bb8      	ldr	r3, [pc, #736]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	4bb7      	ldr	r3, [pc, #732]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002bbe:	2104      	movs	r1, #4
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689b      	ldr	r3, [r3, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d014      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bcc:	f7fe fdc4 	bl	8001758 <HAL_GetTick>
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bd4:	e009      	b.n	8002bea <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bd6:	f7fe fdbf 	bl	8001758 <HAL_GetTick>
 8002bda:	0002      	movs	r2, r0
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	4aaf      	ldr	r2, [pc, #700]	; (8002ea0 <HAL_RCC_OscConfig+0x680>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e19a      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bea:	4bac      	ldr	r3, [pc, #688]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	2202      	movs	r2, #2
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	d0f0      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x3b6>
 8002bf4:	e013      	b.n	8002c1e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fe fdaf 	bl	8001758 <HAL_GetTick>
 8002bfa:	0003      	movs	r3, r0
 8002bfc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bfe:	e009      	b.n	8002c14 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c00:	f7fe fdaa 	bl	8001758 <HAL_GetTick>
 8002c04:	0002      	movs	r2, r0
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	4aa5      	ldr	r2, [pc, #660]	; (8002ea0 <HAL_RCC_OscConfig+0x680>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e185      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c14:	4ba1      	ldr	r3, [pc, #644]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c1e:	231f      	movs	r3, #31
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d105      	bne.n	8002c34 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c28:	4b9c      	ldr	r3, [pc, #624]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c2a:	69da      	ldr	r2, [r3, #28]
 8002c2c:	4b9b      	ldr	r3, [pc, #620]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c2e:	499d      	ldr	r1, [pc, #628]	; (8002ea4 <HAL_RCC_OscConfig+0x684>)
 8002c30:	400a      	ands	r2, r1
 8002c32:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2210      	movs	r2, #16
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d063      	beq.n	8002d06 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d12a      	bne.n	8002c9c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002c46:	4b95      	ldr	r3, [pc, #596]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4a:	4b94      	ldr	r3, [pc, #592]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c4c:	2104      	movs	r1, #4
 8002c4e:	430a      	orrs	r2, r1
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002c52:	4b92      	ldr	r3, [pc, #584]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c56:	4b91      	ldr	r3, [pc, #580]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c58:	2101      	movs	r1, #1
 8002c5a:	430a      	orrs	r2, r1
 8002c5c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5e:	f7fe fd7b 	bl	8001758 <HAL_GetTick>
 8002c62:	0003      	movs	r3, r0
 8002c64:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002c68:	f7fe fd76 	bl	8001758 <HAL_GetTick>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e152      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002c7a:	4b88      	ldr	r3, [pc, #544]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	2202      	movs	r2, #2
 8002c80:	4013      	ands	r3, r2
 8002c82:	d0f1      	beq.n	8002c68 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002c84:	4b85      	ldr	r3, [pc, #532]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	22f8      	movs	r2, #248	; 0xf8
 8002c8a:	4393      	bics	r3, r2
 8002c8c:	0019      	movs	r1, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	00da      	lsls	r2, r3, #3
 8002c94:	4b81      	ldr	r3, [pc, #516]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002c96:	430a      	orrs	r2, r1
 8002c98:	635a      	str	r2, [r3, #52]	; 0x34
 8002c9a:	e034      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	3305      	adds	r3, #5
 8002ca2:	d111      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002ca4:	4b7d      	ldr	r3, [pc, #500]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca8:	4b7c      	ldr	r3, [pc, #496]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002caa:	2104      	movs	r1, #4
 8002cac:	438a      	bics	r2, r1
 8002cae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002cb0:	4b7a      	ldr	r3, [pc, #488]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb4:	22f8      	movs	r2, #248	; 0xf8
 8002cb6:	4393      	bics	r3, r2
 8002cb8:	0019      	movs	r1, r3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	00da      	lsls	r2, r3, #3
 8002cc0:	4b76      	ldr	r3, [pc, #472]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	635a      	str	r2, [r3, #52]	; 0x34
 8002cc6:	e01e      	b.n	8002d06 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002cc8:	4b74      	ldr	r3, [pc, #464]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ccc:	4b73      	ldr	r3, [pc, #460]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002cce:	2104      	movs	r1, #4
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002cd4:	4b71      	ldr	r3, [pc, #452]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002cd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cd8:	4b70      	ldr	r3, [pc, #448]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002cda:	2101      	movs	r1, #1
 8002cdc:	438a      	bics	r2, r1
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ce0:	f7fe fd3a 	bl	8001758 <HAL_GetTick>
 8002ce4:	0003      	movs	r3, r0
 8002ce6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002cea:	f7fe fd35 	bl	8001758 <HAL_GetTick>
 8002cee:	0002      	movs	r2, r0
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e111      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002cfc:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d00:	2202      	movs	r2, #2
 8002d02:	4013      	ands	r3, r2
 8002d04:	d1f1      	bne.n	8002cea <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	d05c      	beq.n	8002dca <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d10:	4b62      	ldr	r3, [pc, #392]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	220c      	movs	r2, #12
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b0c      	cmp	r3, #12
 8002d1a:	d00e      	beq.n	8002d3a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d1c:	4b5f      	ldr	r3, [pc, #380]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	220c      	movs	r2, #12
 8002d22:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d114      	bne.n	8002d52 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002d28:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	23c0      	movs	r3, #192	; 0xc0
 8002d2e:	025b      	lsls	r3, r3, #9
 8002d30:	401a      	ands	r2, r3
 8002d32:	23c0      	movs	r3, #192	; 0xc0
 8002d34:	025b      	lsls	r3, r3, #9
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d10b      	bne.n	8002d52 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002d3a:	4b58      	ldr	r3, [pc, #352]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	029b      	lsls	r3, r3, #10
 8002d42:	4013      	ands	r3, r2
 8002d44:	d040      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x5a8>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a1b      	ldr	r3, [r3, #32]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d03c      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0e6      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d01b      	beq.n	8002d92 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002d5a:	4b50      	ldr	r3, [pc, #320]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002d5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d5e:	4b4f      	ldr	r3, [pc, #316]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002d60:	2180      	movs	r1, #128	; 0x80
 8002d62:	0249      	lsls	r1, r1, #9
 8002d64:	430a      	orrs	r2, r1
 8002d66:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fe fcf6 	bl	8001758 <HAL_GetTick>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d72:	f7fe fcf1 	bl	8001758 <HAL_GetTick>
 8002d76:	0002      	movs	r2, r0
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e0cd      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d84:	4b45      	ldr	r3, [pc, #276]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002d86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	029b      	lsls	r3, r3, #10
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x552>
 8002d90:	e01b      	b.n	8002dca <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002d92:	4b42      	ldr	r3, [pc, #264]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d96:	4b41      	ldr	r3, [pc, #260]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002d98:	4943      	ldr	r1, [pc, #268]	; (8002ea8 <HAL_RCC_OscConfig+0x688>)
 8002d9a:	400a      	ands	r2, r1
 8002d9c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9e:	f7fe fcdb 	bl	8001758 <HAL_GetTick>
 8002da2:	0003      	movs	r3, r0
 8002da4:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002da8:	f7fe fcd6 	bl	8001758 <HAL_GetTick>
 8002dac:	0002      	movs	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0b2      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002dba:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	029b      	lsls	r3, r3, #10
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0x588>
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002dc8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d100      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x5b4>
 8002dd2:	e0a4      	b.n	8002f1e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	220c      	movs	r2, #12
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d100      	bne.n	8002de2 <HAL_RCC_OscConfig+0x5c2>
 8002de0:	e078      	b.n	8002ed4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d14c      	bne.n	8002e84 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dea:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002df0:	492e      	ldr	r1, [pc, #184]	; (8002eac <HAL_RCC_OscConfig+0x68c>)
 8002df2:	400a      	ands	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df6:	f7fe fcaf 	bl	8001758 <HAL_GetTick>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e00:	f7fe fcaa 	bl	8001758 <HAL_GetTick>
 8002e04:	0002      	movs	r2, r0
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e086      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e12:	4b22      	ldr	r3, [pc, #136]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	049b      	lsls	r3, r3, #18
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d1f0      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1e:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	220f      	movs	r2, #15
 8002e24:	4393      	bics	r3, r2
 8002e26:	0019      	movs	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <HAL_RCC_OscConfig+0x690>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	0019      	movs	r1, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e44:	431a      	orrs	r2, r3
 8002e46:	4b15      	ldr	r3, [pc, #84]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e48:	430a      	orrs	r2, r1
 8002e4a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e52:	2180      	movs	r1, #128	; 0x80
 8002e54:	0449      	lsls	r1, r1, #17
 8002e56:	430a      	orrs	r2, r1
 8002e58:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fc7d 	bl	8001758 <HAL_GetTick>
 8002e5e:	0003      	movs	r3, r0
 8002e60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe fc78 	bl	8001758 <HAL_GetTick>
 8002e68:	0002      	movs	r2, r0
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e054      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e76:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	2380      	movs	r3, #128	; 0x80
 8002e7c:	049b      	lsls	r3, r3, #18
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x644>
 8002e82:	e04c      	b.n	8002f1e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <HAL_RCC_OscConfig+0x67c>)
 8002e8a:	4908      	ldr	r1, [pc, #32]	; (8002eac <HAL_RCC_OscConfig+0x68c>)
 8002e8c:	400a      	ands	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fc62 	bl	8001758 <HAL_GetTick>
 8002e94:	0003      	movs	r3, r0
 8002e96:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e98:	e015      	b.n	8002ec6 <HAL_RCC_OscConfig+0x6a6>
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	00001388 	.word	0x00001388
 8002ea4:	efffffff 	.word	0xefffffff
 8002ea8:	fffeffff 	.word	0xfffeffff
 8002eac:	feffffff 	.word	0xfeffffff
 8002eb0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe fc50 	bl	8001758 <HAL_GetTick>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e02c      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_RCC_OscConfig+0x708>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	2380      	movs	r3, #128	; 0x80
 8002ecc:	049b      	lsls	r3, r3, #18
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x694>
 8002ed2:	e024      	b.n	8002f1e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e01f      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002ee0:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <HAL_RCC_OscConfig+0x708>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	; (8002f28 <HAL_RCC_OscConfig+0x708>)
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	23c0      	movs	r3, #192	; 0xc0
 8002ef0:	025b      	lsls	r3, r3, #9
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d10e      	bne.n	8002f1a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	220f      	movs	r2, #15
 8002f00:	401a      	ands	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	23f0      	movs	r3, #240	; 0xf0
 8002f0e:	039b      	lsls	r3, r3, #14
 8002f10:	401a      	ands	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	0018      	movs	r0, r3
 8002f22:	46bd      	mov	sp, r7
 8002f24:	b008      	add	sp, #32
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0bf      	b.n	80030c0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f40:	4b61      	ldr	r3, [pc, #388]	; (80030c8 <HAL_RCC_ClockConfig+0x19c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d911      	bls.n	8002f72 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b5e      	ldr	r3, [pc, #376]	; (80030c8 <HAL_RCC_ClockConfig+0x19c>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2201      	movs	r2, #1
 8002f54:	4393      	bics	r3, r2
 8002f56:	0019      	movs	r1, r3
 8002f58:	4b5b      	ldr	r3, [pc, #364]	; (80030c8 <HAL_RCC_ClockConfig+0x19c>)
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f60:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <HAL_RCC_ClockConfig+0x19c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	4013      	ands	r3, r2
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e0a6      	b.n	80030c0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2202      	movs	r2, #2
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d015      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2204      	movs	r2, #4
 8002f82:	4013      	ands	r3, r2
 8002f84:	d006      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002f86:	4b51      	ldr	r3, [pc, #324]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8002f88:	685a      	ldr	r2, [r3, #4]
 8002f8a:	4b50      	ldr	r3, [pc, #320]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8002f8c:	21e0      	movs	r1, #224	; 0xe0
 8002f8e:	00c9      	lsls	r1, r1, #3
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b4d      	ldr	r3, [pc, #308]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	22f0      	movs	r2, #240	; 0xf0
 8002f9a:	4393      	bics	r3, r2
 8002f9c:	0019      	movs	r1, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2201      	movs	r2, #1
 8002fae:	4013      	ands	r3, r2
 8002fb0:	d04c      	beq.n	800304c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b44      	ldr	r3, [pc, #272]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	2380      	movs	r3, #128	; 0x80
 8002fc0:	029b      	lsls	r3, r3, #10
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d120      	bne.n	8003008 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07a      	b.n	80030c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	049b      	lsls	r3, r3, #18
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d114      	bne.n	8003008 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e06e      	b.n	80030c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d107      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002fea:	4b38      	ldr	r3, [pc, #224]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8002fec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	029b      	lsls	r3, r3, #10
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d108      	bne.n	8003008 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e062      	b.n	80030c0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ffa:	4b34      	ldr	r3, [pc, #208]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2202      	movs	r2, #2
 8003000:	4013      	ands	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e05b      	b.n	80030c0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003008:	4b30      	ldr	r3, [pc, #192]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2203      	movs	r2, #3
 800300e:	4393      	bics	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8003018:	430a      	orrs	r2, r1
 800301a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800301c:	f7fe fb9c 	bl	8001758 <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003024:	e009      	b.n	800303a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003026:	f7fe fb97 	bl	8001758 <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	4a27      	ldr	r2, [pc, #156]	; (80030d0 <HAL_RCC_ClockConfig+0x1a4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e042      	b.n	80030c0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800303a:	4b24      	ldr	r3, [pc, #144]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	220c      	movs	r2, #12
 8003040:	401a      	ands	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	429a      	cmp	r2, r3
 800304a:	d1ec      	bne.n	8003026 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800304c:	4b1e      	ldr	r3, [pc, #120]	; (80030c8 <HAL_RCC_ClockConfig+0x19c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2201      	movs	r2, #1
 8003052:	4013      	ands	r3, r2
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d211      	bcs.n	800307e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_RCC_ClockConfig+0x19c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2201      	movs	r2, #1
 8003060:	4393      	bics	r3, r2
 8003062:	0019      	movs	r1, r3
 8003064:	4b18      	ldr	r3, [pc, #96]	; (80030c8 <HAL_RCC_ClockConfig+0x19c>)
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800306c:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <HAL_RCC_ClockConfig+0x19c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2201      	movs	r2, #1
 8003072:	4013      	ands	r3, r2
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d001      	beq.n	800307e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e020      	b.n	80030c0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2204      	movs	r2, #4
 8003084:	4013      	ands	r3, r2
 8003086:	d009      	beq.n	800309c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b10      	ldr	r3, [pc, #64]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <HAL_RCC_ClockConfig+0x1a8>)
 800308e:	4013      	ands	r3, r2
 8003090:	0019      	movs	r1, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	68da      	ldr	r2, [r3, #12]
 8003096:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 8003098:	430a      	orrs	r2, r1
 800309a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800309c:	f000 f820 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80030a0:	0001      	movs	r1, r0
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_RCC_ClockConfig+0x1a0>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	220f      	movs	r2, #15
 80030aa:	4013      	ands	r3, r2
 80030ac:	4a0a      	ldr	r2, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1ac>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	000a      	movs	r2, r1
 80030b2:	40da      	lsrs	r2, r3
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_ClockConfig+0x1b0>)
 80030b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80030b8:	2000      	movs	r0, #0
 80030ba:	f7fe fb07 	bl	80016cc <HAL_InitTick>
  
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b004      	add	sp, #16
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40021000 	.word	0x40021000
 80030d0:	00001388 	.word	0x00001388
 80030d4:	fffff8ff 	.word	0xfffff8ff
 80030d8:	08005f80 	.word	0x08005f80
 80030dc:	20000004 	.word	0x20000004

080030e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	2300      	movs	r3, #0
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
 80030f2:	2300      	movs	r3, #0
 80030f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80030fa:	4b2d      	ldr	r3, [pc, #180]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	220c      	movs	r2, #12
 8003104:	4013      	ands	r3, r2
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d046      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0xb8>
 800310a:	d848      	bhi.n	800319e <HAL_RCC_GetSysClockFreq+0xbe>
 800310c:	2b04      	cmp	r3, #4
 800310e:	d002      	beq.n	8003116 <HAL_RCC_GetSysClockFreq+0x36>
 8003110:	2b08      	cmp	r3, #8
 8003112:	d003      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0x3c>
 8003114:	e043      	b.n	800319e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003116:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003118:	613b      	str	r3, [r7, #16]
      break;
 800311a:	e043      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	0c9b      	lsrs	r3, r3, #18
 8003120:	220f      	movs	r2, #15
 8003122:	4013      	ands	r3, r2
 8003124:	4a24      	ldr	r2, [pc, #144]	; (80031b8 <HAL_RCC_GetSysClockFreq+0xd8>)
 8003126:	5cd3      	ldrb	r3, [r2, r3]
 8003128:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800312a:	4b21      	ldr	r3, [pc, #132]	; (80031b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	220f      	movs	r2, #15
 8003130:	4013      	ands	r3, r2
 8003132:	4a22      	ldr	r2, [pc, #136]	; (80031bc <HAL_RCC_GetSysClockFreq+0xdc>)
 8003134:	5cd3      	ldrb	r3, [r2, r3]
 8003136:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	23c0      	movs	r3, #192	; 0xc0
 800313c:	025b      	lsls	r3, r3, #9
 800313e:	401a      	ands	r2, r3
 8003140:	2380      	movs	r3, #128	; 0x80
 8003142:	025b      	lsls	r3, r3, #9
 8003144:	429a      	cmp	r2, r3
 8003146:	d109      	bne.n	800315c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003148:	68b9      	ldr	r1, [r7, #8]
 800314a:	481a      	ldr	r0, [pc, #104]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800314c:	f7fc ffe4 	bl	8000118 <__udivsi3>
 8003150:	0003      	movs	r3, r0
 8003152:	001a      	movs	r2, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4353      	muls	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	e01a      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	23c0      	movs	r3, #192	; 0xc0
 8003160:	025b      	lsls	r3, r3, #9
 8003162:	401a      	ands	r2, r3
 8003164:	23c0      	movs	r3, #192	; 0xc0
 8003166:	025b      	lsls	r3, r3, #9
 8003168:	429a      	cmp	r2, r3
 800316a:	d109      	bne.n	8003180 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	4814      	ldr	r0, [pc, #80]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003170:	f7fc ffd2 	bl	8000118 <__udivsi3>
 8003174:	0003      	movs	r3, r0
 8003176:	001a      	movs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4353      	muls	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
 800317e:	e008      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003180:	68b9      	ldr	r1, [r7, #8]
 8003182:	480c      	ldr	r0, [pc, #48]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003184:	f7fc ffc8 	bl	8000118 <__udivsi3>
 8003188:	0003      	movs	r3, r0
 800318a:	001a      	movs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4353      	muls	r3, r2
 8003190:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	613b      	str	r3, [r7, #16]
      break;
 8003196:	e005      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800319a:	613b      	str	r3, [r7, #16]
      break;
 800319c:	e002      	b.n	80031a4 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800319e:	4b05      	ldr	r3, [pc, #20]	; (80031b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 80031a0:	613b      	str	r3, [r7, #16]
      break;
 80031a2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80031a4:	693b      	ldr	r3, [r7, #16]
}
 80031a6:	0018      	movs	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	b006      	add	sp, #24
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	46c0      	nop			; (mov r8, r8)
 80031b0:	40021000 	.word	0x40021000
 80031b4:	007a1200 	.word	0x007a1200
 80031b8:	08005f98 	.word	0x08005f98
 80031bc:	08005fa8 	.word	0x08005fa8
 80031c0:	02dc6c00 	.word	0x02dc6c00

080031c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031c8:	4b02      	ldr	r3, [pc, #8]	; (80031d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	20000004 	.word	0x20000004

080031d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80031dc:	f7ff fff2 	bl	80031c4 <HAL_RCC_GetHCLKFreq>
 80031e0:	0001      	movs	r1, r0
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	2207      	movs	r2, #7
 80031ea:	4013      	ands	r3, r2
 80031ec:	4a04      	ldr	r2, [pc, #16]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ee:	5cd3      	ldrb	r3, [r2, r3]
 80031f0:	40d9      	lsrs	r1, r3
 80031f2:	000b      	movs	r3, r1
}    
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			; (mov r8, r8)
 80031fc:	40021000 	.word	0x40021000
 8003200:	08005f90 	.word	0x08005f90

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	025b      	lsls	r3, r3, #9
 800321c:	4013      	ands	r3, r2
 800321e:	d100      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003220:	e08e      	b.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003222:	2017      	movs	r0, #23
 8003224:	183b      	adds	r3, r7, r0
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800322a:	4b6e      	ldr	r3, [pc, #440]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	055b      	lsls	r3, r3, #21
 8003232:	4013      	ands	r3, r2
 8003234:	d110      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003236:	4b6b      	ldr	r3, [pc, #428]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003238:	69da      	ldr	r2, [r3, #28]
 800323a:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800323c:	2180      	movs	r1, #128	; 0x80
 800323e:	0549      	lsls	r1, r1, #21
 8003240:	430a      	orrs	r2, r1
 8003242:	61da      	str	r2, [r3, #28]
 8003244:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	2380      	movs	r3, #128	; 0x80
 800324a:	055b      	lsls	r3, r3, #21
 800324c:	4013      	ands	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003252:	183b      	adds	r3, r7, r0
 8003254:	2201      	movs	r2, #1
 8003256:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003258:	4b63      	ldr	r3, [pc, #396]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d11a      	bne.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003264:	4b60      	ldr	r3, [pc, #384]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b5f      	ldr	r3, [pc, #380]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800326a:	2180      	movs	r1, #128	; 0x80
 800326c:	0049      	lsls	r1, r1, #1
 800326e:	430a      	orrs	r2, r1
 8003270:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003272:	f7fe fa71 	bl	8001758 <HAL_GetTick>
 8003276:	0003      	movs	r3, r0
 8003278:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	e008      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800327c:	f7fe fa6c 	bl	8001758 <HAL_GetTick>
 8003280:	0002      	movs	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0a6      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800328e:	4b56      	ldr	r3, [pc, #344]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4013      	ands	r3, r2
 8003298:	d0f0      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800329a:	4b52      	ldr	r3, [pc, #328]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800329c:	6a1a      	ldr	r2, [r3, #32]
 800329e:	23c0      	movs	r3, #192	; 0xc0
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4013      	ands	r3, r2
 80032a4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d034      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685a      	ldr	r2, [r3, #4]
 80032b0:	23c0      	movs	r3, #192	; 0xc0
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4013      	ands	r3, r2
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d02c      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032bc:	4b49      	ldr	r3, [pc, #292]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4a4a      	ldr	r2, [pc, #296]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	4b46      	ldr	r3, [pc, #280]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032cc:	2180      	movs	r1, #128	; 0x80
 80032ce:	0249      	lsls	r1, r1, #9
 80032d0:	430a      	orrs	r2, r1
 80032d2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032d4:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032d6:	6a1a      	ldr	r2, [r3, #32]
 80032d8:	4b42      	ldr	r3, [pc, #264]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032da:	4945      	ldr	r1, [pc, #276]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80032dc:	400a      	ands	r2, r1
 80032de:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80032e0:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2201      	movs	r2, #1
 80032ea:	4013      	ands	r3, r2
 80032ec:	d013      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fe fa33 	bl	8001758 <HAL_GetTick>
 80032f2:	0003      	movs	r3, r0
 80032f4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	e009      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fe fa2e 	bl	8001758 <HAL_GetTick>
 80032fc:	0002      	movs	r2, r0
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	4a3c      	ldr	r2, [pc, #240]	; (80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d901      	bls.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e067      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330c:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800330e:	6a1b      	ldr	r3, [r3, #32]
 8003310:	2202      	movs	r2, #2
 8003312:	4013      	ands	r3, r2
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003316:	4b33      	ldr	r3, [pc, #204]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003318:	6a1b      	ldr	r3, [r3, #32]
 800331a:	4a34      	ldr	r2, [pc, #208]	; (80033ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800331c:	4013      	ands	r3, r2
 800331e:	0019      	movs	r1, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003326:	430a      	orrs	r2, r1
 8003328:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800332a:	2317      	movs	r3, #23
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d105      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003334:	4b2b      	ldr	r3, [pc, #172]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003336:	69da      	ldr	r2, [r3, #28]
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800333a:	492f      	ldr	r1, [pc, #188]	; (80033f8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800333c:	400a      	ands	r2, r1
 800333e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2201      	movs	r2, #1
 8003346:	4013      	ands	r3, r2
 8003348:	d009      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800334a:	4b26      	ldr	r3, [pc, #152]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	2203      	movs	r2, #3
 8003350:	4393      	bics	r3, r2
 8003352:	0019      	movs	r1, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	4b22      	ldr	r3, [pc, #136]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800335a:	430a      	orrs	r2, r1
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2202      	movs	r2, #2
 8003364:	4013      	ands	r3, r2
 8003366:	d009      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	4a23      	ldr	r2, [pc, #140]	; (80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800336e:	4013      	ands	r3, r2
 8003370:	0019      	movs	r1, r3
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	4b1b      	ldr	r3, [pc, #108]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003378:	430a      	orrs	r2, r1
 800337a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	2380      	movs	r3, #128	; 0x80
 8003382:	02db      	lsls	r3, r3, #11
 8003384:	4013      	ands	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003388:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800338e:	4013      	ands	r3, r2
 8003390:	0019      	movs	r1, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003398:	430a      	orrs	r2, r1
 800339a:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2220      	movs	r2, #32
 80033a2:	4013      	ands	r3, r2
 80033a4:	d009      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033a6:	4b0f      	ldr	r3, [pc, #60]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	2210      	movs	r2, #16
 80033ac:	4393      	bics	r3, r2
 80033ae:	0019      	movs	r1, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	695a      	ldr	r2, [r3, #20]
 80033b4:	4b0b      	ldr	r3, [pc, #44]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033b6:	430a      	orrs	r2, r1
 80033b8:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4013      	ands	r3, r2
 80033c4:	d009      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033c6:	4b07      	ldr	r3, [pc, #28]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ca:	2240      	movs	r2, #64	; 0x40
 80033cc:	4393      	bics	r3, r2
 80033ce:	0019      	movs	r1, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699a      	ldr	r2, [r3, #24]
 80033d4:	4b03      	ldr	r3, [pc, #12]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80033d6:	430a      	orrs	r2, r1
 80033d8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	0018      	movs	r0, r3
 80033de:	46bd      	mov	sp, r7
 80033e0:	b006      	add	sp, #24
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40007000 	.word	0x40007000
 80033ec:	fffffcff 	.word	0xfffffcff
 80033f0:	fffeffff 	.word	0xfffeffff
 80033f4:	00001388 	.word	0x00001388
 80033f8:	efffffff 	.word	0xefffffff
 80033fc:	fffcffff 	.word	0xfffcffff
 8003400:	fff3ffff 	.word	0xfff3ffff

08003404 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e0a8      	b.n	8003568 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d109      	bne.n	8003432 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685a      	ldr	r2, [r3, #4]
 8003422:	2382      	movs	r3, #130	; 0x82
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	429a      	cmp	r2, r3
 8003428:	d009      	beq.n	800343e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	61da      	str	r2, [r3, #28]
 8003430:	e005      	b.n	800343e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	225d      	movs	r2, #93	; 0x5d
 8003448:	5c9b      	ldrb	r3, [r3, r2]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	d107      	bne.n	8003460 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	225c      	movs	r2, #92	; 0x5c
 8003454:	2100      	movs	r1, #0
 8003456:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f7fd fd28 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	225d      	movs	r2, #93	; 0x5d
 8003464:	2102      	movs	r1, #2
 8003466:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2140      	movs	r1, #64	; 0x40
 8003474:	438a      	bics	r2, r1
 8003476:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	68da      	ldr	r2, [r3, #12]
 800347c:	23e0      	movs	r3, #224	; 0xe0
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	429a      	cmp	r2, r3
 8003482:	d902      	bls.n	800348a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e002      	b.n	8003490 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800348a:	2380      	movs	r3, #128	; 0x80
 800348c:	015b      	lsls	r3, r3, #5
 800348e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68da      	ldr	r2, [r3, #12]
 8003494:	23f0      	movs	r3, #240	; 0xf0
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	429a      	cmp	r2, r3
 800349a:	d008      	beq.n	80034ae <HAL_SPI_Init+0xaa>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	23e0      	movs	r3, #224	; 0xe0
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d002      	beq.n	80034ae <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	2382      	movs	r3, #130	; 0x82
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	401a      	ands	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6899      	ldr	r1, [r3, #8]
 80034bc:	2384      	movs	r3, #132	; 0x84
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	400b      	ands	r3, r1
 80034c2:	431a      	orrs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	2102      	movs	r1, #2
 80034ca:	400b      	ands	r3, r1
 80034cc:	431a      	orrs	r2, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	2101      	movs	r1, #1
 80034d4:	400b      	ands	r3, r1
 80034d6:	431a      	orrs	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6999      	ldr	r1, [r3, #24]
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	400b      	ands	r3, r1
 80034e2:	431a      	orrs	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	69db      	ldr	r3, [r3, #28]
 80034e8:	2138      	movs	r1, #56	; 0x38
 80034ea:	400b      	ands	r3, r1
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	2180      	movs	r1, #128	; 0x80
 80034f4:	400b      	ands	r3, r1
 80034f6:	431a      	orrs	r2, r3
 80034f8:	0011      	movs	r1, r2
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fe:	2380      	movs	r3, #128	; 0x80
 8003500:	019b      	lsls	r3, r3, #6
 8003502:	401a      	ands	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	0c1b      	lsrs	r3, r3, #16
 8003512:	2204      	movs	r2, #4
 8003514:	401a      	ands	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2110      	movs	r1, #16
 800351c:	400b      	ands	r3, r1
 800351e:	431a      	orrs	r2, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003524:	2108      	movs	r1, #8
 8003526:	400b      	ands	r3, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68d9      	ldr	r1, [r3, #12]
 800352e:	23f0      	movs	r3, #240	; 0xf0
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	400b      	ands	r3, r1
 8003534:	431a      	orrs	r2, r3
 8003536:	0011      	movs	r1, r2
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	015b      	lsls	r3, r3, #5
 800353e:	401a      	ands	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4907      	ldr	r1, [pc, #28]	; (8003570 <HAL_SPI_Init+0x16c>)
 8003554:	400a      	ands	r2, r1
 8003556:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	225d      	movs	r2, #93	; 0x5d
 8003562:	2101      	movs	r1, #1
 8003564:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b004      	add	sp, #16
 800356e:	bd80      	pop	{r7, pc}
 8003570:	fffff7ff 	.word	0xfffff7ff

08003574 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	603b      	str	r3, [r7, #0]
 8003580:	1dbb      	adds	r3, r7, #6
 8003582:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003584:	231f      	movs	r3, #31
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	2200      	movs	r2, #0
 800358a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	225c      	movs	r2, #92	; 0x5c
 8003590:	5c9b      	ldrb	r3, [r3, r2]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d101      	bne.n	800359a <HAL_SPI_Transmit+0x26>
 8003596:	2302      	movs	r3, #2
 8003598:	e147      	b.n	800382a <HAL_SPI_Transmit+0x2b6>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	225c      	movs	r2, #92	; 0x5c
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035a2:	f7fe f8d9 	bl	8001758 <HAL_GetTick>
 80035a6:	0003      	movs	r3, r0
 80035a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80035aa:	2316      	movs	r3, #22
 80035ac:	18fb      	adds	r3, r7, r3
 80035ae:	1dba      	adds	r2, r7, #6
 80035b0:	8812      	ldrh	r2, [r2, #0]
 80035b2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	225d      	movs	r2, #93	; 0x5d
 80035b8:	5c9b      	ldrb	r3, [r3, r2]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d004      	beq.n	80035ca <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80035c0:	231f      	movs	r3, #31
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	2202      	movs	r2, #2
 80035c6:	701a      	strb	r2, [r3, #0]
    goto error;
 80035c8:	e128      	b.n	800381c <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_SPI_Transmit+0x64>
 80035d0:	1dbb      	adds	r3, r7, #6
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80035d8:	231f      	movs	r3, #31
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
    goto error;
 80035e0:	e11c      	b.n	800381c <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	225d      	movs	r2, #93	; 0x5d
 80035e6:	2103      	movs	r1, #3
 80035e8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	1dba      	adds	r2, r7, #6
 80035fa:	8812      	ldrh	r2, [r2, #0]
 80035fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	1dba      	adds	r2, r7, #6
 8003602:	8812      	ldrh	r2, [r2, #0]
 8003604:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2244      	movs	r2, #68	; 0x44
 8003610:	2100      	movs	r1, #0
 8003612:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2246      	movs	r2, #70	; 0x46
 8003618:	2100      	movs	r1, #0
 800361a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	429a      	cmp	r2, r3
 8003632:	d110      	bne.n	8003656 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2140      	movs	r1, #64	; 0x40
 8003640:	438a      	bics	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2180      	movs	r1, #128	; 0x80
 8003650:	01c9      	lsls	r1, r1, #7
 8003652:	430a      	orrs	r2, r1
 8003654:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2240      	movs	r2, #64	; 0x40
 800365e:	4013      	ands	r3, r2
 8003660:	2b40      	cmp	r3, #64	; 0x40
 8003662:	d007      	beq.n	8003674 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2140      	movs	r1, #64	; 0x40
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	68da      	ldr	r2, [r3, #12]
 8003678:	23e0      	movs	r3, #224	; 0xe0
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	429a      	cmp	r2, r3
 800367e:	d952      	bls.n	8003726 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d004      	beq.n	8003692 <HAL_SPI_Transmit+0x11e>
 8003688:	2316      	movs	r3, #22
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	881b      	ldrh	r3, [r3, #0]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d143      	bne.n	800371a <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036a2:	1c9a      	adds	r2, r3, #2
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80036b6:	e030      	b.n	800371a <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2202      	movs	r2, #2
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d112      	bne.n	80036ec <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d6:	1c9a      	adds	r2, r3, #2
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036ea:	e016      	b.n	800371a <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ec:	f7fe f834 	bl	8001758 <HAL_GetTick>
 80036f0:	0002      	movs	r2, r0
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d802      	bhi.n	8003702 <HAL_SPI_Transmit+0x18e>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	d102      	bne.n	8003708 <HAL_SPI_Transmit+0x194>
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d108      	bne.n	800371a <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003708:	231f      	movs	r3, #31
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	2203      	movs	r2, #3
 800370e:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	225d      	movs	r2, #93	; 0x5d
 8003714:	2101      	movs	r1, #1
 8003716:	5499      	strb	r1, [r3, r2]
          goto error;
 8003718:	e080      	b.n	800381c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1c9      	bne.n	80036b8 <HAL_SPI_Transmit+0x144>
 8003724:	e053      	b.n	80037ce <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d004      	beq.n	8003738 <HAL_SPI_Transmit+0x1c4>
 800372e:	2316      	movs	r3, #22
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	881b      	ldrh	r3, [r3, #0]
 8003734:	2b01      	cmp	r3, #1
 8003736:	d145      	bne.n	80037c4 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	330c      	adds	r3, #12
 8003742:	7812      	ldrb	r2, [r2, #0]
 8003744:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800375e:	e031      	b.n	80037c4 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d113      	bne.n	8003796 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	330c      	adds	r3, #12
 8003778:	7812      	ldrb	r2, [r2, #0]
 800377a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	1c5a      	adds	r2, r3, #1
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003794:	e016      	b.n	80037c4 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003796:	f7fd ffdf 	bl	8001758 <HAL_GetTick>
 800379a:	0002      	movs	r2, r0
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d802      	bhi.n	80037ac <HAL_SPI_Transmit+0x238>
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	d102      	bne.n	80037b2 <HAL_SPI_Transmit+0x23e>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d108      	bne.n	80037c4 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 80037b2:	231f      	movs	r3, #31
 80037b4:	18fb      	adds	r3, r7, r3
 80037b6:	2203      	movs	r2, #3
 80037b8:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	225d      	movs	r2, #93	; 0x5d
 80037be:	2101      	movs	r1, #1
 80037c0:	5499      	strb	r1, [r3, r2]
          goto error;
 80037c2:	e02b      	b.n	800381c <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1c8      	bne.n	8003760 <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	6839      	ldr	r1, [r7, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	0018      	movs	r0, r3
 80037d6:	f000 fda9 	bl	800432c <SPI_EndRxTxTransaction>
 80037da:	1e03      	subs	r3, r0, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2220      	movs	r2, #32
 80037e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10a      	bne.n	8003802 <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003806:	2b00      	cmp	r3, #0
 8003808:	d004      	beq.n	8003814 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 800380a:	231f      	movs	r3, #31
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
 8003812:	e003      	b.n	800381c <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	225d      	movs	r2, #93	; 0x5d
 8003818:	2101      	movs	r1, #1
 800381a:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	225c      	movs	r2, #92	; 0x5c
 8003820:	2100      	movs	r1, #0
 8003822:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003824:	231f      	movs	r3, #31
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b008      	add	sp, #32
 8003830:	bd80      	pop	{r7, pc}
	...

08003834 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003834:	b590      	push	{r4, r7, lr}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	1dbb      	adds	r3, r7, #6
 8003840:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003842:	2117      	movs	r1, #23
 8003844:	187b      	adds	r3, r7, r1
 8003846:	2200      	movs	r2, #0
 8003848:	701a      	strb	r2, [r3, #0]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));
  
  if (hspi->State != HAL_SPI_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	225d      	movs	r2, #93	; 0x5d
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d003      	beq.n	800385e <HAL_SPI_Receive_DMA+0x2a>
  {
    errorcode = HAL_BUSY;
 8003856:	187b      	adds	r3, r7, r1
 8003858:	2202      	movs	r2, #2
 800385a:	701a      	strb	r2, [r3, #0]
    goto error;
 800385c:	e10c      	b.n	8003a78 <HAL_SPI_Receive_DMA+0x244>
  }
  
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d112      	bne.n	800388c <HAL_SPI_Receive_DMA+0x58>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685a      	ldr	r2, [r3, #4]
 800386a:	2382      	movs	r3, #130	; 0x82
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	429a      	cmp	r2, r3
 8003870:	d10c      	bne.n	800388c <HAL_SPI_Receive_DMA+0x58>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	225d      	movs	r2, #93	; 0x5d
 8003876:	2104      	movs	r1, #4
 8003878:	5499      	strb	r1, [r3, r2]

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800387a:	1dbb      	adds	r3, r7, #6
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	68b9      	ldr	r1, [r7, #8]
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f910 	bl	8003aa8 <HAL_SPI_TransmitReceive_DMA>
 8003888:	0003      	movs	r3, r0
 800388a:	e0fc      	b.n	8003a86 <HAL_SPI_Receive_DMA+0x252>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	225c      	movs	r2, #92	; 0x5c
 8003890:	5c9b      	ldrb	r3, [r3, r2]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d101      	bne.n	800389a <HAL_SPI_Receive_DMA+0x66>
 8003896:	2302      	movs	r3, #2
 8003898:	e0f5      	b.n	8003a86 <HAL_SPI_Receive_DMA+0x252>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	225c      	movs	r2, #92	; 0x5c
 800389e:	2101      	movs	r1, #1
 80038a0:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_SPI_Receive_DMA+0x7c>
 80038a8:	1dbb      	adds	r3, r7, #6
 80038aa:	881b      	ldrh	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d104      	bne.n	80038ba <HAL_SPI_Receive_DMA+0x86>
  {
    errorcode = HAL_ERROR;
 80038b0:	2317      	movs	r3, #23
 80038b2:	18fb      	adds	r3, r7, r3
 80038b4:	2201      	movs	r2, #1
 80038b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80038b8:	e0de      	b.n	8003a78 <HAL_SPI_Receive_DMA+0x244>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	225d      	movs	r2, #93	; 0x5d
 80038be:	2104      	movs	r1, #4
 80038c0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	1dba      	adds	r2, r7, #6
 80038d2:	2144      	movs	r1, #68	; 0x44
 80038d4:	8812      	ldrh	r2, [r2, #0]
 80038d6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	1dba      	adds	r2, r7, #6
 80038dc:	2146      	movs	r1, #70	; 0x46
 80038de:	8812      	ldrh	r2, [r2, #0]
 80038e0:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2200      	movs	r2, #0
 80038f8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	429a      	cmp	r2, r3
 8003904:	d10f      	bne.n	8003926 <HAL_SPI_Receive_DMA+0xf2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2140      	movs	r1, #64	; 0x40
 8003912:	438a      	bics	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	495b      	ldr	r1, [pc, #364]	; (8003a90 <HAL_SPI_Receive_DMA+0x25c>)
 8003922:	400a      	ands	r2, r1
 8003924:	601a      	str	r2, [r3, #0]
    errorcode = HAL_ERROR;
    goto error;
  }
#endif /* STM32F030x6 || STM32F030x8 || STM32F031x6 || STM32F038xx || STM32F051x8 || STM32F058xx */

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4958      	ldr	r1, [pc, #352]	; (8003a94 <HAL_SPI_Receive_DMA+0x260>)
 8003932:	400a      	ands	r2, r1
 8003934:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	23e0      	movs	r3, #224	; 0xe0
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	429a      	cmp	r2, r3
 8003940:	d908      	bls.n	8003954 <HAL_SPI_Receive_DMA+0x120>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4952      	ldr	r1, [pc, #328]	; (8003a98 <HAL_SPI_Receive_DMA+0x264>)
 800394e:	400a      	ands	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	e045      	b.n	80039e0 <HAL_SPI_Receive_DMA+0x1ac>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2180      	movs	r1, #128	; 0x80
 8003960:	0149      	lsls	r1, r1, #5
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	695a      	ldr	r2, [r3, #20]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	429a      	cmp	r2, r3
 8003972:	d135      	bne.n	80039e0 <HAL_SPI_Receive_DMA+0x1ac>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4946      	ldr	r1, [pc, #280]	; (8003a98 <HAL_SPI_Receive_DMA+0x264>)
 8003980:	400a      	ands	r2, r1
 8003982:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2246      	movs	r2, #70	; 0x46
 8003988:	5a9b      	ldrh	r3, [r3, r2]
 800398a:	b29b      	uxth	r3, r3
 800398c:	001a      	movs	r2, r3
 800398e:	2301      	movs	r3, #1
 8003990:	4013      	ands	r3, r2
 8003992:	d111      	bne.n	80039b8 <HAL_SPI_Receive_DMA+0x184>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	493d      	ldr	r1, [pc, #244]	; (8003a94 <HAL_SPI_Receive_DMA+0x260>)
 80039a0:	400a      	ands	r2, r1
 80039a2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2246      	movs	r2, #70	; 0x46
 80039a8:	5a9b      	ldrh	r3, [r3, r2]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	b299      	uxth	r1, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2246      	movs	r2, #70	; 0x46
 80039b4:	5299      	strh	r1, [r3, r2]
 80039b6:	e013      	b.n	80039e0 <HAL_SPI_Receive_DMA+0x1ac>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685a      	ldr	r2, [r3, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2180      	movs	r1, #128	; 0x80
 80039c4:	0189      	lsls	r1, r1, #6
 80039c6:	430a      	orrs	r2, r1
 80039c8:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2246      	movs	r2, #70	; 0x46
 80039ce:	5a9b      	ldrh	r3, [r3, r2]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3301      	adds	r3, #1
 80039d8:	b299      	uxth	r1, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2246      	movs	r2, #70	; 0x46
 80039de:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	4a2d      	ldr	r2, [pc, #180]	; (8003a9c <HAL_SPI_Receive_DMA+0x268>)
 80039e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	4a2c      	ldr	r2, [pc, #176]	; (8003aa0 <HAL_SPI_Receive_DMA+0x26c>)
 80039ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f4:	4a2b      	ldr	r2, [pc, #172]	; (8003aa4 <HAL_SPI_Receive_DMA+0x270>)
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fc:	2200      	movs	r2, #0
 80039fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	330c      	adds	r3, #12
 8003a0a:	0019      	movs	r1, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a10:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2246      	movs	r2, #70	; 0x46
 8003a16:	5a9b      	ldrh	r3, [r3, r2]
 8003a18:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003a1a:	0022      	movs	r2, r4
 8003a1c:	f7fe fbe0 	bl	80021e0 <HAL_DMA_Start_IT>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d00a      	beq.n	8003a3a <HAL_SPI_Receive_DMA+0x206>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a28:	2210      	movs	r2, #16
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003a30:	2317      	movs	r3, #23
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	2201      	movs	r2, #1
 8003a36:	701a      	strb	r2, [r3, #0]

    goto error;
 8003a38:	e01e      	b.n	8003a78 <HAL_SPI_Receive_DMA+0x244>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2240      	movs	r2, #64	; 0x40
 8003a42:	4013      	ands	r3, r2
 8003a44:	2b40      	cmp	r3, #64	; 0x40
 8003a46:	d007      	beq.n	8003a58 <HAL_SPI_Receive_DMA+0x224>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2140      	movs	r1, #64	; 0x40
 8003a54:	430a      	orrs	r2, r1
 8003a56:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2120      	movs	r1, #32
 8003a64:	430a      	orrs	r2, r1
 8003a66:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	685a      	ldr	r2, [r3, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2101      	movs	r1, #1
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	225c      	movs	r2, #92	; 0x5c
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003a80:	2317      	movs	r3, #23
 8003a82:	18fb      	adds	r3, r7, r3
 8003a84:	781b      	ldrb	r3, [r3, #0]
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b007      	add	sp, #28
 8003a8c:	bd90      	pop	{r4, r7, pc}
 8003a8e:	46c0      	nop			; (mov r8, r8)
 8003a90:	ffffbfff 	.word	0xffffbfff
 8003a94:	ffffdfff 	.word	0xffffdfff
 8003a98:	ffffefff 	.word	0xffffefff
 8003a9c:	08003f93 	.word	0x08003f93
 8003aa0:	08003e4d 	.word	0x08003e4d
 8003aa4:	08003fcf 	.word	0x08003fcf

08003aa8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003aa8:	b590      	push	{r4, r7, lr}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
 8003ab4:	001a      	movs	r2, r3
 8003ab6:	1cbb      	adds	r3, r7, #2
 8003ab8:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003aba:	2317      	movs	r3, #23
 8003abc:	18fb      	adds	r3, r7, r3
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	225c      	movs	r2, #92	; 0x5c
 8003ac6:	5c9b      	ldrb	r3, [r3, r2]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_SPI_TransmitReceive_DMA+0x28>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e17e      	b.n	8003dce <HAL_SPI_TransmitReceive_DMA+0x326>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	225c      	movs	r2, #92	; 0x5c
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ad8:	2016      	movs	r0, #22
 8003ada:	183b      	adds	r3, r7, r0
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	215d      	movs	r1, #93	; 0x5d
 8003ae0:	5c52      	ldrb	r2, [r2, r1]
 8003ae2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003aea:	0001      	movs	r1, r0
 8003aec:	187b      	adds	r3, r7, r1
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d011      	beq.n	8003b18 <HAL_SPI_TransmitReceive_DMA+0x70>
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	2382      	movs	r3, #130	; 0x82
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d107      	bne.n	8003b0e <HAL_SPI_TransmitReceive_DMA+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <HAL_SPI_TransmitReceive_DMA+0x66>
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2b04      	cmp	r3, #4
 8003b0c:	d004      	beq.n	8003b18 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_BUSY;
 8003b0e:	2317      	movs	r3, #23
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	2202      	movs	r2, #2
 8003b14:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b16:	e153      	b.n	8003dc0 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d006      	beq.n	8003b2c <HAL_SPI_TransmitReceive_DMA+0x84>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_SPI_TransmitReceive_DMA+0x84>
 8003b24:	1cbb      	adds	r3, r7, #2
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d104      	bne.n	8003b36 <HAL_SPI_TransmitReceive_DMA+0x8e>
  {
    errorcode = HAL_ERROR;
 8003b2c:	2317      	movs	r3, #23
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2201      	movs	r2, #1
 8003b32:	701a      	strb	r2, [r3, #0]
    goto error;
 8003b34:	e144      	b.n	8003dc0 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	225d      	movs	r2, #93	; 0x5d
 8003b3a:	5c9b      	ldrb	r3, [r3, r2]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d003      	beq.n	8003b4a <HAL_SPI_TransmitReceive_DMA+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	225d      	movs	r2, #93	; 0x5d
 8003b46:	2105      	movs	r1, #5
 8003b48:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1cba      	adds	r2, r7, #2
 8003b5a:	8812      	ldrh	r2, [r2, #0]
 8003b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1cba      	adds	r2, r7, #2
 8003b62:	8812      	ldrh	r2, [r2, #0]
 8003b64:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1cba      	adds	r2, r7, #2
 8003b70:	2144      	movs	r1, #68	; 0x44
 8003b72:	8812      	ldrh	r2, [r2, #0]
 8003b74:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1cba      	adds	r2, r7, #2
 8003b7a:	2146      	movs	r1, #70	; 0x46
 8003b7c:	8812      	ldrh	r2, [r2, #0]
 8003b7e:	525a      	strh	r2, [r3, r1]

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	651a      	str	r2, [r3, #80]	; 0x50
    goto error;
  }
#endif /* STM32F030x6 || STM32F030x8 || STM32F031x6 || STM32F038xx || STM32F051x8 || STM32F058xx */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4990      	ldr	r1, [pc, #576]	; (8003dd8 <HAL_SPI_TransmitReceive_DMA+0x330>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68da      	ldr	r2, [r3, #12]
 8003ba0:	23e0      	movs	r3, #224	; 0xe0
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d908      	bls.n	8003bba <HAL_SPI_TransmitReceive_DMA+0x112>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	498a      	ldr	r1, [pc, #552]	; (8003ddc <HAL_SPI_TransmitReceive_DMA+0x334>)
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	605a      	str	r2, [r3, #4]
 8003bb8:	e074      	b.n	8003ca4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2180      	movs	r1, #128	; 0x80
 8003bc6:	0149      	lsls	r1, r1, #5
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d127      	bne.n	8003c2a <HAL_SPI_TransmitReceive_DMA+0x182>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003bde:	001a      	movs	r2, r3
 8003be0:	2301      	movs	r3, #1
 8003be2:	4013      	ands	r3, r2
 8003be4:	d10f      	bne.n	8003c06 <HAL_SPI_TransmitReceive_DMA+0x15e>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	497b      	ldr	r1, [pc, #492]	; (8003de0 <HAL_SPI_TransmitReceive_DMA+0x338>)
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	085b      	lsrs	r3, r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003c04:	e011      	b.n	8003c2a <HAL_SPI_TransmitReceive_DMA+0x182>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	01c9      	lsls	r1, r1, #7
 8003c14:	430a      	orrs	r2, r1
 8003c16:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	085b      	lsrs	r3, r3, #1
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3301      	adds	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2e:	695a      	ldr	r2, [r3, #20]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d135      	bne.n	8003ca4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4966      	ldr	r1, [pc, #408]	; (8003ddc <HAL_SPI_TransmitReceive_DMA+0x334>)
 8003c44:	400a      	ands	r2, r1
 8003c46:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2246      	movs	r2, #70	; 0x46
 8003c4c:	5a9b      	ldrh	r3, [r3, r2]
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	001a      	movs	r2, r3
 8003c52:	2301      	movs	r3, #1
 8003c54:	4013      	ands	r3, r2
 8003c56:	d111      	bne.n	8003c7c <HAL_SPI_TransmitReceive_DMA+0x1d4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685a      	ldr	r2, [r3, #4]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4960      	ldr	r1, [pc, #384]	; (8003de4 <HAL_SPI_TransmitReceive_DMA+0x33c>)
 8003c64:	400a      	ands	r2, r1
 8003c66:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2246      	movs	r2, #70	; 0x46
 8003c6c:	5a9b      	ldrh	r3, [r3, r2]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	b299      	uxth	r1, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2246      	movs	r2, #70	; 0x46
 8003c78:	5299      	strh	r1, [r3, r2]
 8003c7a:	e013      	b.n	8003ca4 <HAL_SPI_TransmitReceive_DMA+0x1fc>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2180      	movs	r1, #128	; 0x80
 8003c88:	0189      	lsls	r1, r1, #6
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2246      	movs	r2, #70	; 0x46
 8003c92:	5a9b      	ldrh	r3, [r3, r2]
 8003c94:	b29b      	uxth	r3, r3
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	b299      	uxth	r1, r3
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2246      	movs	r2, #70	; 0x46
 8003ca2:	5299      	strh	r1, [r3, r2]
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	225d      	movs	r2, #93	; 0x5d
 8003ca8:	5c9b      	ldrb	r3, [r3, r2]
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	2b04      	cmp	r3, #4
 8003cae:	d108      	bne.n	8003cc2 <HAL_SPI_TransmitReceive_DMA+0x21a>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	4a4c      	ldr	r2, [pc, #304]	; (8003de8 <HAL_SPI_TransmitReceive_DMA+0x340>)
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	4a4b      	ldr	r2, [pc, #300]	; (8003dec <HAL_SPI_TransmitReceive_DMA+0x344>)
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8003cc0:	e007      	b.n	8003cd2 <HAL_SPI_TransmitReceive_DMA+0x22a>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc6:	4a4a      	ldr	r2, [pc, #296]	; (8003df0 <HAL_SPI_TransmitReceive_DMA+0x348>)
 8003cc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cce:	4a49      	ldr	r2, [pc, #292]	; (8003df4 <HAL_SPI_TransmitReceive_DMA+0x34c>)
 8003cd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cd6:	4a48      	ldr	r2, [pc, #288]	; (8003df8 <HAL_SPI_TransmitReceive_DMA+0x350>)
 8003cd8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cde:	2200      	movs	r2, #0
 8003ce0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	330c      	adds	r3, #12
 8003cec:	0019      	movs	r1, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	001c      	movs	r4, r3
                                 hspi->RxXferCount))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2246      	movs	r2, #70	; 0x46
 8003cf8:	5a9b      	ldrh	r3, [r3, r2]
 8003cfa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003cfc:	0022      	movs	r2, r4
 8003cfe:	f7fe fa6f 	bl	80021e0 <HAL_DMA_Start_IT>
 8003d02:	1e03      	subs	r3, r0, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_SPI_TransmitReceive_DMA+0x274>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	431a      	orrs	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003d12:	2317      	movs	r3, #23
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]

    goto error;
 8003d1a:	e051      	b.n	8003dc0 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2101      	movs	r1, #1
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d30:	2200      	movs	r2, #0
 8003d32:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferCpltCallback     = NULL;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d38:	2200      	movs	r2, #0
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d40:	2200      	movs	r2, #0
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferAbortCallback    = NULL;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	2200      	movs	r2, #0
 8003d4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d54:	0019      	movs	r1, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	001a      	movs	r2, r3
                                 hspi->TxXferCount))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d62:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003d64:	f7fe fa3c 	bl	80021e0 <HAL_DMA_Start_IT>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d00a      	beq.n	8003d82 <HAL_SPI_TransmitReceive_DMA+0x2da>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d70:	2210      	movs	r2, #16
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8003d78:	2317      	movs	r3, #23
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]

    goto error;
 8003d80:	e01e      	b.n	8003dc0 <HAL_SPI_TransmitReceive_DMA+0x318>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2240      	movs	r2, #64	; 0x40
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b40      	cmp	r3, #64	; 0x40
 8003d8e:	d007      	beq.n	8003da0 <HAL_SPI_TransmitReceive_DMA+0x2f8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2140      	movs	r1, #64	; 0x40
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2120      	movs	r1, #32
 8003dac:	430a      	orrs	r2, r1
 8003dae:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2102      	movs	r1, #2
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	225c      	movs	r2, #92	; 0x5c
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003dc8:	2317      	movs	r3, #23
 8003dca:	18fb      	adds	r3, r7, r3
 8003dcc:	781b      	ldrb	r3, [r3, #0]
}
 8003dce:	0018      	movs	r0, r3
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	b007      	add	sp, #28
 8003dd4:	bd90      	pop	{r4, r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	ffff9fff 	.word	0xffff9fff
 8003ddc:	ffffefff 	.word	0xffffefff
 8003de0:	ffffbfff 	.word	0xffffbfff
 8003de4:	ffffdfff 	.word	0xffffdfff
 8003de8:	08003f93 	.word	0x08003f93
 8003dec:	08003e4d 	.word	0x08003e4d
 8003df0:	08003fb1 	.word	0x08003fb1
 8003df4:	08003efd 	.word	0x08003efd
 8003df8:	08003fcf 	.word	0x08003fcf

08003dfc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003e14:	46c0      	nop			; (mov r8, r8)
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b002      	add	sp, #8
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b082      	sub	sp, #8
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003e24:	46c0      	nop			; (mov r8, r8)
 8003e26:	46bd      	mov	sp, r7
 8003e28:	b002      	add	sp, #8
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003e34:	46c0      	nop			; (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e44:	46c0      	nop			; (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b002      	add	sp, #8
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b084      	sub	sp, #16
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e5a:	f7fd fc7d 	bl	8001758 <HAL_GetTick>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2220      	movs	r2, #32
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d03e      	beq.n	8003eee <SPI_DMAReceiveCplt+0xa2>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2120      	movs	r1, #32
 8003e7c:	438a      	bics	r2, r1
 8003e7e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10e      	bne.n	8003ea6 <SPI_DMAReceiveCplt+0x5a>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	2382      	movs	r3, #130	; 0x82
 8003e8e:	005b      	lsls	r3, r3, #1
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d108      	bne.n	8003ea6 <SPI_DMAReceiveCplt+0x5a>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2103      	movs	r1, #3
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	605a      	str	r2, [r3, #4]
 8003ea4:	e007      	b.n	8003eb6 <SPI_DMAReceiveCplt+0x6a>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	685a      	ldr	r2, [r3, #4]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	438a      	bics	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2164      	movs	r1, #100	; 0x64
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f000 f9d7 	bl	8004270 <SPI_EndRxTransaction>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d002      	beq.n	8003ecc <SPI_DMAReceiveCplt+0x80>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2220      	movs	r2, #32
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2246      	movs	r2, #70	; 0x46
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	225d      	movs	r2, #93	; 0x5d
 8003ed8:	2101      	movs	r1, #1
 8003eda:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d004      	beq.n	8003eee <SPI_DMAReceiveCplt+0xa2>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff ffa8 	bl	8003e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003eec:	e003      	b.n	8003ef6 <SPI_DMAReceiveCplt+0xaa>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7ff ff83 	bl	8003dfc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b004      	add	sp, #16
 8003efa:	bd80      	pop	{r7, pc}

08003efc <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f0a:	f7fd fc25 	bl	8001758 <HAL_GetTick>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	60bb      	str	r3, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b20      	cmp	r3, #32
 8003f1e:	d031      	beq.n	8003f84 <SPI_DMATransmitReceiveCplt+0x88>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2120      	movs	r1, #32
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2164      	movs	r1, #100	; 0x64
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 f9f8 	bl	800432c <SPI_EndRxTxTransaction>
 8003f3c:	1e03      	subs	r3, r0, #0
 8003f3e:	d005      	beq.n	8003f4c <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f44:	2220      	movs	r2, #32
 8003f46:	431a      	orrs	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685a      	ldr	r2, [r3, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2103      	movs	r1, #3
 8003f58:	438a      	bics	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2246      	movs	r2, #70	; 0x46
 8003f66:	2100      	movs	r1, #0
 8003f68:	5299      	strh	r1, [r3, r2]
    hspi->State = HAL_SPI_STATE_READY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	225d      	movs	r2, #93	; 0x5d
 8003f6e:	2101      	movs	r1, #1
 8003f70:	5499      	strb	r1, [r3, r2]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <SPI_DMATransmitReceiveCplt+0x88>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f7ff ff5d 	bl	8003e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8003f82:	e003      	b.n	8003f8c <SPI_DMATransmitReceiveCplt+0x90>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	0018      	movs	r0, r3
 8003f88:	f7ff ff40 	bl	8003e0c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b004      	add	sp, #16
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f7ff ff3a 	bl	8003e1c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fa8:	46c0      	nop			; (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b004      	add	sp, #16
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	0018      	movs	r0, r3
 8003fc2:	f7ff ff33 	bl	8003e2c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	2103      	movs	r1, #3
 8003fe8:	438a      	bics	r2, r1
 8003fea:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	225d      	movs	r2, #93	; 0x5d
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	5499      	strb	r1, [r3, r2]
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff ff1a 	bl	8003e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b004      	add	sp, #16
 800400e:	bd80      	pop	{r7, pc}

08004010 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	60b9      	str	r1, [r7, #8]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	1dfb      	adds	r3, r7, #7
 800401e:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004020:	f7fd fb9a 	bl	8001758 <HAL_GetTick>
 8004024:	0002      	movs	r2, r0
 8004026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004028:	1a9b      	subs	r3, r3, r2
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	18d3      	adds	r3, r2, r3
 800402e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004030:	f7fd fb92 	bl	8001758 <HAL_GetTick>
 8004034:	0003      	movs	r3, r0
 8004036:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004038:	4b3a      	ldr	r3, [pc, #232]	; (8004124 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	015b      	lsls	r3, r3, #5
 800403e:	0d1b      	lsrs	r3, r3, #20
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	4353      	muls	r3, r2
 8004044:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004046:	e058      	b.n	80040fa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	3301      	adds	r3, #1
 800404c:	d055      	beq.n	80040fa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800404e:	f7fd fb83 	bl	8001758 <HAL_GetTick>
 8004052:	0002      	movs	r2, r0
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	429a      	cmp	r2, r3
 800405c:	d902      	bls.n	8004064 <SPI_WaitFlagStateUntilTimeout+0x54>
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d142      	bne.n	80040ea <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	21e0      	movs	r1, #224	; 0xe0
 8004070:	438a      	bics	r2, r1
 8004072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	2382      	movs	r3, #130	; 0x82
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	429a      	cmp	r2, r3
 800407e:	d113      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x98>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	021b      	lsls	r3, r3, #8
 8004088:	429a      	cmp	r2, r3
 800408a:	d005      	beq.n	8004098 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	429a      	cmp	r2, r3
 8004096:	d107      	bne.n	80040a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2140      	movs	r1, #64	; 0x40
 80040a4:	438a      	bics	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ac:	2380      	movs	r3, #128	; 0x80
 80040ae:	019b      	lsls	r3, r3, #6
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d110      	bne.n	80040d6 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	491a      	ldr	r1, [pc, #104]	; (8004128 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2180      	movs	r1, #128	; 0x80
 80040d0:	0189      	lsls	r1, r1, #6
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	225d      	movs	r2, #93	; 0x5d
 80040da:	2101      	movs	r1, #1
 80040dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	225c      	movs	r2, #92	; 0x5c
 80040e2:	2100      	movs	r1, #0
 80040e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e017      	b.n	800411a <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	4013      	ands	r3, r2
 8004104:	68ba      	ldr	r2, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	425a      	negs	r2, r3
 800410a:	4153      	adcs	r3, r2
 800410c:	b2db      	uxtb	r3, r3
 800410e:	001a      	movs	r2, r3
 8004110:	1dfb      	adds	r3, r7, #7
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d197      	bne.n	8004048 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	0018      	movs	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	b008      	add	sp, #32
 8004120:	bd80      	pop	{r7, pc}
 8004122:	46c0      	nop			; (mov r8, r8)
 8004124:	20000004 	.word	0x20000004
 8004128:	ffffdfff 	.word	0xffffdfff

0800412c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b08a      	sub	sp, #40	; 0x28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
 8004138:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800413a:	2317      	movs	r3, #23
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2200      	movs	r2, #0
 8004140:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004142:	f7fd fb09 	bl	8001758 <HAL_GetTick>
 8004146:	0002      	movs	r2, r0
 8004148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800414a:	1a9b      	subs	r3, r3, r2
 800414c:	683a      	ldr	r2, [r7, #0]
 800414e:	18d3      	adds	r3, r2, r3
 8004150:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004152:	f7fd fb01 	bl	8001758 <HAL_GetTick>
 8004156:	0003      	movs	r3, r0
 8004158:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004162:	4b41      	ldr	r3, [pc, #260]	; (8004268 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	0013      	movs	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	189b      	adds	r3, r3, r2
 800416c:	00da      	lsls	r2, r3, #3
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	0d1b      	lsrs	r3, r3, #20
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	4353      	muls	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004178:	e068      	b.n	800424c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	23c0      	movs	r3, #192	; 0xc0
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	429a      	cmp	r2, r3
 8004182:	d10a      	bne.n	800419a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d107      	bne.n	800419a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	2117      	movs	r1, #23
 8004192:	187b      	adds	r3, r7, r1
 8004194:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004196:	187b      	adds	r3, r7, r1
 8004198:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	3301      	adds	r3, #1
 800419e:	d055      	beq.n	800424c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80041a0:	f7fd fada 	bl	8001758 <HAL_GetTick>
 80041a4:	0002      	movs	r2, r0
 80041a6:	6a3b      	ldr	r3, [r7, #32]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d902      	bls.n	80041b6 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80041b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d142      	bne.n	800423c <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	685a      	ldr	r2, [r3, #4]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	21e0      	movs	r1, #224	; 0xe0
 80041c2:	438a      	bics	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	2382      	movs	r3, #130	; 0x82
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d113      	bne.n	80041fa <SPI_WaitFifoStateUntilTimeout+0xce>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	2380      	movs	r3, #128	; 0x80
 80041d8:	021b      	lsls	r3, r3, #8
 80041da:	429a      	cmp	r2, r3
 80041dc:	d005      	beq.n	80041ea <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	2380      	movs	r3, #128	; 0x80
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d107      	bne.n	80041fa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2140      	movs	r1, #64	; 0x40
 80041f6:	438a      	bics	r2, r1
 80041f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041fe:	2380      	movs	r3, #128	; 0x80
 8004200:	019b      	lsls	r3, r3, #6
 8004202:	429a      	cmp	r2, r3
 8004204:	d110      	bne.n	8004228 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4916      	ldr	r1, [pc, #88]	; (800426c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004212:	400a      	ands	r2, r1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2180      	movs	r1, #128	; 0x80
 8004222:	0189      	lsls	r1, r1, #6
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	225d      	movs	r2, #93	; 0x5d
 800422c:	2101      	movs	r1, #1
 800422e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	225c      	movs	r2, #92	; 0x5c
 8004234:	2100      	movs	r1, #0
 8004236:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e010      	b.n	800425e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	3b01      	subs	r3, #1
 800424a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	4013      	ands	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	429a      	cmp	r2, r3
 800425a:	d18e      	bne.n	800417a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b00a      	add	sp, #40	; 0x28
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	20000004 	.word	0x20000004
 800426c:	ffffdfff 	.word	0xffffdfff

08004270 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	685a      	ldr	r2, [r3, #4]
 8004280:	2382      	movs	r3, #130	; 0x82
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	429a      	cmp	r2, r3
 8004286:	d113      	bne.n	80042b0 <SPI_EndRxTransaction+0x40>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	429a      	cmp	r2, r3
 8004292:	d005      	beq.n	80042a0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	2380      	movs	r3, #128	; 0x80
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	429a      	cmp	r2, r3
 800429e:	d107      	bne.n	80042b0 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2140      	movs	r1, #64	; 0x40
 80042ac:	438a      	bics	r2, r1
 80042ae:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	0013      	movs	r3, r2
 80042ba:	2200      	movs	r2, #0
 80042bc:	2180      	movs	r1, #128	; 0x80
 80042be:	f7ff fea7 	bl	8004010 <SPI_WaitFlagStateUntilTimeout>
 80042c2:	1e03      	subs	r3, r0, #0
 80042c4:	d007      	beq.n	80042d6 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ca:	2220      	movs	r2, #32
 80042cc:	431a      	orrs	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e026      	b.n	8004324 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	2382      	movs	r3, #130	; 0x82
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	429a      	cmp	r2, r3
 80042e0:	d11f      	bne.n	8004322 <SPI_EndRxTransaction+0xb2>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	2380      	movs	r3, #128	; 0x80
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d005      	beq.n	80042fa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	00db      	lsls	r3, r3, #3
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d113      	bne.n	8004322 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	23c0      	movs	r3, #192	; 0xc0
 80042fe:	00d9      	lsls	r1, r3, #3
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	0013      	movs	r3, r2
 8004308:	2200      	movs	r2, #0
 800430a:	f7ff ff0f 	bl	800412c <SPI_WaitFifoStateUntilTimeout>
 800430e:	1e03      	subs	r3, r0, #0
 8004310:	d007      	beq.n	8004322 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004316:	2220      	movs	r2, #32
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e000      	b.n	8004324 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	0018      	movs	r0, r3
 8004326:	46bd      	mov	sp, r7
 8004328:	b004      	add	sp, #16
 800432a:	bd80      	pop	{r7, pc}

0800432c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	23c0      	movs	r3, #192	; 0xc0
 800433c:	0159      	lsls	r1, r3, #5
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	0013      	movs	r3, r2
 8004346:	2200      	movs	r2, #0
 8004348:	f7ff fef0 	bl	800412c <SPI_WaitFifoStateUntilTimeout>
 800434c:	1e03      	subs	r3, r0, #0
 800434e:	d007      	beq.n	8004360 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004354:	2220      	movs	r2, #32
 8004356:	431a      	orrs	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e027      	b.n	80043b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	0013      	movs	r3, r2
 800436a:	2200      	movs	r2, #0
 800436c:	2180      	movs	r1, #128	; 0x80
 800436e:	f7ff fe4f 	bl	8004010 <SPI_WaitFlagStateUntilTimeout>
 8004372:	1e03      	subs	r3, r0, #0
 8004374:	d007      	beq.n	8004386 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800437a:	2220      	movs	r2, #32
 800437c:	431a      	orrs	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e014      	b.n	80043b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004386:	68ba      	ldr	r2, [r7, #8]
 8004388:	23c0      	movs	r3, #192	; 0xc0
 800438a:	00d9      	lsls	r1, r3, #3
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	0013      	movs	r3, r2
 8004394:	2200      	movs	r2, #0
 8004396:	f7ff fec9 	bl	800412c <SPI_WaitFifoStateUntilTimeout>
 800439a:	1e03      	subs	r3, r0, #0
 800439c:	d007      	beq.n	80043ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a2:	2220      	movs	r2, #32
 80043a4:	431a      	orrs	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e000      	b.n	80043b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b004      	add	sp, #16
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d101      	bne.n	80043ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e042      	b.n	8004450 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	223d      	movs	r2, #61	; 0x3d
 80043ce:	5c9b      	ldrb	r3, [r3, r2]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d107      	bne.n	80043e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	223c      	movs	r2, #60	; 0x3c
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	0018      	movs	r0, r3
 80043e2:	f7fc fff1 	bl	80013c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	223d      	movs	r2, #61	; 0x3d
 80043ea:	2102      	movs	r1, #2
 80043ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	3304      	adds	r3, #4
 80043f6:	0019      	movs	r1, r3
 80043f8:	0010      	movs	r0, r2
 80043fa:	f000 f9fb 	bl	80047f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2246      	movs	r2, #70	; 0x46
 8004402:	2101      	movs	r1, #1
 8004404:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	223e      	movs	r2, #62	; 0x3e
 800440a:	2101      	movs	r1, #1
 800440c:	5499      	strb	r1, [r3, r2]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	223f      	movs	r2, #63	; 0x3f
 8004412:	2101      	movs	r1, #1
 8004414:	5499      	strb	r1, [r3, r2]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2240      	movs	r2, #64	; 0x40
 800441a:	2101      	movs	r1, #1
 800441c:	5499      	strb	r1, [r3, r2]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2241      	movs	r2, #65	; 0x41
 8004422:	2101      	movs	r1, #1
 8004424:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2242      	movs	r2, #66	; 0x42
 800442a:	2101      	movs	r1, #1
 800442c:	5499      	strb	r1, [r3, r2]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2243      	movs	r2, #67	; 0x43
 8004432:	2101      	movs	r1, #1
 8004434:	5499      	strb	r1, [r3, r2]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2244      	movs	r2, #68	; 0x44
 800443a:	2101      	movs	r1, #1
 800443c:	5499      	strb	r1, [r3, r2]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2245      	movs	r2, #69	; 0x45
 8004442:	2101      	movs	r1, #1
 8004444:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	223d      	movs	r2, #61	; 0x3d
 800444a:	2101      	movs	r1, #1
 800444c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	0018      	movs	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	b002      	add	sp, #8
 8004456:	bd80      	pop	{r7, pc}

08004458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	223d      	movs	r2, #61	; 0x3d
 8004464:	5c9b      	ldrb	r3, [r3, r2]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d001      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e03b      	b.n	80044e8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	223d      	movs	r2, #61	; 0x3d
 8004474:	2102      	movs	r1, #2
 8004476:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2101      	movs	r1, #1
 8004484:	430a      	orrs	r2, r1
 8004486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a18      	ldr	r2, [pc, #96]	; (80044f0 <HAL_TIM_Base_Start_IT+0x98>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00f      	beq.n	80044b2 <HAL_TIM_Base_Start_IT+0x5a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	05db      	lsls	r3, r3, #23
 800449a:	429a      	cmp	r2, r3
 800449c:	d009      	beq.n	80044b2 <HAL_TIM_Base_Start_IT+0x5a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIM_Base_Start_IT+0x5a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a12      	ldr	r2, [pc, #72]	; (80044f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d111      	bne.n	80044d6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2207      	movs	r2, #7
 80044ba:	4013      	ands	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b06      	cmp	r3, #6
 80044c2:	d010      	beq.n	80044e6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2101      	movs	r1, #1
 80044d0:	430a      	orrs	r2, r1
 80044d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d4:	e007      	b.n	80044e6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	430a      	orrs	r2, r1
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	0018      	movs	r0, r3
 80044ea:	46bd      	mov	sp, r7
 80044ec:	b004      	add	sp, #16
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40012c00 	.word	0x40012c00
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40014000 	.word	0x40014000

080044fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	2202      	movs	r2, #2
 800450c:	4013      	ands	r3, r2
 800450e:	2b02      	cmp	r3, #2
 8004510:	d124      	bne.n	800455c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	2202      	movs	r2, #2
 800451a:	4013      	ands	r3, r2
 800451c:	2b02      	cmp	r3, #2
 800451e:	d11d      	bne.n	800455c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2203      	movs	r2, #3
 8004526:	4252      	negs	r2, r2
 8004528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2203      	movs	r2, #3
 8004538:	4013      	ands	r3, r2
 800453a:	d004      	beq.n	8004546 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	0018      	movs	r0, r3
 8004540:	f000 f940 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 8004544:	e007      	b.n	8004556 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 f933 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0018      	movs	r0, r3
 8004552:	f000 f93f 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2204      	movs	r2, #4
 8004564:	4013      	ands	r3, r2
 8004566:	2b04      	cmp	r3, #4
 8004568:	d125      	bne.n	80045b6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	2204      	movs	r2, #4
 8004572:	4013      	ands	r3, r2
 8004574:	2b04      	cmp	r3, #4
 8004576:	d11e      	bne.n	80045b6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2205      	movs	r2, #5
 800457e:	4252      	negs	r2, r2
 8004580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	23c0      	movs	r3, #192	; 0xc0
 8004590:	009b      	lsls	r3, r3, #2
 8004592:	4013      	ands	r3, r2
 8004594:	d004      	beq.n	80045a0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 f913 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 800459e:	e007      	b.n	80045b0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	0018      	movs	r0, r3
 80045a4:	f000 f906 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	0018      	movs	r0, r3
 80045ac:	f000 f912 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2208      	movs	r2, #8
 80045be:	4013      	ands	r3, r2
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d124      	bne.n	800460e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	2208      	movs	r2, #8
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b08      	cmp	r3, #8
 80045d0:	d11d      	bne.n	800460e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2209      	movs	r2, #9
 80045d8:	4252      	negs	r2, r2
 80045da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2204      	movs	r2, #4
 80045e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	2203      	movs	r2, #3
 80045ea:	4013      	ands	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	0018      	movs	r0, r3
 80045f2:	f000 f8e7 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 80045f6:	e007      	b.n	8004608 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	0018      	movs	r0, r3
 80045fc:	f000 f8da 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	0018      	movs	r0, r3
 8004604:	f000 f8e6 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2210      	movs	r2, #16
 8004616:	4013      	ands	r3, r2
 8004618:	2b10      	cmp	r3, #16
 800461a:	d125      	bne.n	8004668 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2210      	movs	r2, #16
 8004624:	4013      	ands	r3, r2
 8004626:	2b10      	cmp	r3, #16
 8004628:	d11e      	bne.n	8004668 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2211      	movs	r2, #17
 8004630:	4252      	negs	r2, r2
 8004632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2208      	movs	r2, #8
 8004638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	69da      	ldr	r2, [r3, #28]
 8004640:	23c0      	movs	r3, #192	; 0xc0
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4013      	ands	r3, r2
 8004646:	d004      	beq.n	8004652 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	0018      	movs	r0, r3
 800464c:	f000 f8ba 	bl	80047c4 <HAL_TIM_IC_CaptureCallback>
 8004650:	e007      	b.n	8004662 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	0018      	movs	r0, r3
 8004656:	f000 f8ad 	bl	80047b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	0018      	movs	r0, r3
 800465e:	f000 f8b9 	bl	80047d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2201      	movs	r2, #1
 8004670:	4013      	ands	r3, r2
 8004672:	2b01      	cmp	r3, #1
 8004674:	d10f      	bne.n	8004696 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2201      	movs	r2, #1
 800467e:	4013      	ands	r3, r2
 8004680:	2b01      	cmp	r3, #1
 8004682:	d108      	bne.n	8004696 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2202      	movs	r2, #2
 800468a:	4252      	negs	r2, r2
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f7fc fa8b 	bl	8000bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2280      	movs	r2, #128	; 0x80
 800469e:	4013      	ands	r3, r2
 80046a0:	2b80      	cmp	r3, #128	; 0x80
 80046a2:	d10f      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2280      	movs	r2, #128	; 0x80
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b80      	cmp	r3, #128	; 0x80
 80046b0:	d108      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2281      	movs	r2, #129	; 0x81
 80046b8:	4252      	negs	r2, r2
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 fa90 	bl	8004be4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	2240      	movs	r2, #64	; 0x40
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d10f      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	2240      	movs	r2, #64	; 0x40
 80046da:	4013      	ands	r3, r2
 80046dc:	2b40      	cmp	r3, #64	; 0x40
 80046de:	d108      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2241      	movs	r2, #65	; 0x41
 80046e6:	4252      	negs	r2, r2
 80046e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	0018      	movs	r0, r3
 80046ee:	f000 f879 	bl	80047e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2220      	movs	r2, #32
 80046fa:	4013      	ands	r3, r2
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	d10f      	bne.n	8004720 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	4013      	ands	r3, r2
 800470a:	2b20      	cmp	r3, #32
 800470c:	d108      	bne.n	8004720 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2221      	movs	r2, #33	; 0x21
 8004714:	4252      	negs	r2, r2
 8004716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0018      	movs	r0, r3
 800471c:	f000 fa5a 	bl	8004bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004720:	46c0      	nop			; (mov r8, r8)
 8004722:	46bd      	mov	sp, r7
 8004724:	b002      	add	sp, #8
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	223c      	movs	r2, #60	; 0x3c
 8004736:	5c9b      	ldrb	r3, [r3, r2]
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_TIM_SlaveConfigSynchro+0x18>
 800473c:	2302      	movs	r3, #2
 800473e:	e032      	b.n	80047a6 <HAL_TIM_SlaveConfigSynchro+0x7e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	223c      	movs	r2, #60	; 0x3c
 8004744:	2101      	movs	r1, #1
 8004746:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	223d      	movs	r2, #61	; 0x3d
 800474c:	2102      	movs	r1, #2
 800474e:	5499      	strb	r1, [r3, r2]

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0011      	movs	r1, r2
 8004756:	0018      	movs	r0, r3
 8004758:	f000 f8cc 	bl	80048f4 <TIM_SlaveTimer_SetConfig>
 800475c:	1e03      	subs	r3, r0, #0
 800475e:	d009      	beq.n	8004774 <HAL_TIM_SlaveConfigSynchro+0x4c>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	223d      	movs	r2, #61	; 0x3d
 8004764:	2101      	movs	r1, #1
 8004766:	5499      	strb	r1, [r3, r2]
    __HAL_UNLOCK(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	223c      	movs	r2, #60	; 0x3c
 800476c:	2100      	movs	r1, #0
 800476e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e018      	b.n	80047a6 <HAL_TIM_SlaveConfigSynchro+0x7e>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68da      	ldr	r2, [r3, #12]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2140      	movs	r1, #64	; 0x40
 8004780:	438a      	bics	r2, r1
 8004782:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4908      	ldr	r1, [pc, #32]	; (80047b0 <HAL_TIM_SlaveConfigSynchro+0x88>)
 8004790:	400a      	ands	r2, r1
 8004792:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	223d      	movs	r2, #61	; 0x3d
 8004798:	2101      	movs	r1, #1
 800479a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	223c      	movs	r2, #60	; 0x3c
 80047a0:	2100      	movs	r1, #0
 80047a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			; (mov r8, r8)
 80047b0:	ffffbfff 	.word	0xffffbfff

080047b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80047bc:	46c0      	nop			; (mov r8, r8)
 80047be:	46bd      	mov	sp, r7
 80047c0:	b002      	add	sp, #8
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047cc:	46c0      	nop			; (mov r8, r8)
 80047ce:	46bd      	mov	sp, r7
 80047d0:	b002      	add	sp, #8
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ec:	46c0      	nop			; (mov r8, r8)
 80047ee:	46bd      	mov	sp, r7
 80047f0:	b002      	add	sp, #8
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a34      	ldr	r2, [pc, #208]	; (80048d8 <TIM_Base_SetConfig+0xe4>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d008      	beq.n	800481e <TIM_Base_SetConfig+0x2a>
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	05db      	lsls	r3, r3, #23
 8004812:	429a      	cmp	r2, r3
 8004814:	d003      	beq.n	800481e <TIM_Base_SetConfig+0x2a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a30      	ldr	r2, [pc, #192]	; (80048dc <TIM_Base_SetConfig+0xe8>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d108      	bne.n	8004830 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2270      	movs	r2, #112	; 0x70
 8004822:	4393      	bics	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	4313      	orrs	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a29      	ldr	r2, [pc, #164]	; (80048d8 <TIM_Base_SetConfig+0xe4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d018      	beq.n	800486a <TIM_Base_SetConfig+0x76>
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	2380      	movs	r3, #128	; 0x80
 800483c:	05db      	lsls	r3, r3, #23
 800483e:	429a      	cmp	r2, r3
 8004840:	d013      	beq.n	800486a <TIM_Base_SetConfig+0x76>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a25      	ldr	r2, [pc, #148]	; (80048dc <TIM_Base_SetConfig+0xe8>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00f      	beq.n	800486a <TIM_Base_SetConfig+0x76>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <TIM_Base_SetConfig+0xec>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00b      	beq.n	800486a <TIM_Base_SetConfig+0x76>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a23      	ldr	r2, [pc, #140]	; (80048e4 <TIM_Base_SetConfig+0xf0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <TIM_Base_SetConfig+0x76>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a22      	ldr	r2, [pc, #136]	; (80048e8 <TIM_Base_SetConfig+0xf4>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_Base_SetConfig+0x76>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a21      	ldr	r2, [pc, #132]	; (80048ec <TIM_Base_SetConfig+0xf8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4a20      	ldr	r2, [pc, #128]	; (80048f0 <TIM_Base_SetConfig+0xfc>)
 800486e:	4013      	ands	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2280      	movs	r2, #128	; 0x80
 8004880:	4393      	bics	r3, r2
 8004882:	001a      	movs	r2, r3
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	4313      	orrs	r3, r2
 800488a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	689a      	ldr	r2, [r3, #8]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <TIM_Base_SetConfig+0xe4>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00b      	beq.n	80048c2 <TIM_Base_SetConfig+0xce>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a0d      	ldr	r2, [pc, #52]	; (80048e4 <TIM_Base_SetConfig+0xf0>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <TIM_Base_SetConfig+0xce>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a0c      	ldr	r2, [pc, #48]	; (80048e8 <TIM_Base_SetConfig+0xf4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d003      	beq.n	80048c2 <TIM_Base_SetConfig+0xce>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a0b      	ldr	r2, [pc, #44]	; (80048ec <TIM_Base_SetConfig+0xf8>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d103      	bne.n	80048ca <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	615a      	str	r2, [r3, #20]
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b004      	add	sp, #16
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40002000 	.word	0x40002000
 80048e4:	40014000 	.word	0x40014000
 80048e8:	40014400 	.word	0x40014400
 80048ec:	40014800 	.word	0x40014800
 80048f0:	fffffcff 	.word	0xfffffcff

080048f4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2317      	movs	r3, #23
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	2200      	movs	r2, #0
 8004904:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	2270      	movs	r2, #112	; 0x70
 8004912:	4393      	bics	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	693a      	ldr	r2, [r7, #16]
 800491c:	4313      	orrs	r3, r2
 800491e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	2207      	movs	r2, #7
 8004924:	4393      	bics	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4313      	orrs	r3, r2
 8004930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b70      	cmp	r3, #112	; 0x70
 8004940:	d015      	beq.n	800496e <TIM_SlaveTimer_SetConfig+0x7a>
 8004942:	d900      	bls.n	8004946 <TIM_SlaveTimer_SetConfig+0x52>
 8004944:	e05b      	b.n	80049fe <TIM_SlaveTimer_SetConfig+0x10a>
 8004946:	2b60      	cmp	r3, #96	; 0x60
 8004948:	d04f      	beq.n	80049ea <TIM_SlaveTimer_SetConfig+0xf6>
 800494a:	d858      	bhi.n	80049fe <TIM_SlaveTimer_SetConfig+0x10a>
 800494c:	2b50      	cmp	r3, #80	; 0x50
 800494e:	d042      	beq.n	80049d6 <TIM_SlaveTimer_SetConfig+0xe2>
 8004950:	d855      	bhi.n	80049fe <TIM_SlaveTimer_SetConfig+0x10a>
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d016      	beq.n	8004984 <TIM_SlaveTimer_SetConfig+0x90>
 8004956:	d852      	bhi.n	80049fe <TIM_SlaveTimer_SetConfig+0x10a>
 8004958:	2b30      	cmp	r3, #48	; 0x30
 800495a:	d055      	beq.n	8004a08 <TIM_SlaveTimer_SetConfig+0x114>
 800495c:	d84f      	bhi.n	80049fe <TIM_SlaveTimer_SetConfig+0x10a>
 800495e:	2b20      	cmp	r3, #32
 8004960:	d052      	beq.n	8004a08 <TIM_SlaveTimer_SetConfig+0x114>
 8004962:	d84c      	bhi.n	80049fe <TIM_SlaveTimer_SetConfig+0x10a>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d04f      	beq.n	8004a08 <TIM_SlaveTimer_SetConfig+0x114>
 8004968:	2b10      	cmp	r3, #16
 800496a:	d04d      	beq.n	8004a08 <TIM_SlaveTimer_SetConfig+0x114>
 800496c:	e047      	b.n	80049fe <TIM_SlaveTimer_SetConfig+0x10a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6818      	ldr	r0, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68d9      	ldr	r1, [r3, #12]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	689a      	ldr	r2, [r3, #8]
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f000 f8ab 	bl	8004ad8 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8004982:	e042      	b.n	8004a0a <TIM_SlaveTimer_SetConfig+0x116>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b05      	cmp	r3, #5
 800498a:	d101      	bne.n	8004990 <TIM_SlaveTimer_SetConfig+0x9c>
      {
        return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e03f      	b.n	8004a10 <TIM_SlaveTimer_SetConfig+0x11c>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6a1a      	ldr	r2, [r3, #32]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2101      	movs	r1, #1
 80049a4:	438a      	bics	r2, r1
 80049a6:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	22f0      	movs	r2, #240	; 0xf0
 80049b4:	4393      	bics	r3, r2
 80049b6:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	621a      	str	r2, [r3, #32]
      break;
 80049d4:	e019      	b.n	8004a0a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	6899      	ldr	r1, [r3, #8]
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	001a      	movs	r2, r3
 80049e4:	f000 f818 	bl	8004a18 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80049e8:	e00f      	b.n	8004a0a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6818      	ldr	r0, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	6899      	ldr	r1, [r3, #8]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	001a      	movs	r2, r3
 80049f8:	f000 f83c 	bl	8004a74 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80049fc:	e005      	b.n	8004a0a <TIM_SlaveTimer_SetConfig+0x116>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80049fe:	2317      	movs	r3, #23
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
      break;
 8004a06:	e000      	b.n	8004a0a <TIM_SlaveTimer_SetConfig+0x116>
      break;
 8004a08:	46c0      	nop			; (mov r8, r8)
  }

  return status;
 8004a0a:	2317      	movs	r3, #23
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	781b      	ldrb	r3, [r3, #0]
}
 8004a10:	0018      	movs	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	b006      	add	sp, #24
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	4393      	bics	r3, r2
 8004a32:	001a      	movs	r2, r3
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	22f0      	movs	r2, #240	; 0xf0
 8004a42:	4393      	bics	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	693a      	ldr	r2, [r7, #16]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	220a      	movs	r2, #10
 8004a54:	4393      	bics	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	693a      	ldr	r2, [r7, #16]
 8004a64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	621a      	str	r2, [r3, #32]
}
 8004a6c:	46c0      	nop			; (mov r8, r8)
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b006      	add	sp, #24
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	2210      	movs	r2, #16
 8004a86:	4393      	bics	r3, r2
 8004a88:	001a      	movs	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <TIM_TI2_ConfigInputStage+0x60>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	031b      	lsls	r3, r3, #12
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	22a0      	movs	r2, #160	; 0xa0
 8004ab0:	4393      	bics	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	011b      	lsls	r3, r3, #4
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	697a      	ldr	r2, [r7, #20]
 8004ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	621a      	str	r2, [r3, #32]
}
 8004aca:	46c0      	nop			; (mov r8, r8)
 8004acc:	46bd      	mov	sp, r7
 8004ace:	b006      	add	sp, #24
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	46c0      	nop			; (mov r8, r8)
 8004ad4:	ffff0fff 	.word	0xffff0fff

08004ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b086      	sub	sp, #24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	4a09      	ldr	r2, [pc, #36]	; (8004b14 <TIM_ETR_SetConfig+0x3c>)
 8004af0:	4013      	ands	r3, r2
 8004af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	609a      	str	r2, [r3, #8]
}
 8004b0c:	46c0      	nop			; (mov r8, r8)
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	b006      	add	sp, #24
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	ffff00ff 	.word	0xffff00ff

08004b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b084      	sub	sp, #16
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	223c      	movs	r2, #60	; 0x3c
 8004b26:	5c9b      	ldrb	r3, [r3, r2]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d101      	bne.n	8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e047      	b.n	8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	223c      	movs	r2, #60	; 0x3c
 8004b34:	2101      	movs	r1, #1
 8004b36:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	223d      	movs	r2, #61	; 0x3d
 8004b3c:	2102      	movs	r1, #2
 8004b3e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2270      	movs	r2, #112	; 0x70
 8004b54:	4393      	bics	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a16      	ldr	r2, [pc, #88]	; (8004bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00f      	beq.n	8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	05db      	lsls	r3, r3, #23
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d009      	beq.n	8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a10      	ldr	r2, [pc, #64]	; (8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d10c      	bne.n	8004bae <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2280      	movs	r2, #128	; 0x80
 8004b98:	4393      	bics	r3, r2
 8004b9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	223d      	movs	r2, #61	; 0x3d
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	223c      	movs	r2, #60	; 0x3c
 8004bba:	2100      	movs	r1, #0
 8004bbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004bbe:	2300      	movs	r3, #0
}
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	b004      	add	sp, #16
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	40012c00 	.word	0x40012c00
 8004bcc:	40000400 	.word	0x40000400
 8004bd0:	40014000 	.word	0x40014000

08004bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b002      	add	sp, #8
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004bec:	46c0      	nop			; (mov r8, r8)
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	b002      	add	sp, #8
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e044      	b.n	8004c90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d107      	bne.n	8004c1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2278      	movs	r2, #120	; 0x78
 8004c12:	2100      	movs	r1, #0
 8004c14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f7fc fc53 	bl	80014c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2224      	movs	r2, #36	; 0x24
 8004c22:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2101      	movs	r1, #1
 8004c30:	438a      	bics	r2, r1
 8004c32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	0018      	movs	r0, r3
 8004c38:	f000 f8d0 	bl	8004ddc <UART_SetConfig>
 8004c3c:	0003      	movs	r3, r0
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e024      	b.n	8004c90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f000 faab 	bl	80051ac <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	490d      	ldr	r1, [pc, #52]	; (8004c98 <HAL_UART_Init+0xa4>)
 8004c62:	400a      	ands	r2, r1
 8004c64:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	212a      	movs	r1, #42	; 0x2a
 8004c72:	438a      	bics	r2, r1
 8004c74:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2101      	movs	r1, #1
 8004c82:	430a      	orrs	r2, r1
 8004c84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f000 fb43 	bl	8005314 <UART_CheckIdleState>
 8004c8e:	0003      	movs	r3, r0
}
 8004c90:	0018      	movs	r0, r3
 8004c92:	46bd      	mov	sp, r7
 8004c94:	b002      	add	sp, #8
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	ffffb7ff 	.word	0xffffb7ff

08004c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b08a      	sub	sp, #40	; 0x28
 8004ca0:	af02      	add	r7, sp, #8
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	603b      	str	r3, [r7, #0]
 8004ca8:	1dbb      	adds	r3, r7, #6
 8004caa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cb0:	2b20      	cmp	r3, #32
 8004cb2:	d000      	beq.n	8004cb6 <HAL_UART_Transmit+0x1a>
 8004cb4:	e08d      	b.n	8004dd2 <HAL_UART_Transmit+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <HAL_UART_Transmit+0x28>
 8004cbc:	1dbb      	adds	r3, r7, #6
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e085      	b.n	8004dd4 <HAL_UART_Transmit+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	2380      	movs	r3, #128	; 0x80
 8004cce:	015b      	lsls	r3, r3, #5
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d109      	bne.n	8004ce8 <HAL_UART_Transmit+0x4c>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d105      	bne.n	8004ce8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	d001      	beq.n	8004ce8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e075      	b.n	8004dd4 <HAL_UART_Transmit+0x138>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2284      	movs	r2, #132	; 0x84
 8004cec:	2100      	movs	r1, #0
 8004cee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2221      	movs	r2, #33	; 0x21
 8004cf4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cf6:	f7fc fd2f 	bl	8001758 <HAL_GetTick>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	1dba      	adds	r2, r7, #6
 8004d02:	2150      	movs	r1, #80	; 0x50
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	1dba      	adds	r2, r7, #6
 8004d0c:	2152      	movs	r1, #82	; 0x52
 8004d0e:	8812      	ldrh	r2, [r2, #0]
 8004d10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	689a      	ldr	r2, [r3, #8]
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	015b      	lsls	r3, r3, #5
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d108      	bne.n	8004d30 <HAL_UART_Transmit+0x94>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	61bb      	str	r3, [r7, #24]
 8004d2e:	e003      	b.n	8004d38 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d38:	e030      	b.n	8004d9c <HAL_UART_Transmit+0x100>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	68f8      	ldr	r0, [r7, #12]
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	9300      	str	r3, [sp, #0]
 8004d42:	0013      	movs	r3, r2
 8004d44:	2200      	movs	r2, #0
 8004d46:	2180      	movs	r1, #128	; 0x80
 8004d48:	f000 fb8c 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004d4c:	1e03      	subs	r3, r0, #0
 8004d4e:	d004      	beq.n	8004d5a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e03c      	b.n	8004dd4 <HAL_UART_Transmit+0x138>
      }
      if (pdata8bits == NULL)
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	881a      	ldrh	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	05d2      	lsls	r2, r2, #23
 8004d6a:	0dd2      	lsrs	r2, r2, #23
 8004d6c:	b292      	uxth	r2, r2
 8004d6e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	3302      	adds	r3, #2
 8004d74:	61bb      	str	r3, [r7, #24]
 8004d76:	e008      	b.n	8004d8a <HAL_UART_Transmit+0xee>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	781a      	ldrb	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	b292      	uxth	r2, r2
 8004d82:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3301      	adds	r3, #1
 8004d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	2252      	movs	r2, #82	; 0x52
 8004d8e:	5a9b      	ldrh	r3, [r3, r2]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b299      	uxth	r1, r3
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2252      	movs	r2, #82	; 0x52
 8004d9a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2252      	movs	r2, #82	; 0x52
 8004da0:	5a9b      	ldrh	r3, [r3, r2]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1c8      	bne.n	8004d3a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	9300      	str	r3, [sp, #0]
 8004db0:	0013      	movs	r3, r2
 8004db2:	2200      	movs	r2, #0
 8004db4:	2140      	movs	r1, #64	; 0x40
 8004db6:	f000 fb55 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 8004dba:	1e03      	subs	r3, r0, #0
 8004dbc:	d004      	beq.n	8004dc8 <HAL_UART_Transmit+0x12c>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e005      	b.n	8004dd4 <HAL_UART_Transmit+0x138>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <HAL_UART_Transmit+0x138>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b008      	add	sp, #32
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b088      	sub	sp, #32
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004de4:	231e      	movs	r3, #30
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	2200      	movs	r2, #0
 8004dea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	69db      	ldr	r3, [r3, #28]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4abe      	ldr	r2, [pc, #760]	; (8005104 <UART_SetConfig+0x328>)
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	0019      	movs	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4ab9      	ldr	r2, [pc, #740]	; (8005108 <UART_SetConfig+0x32c>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	0019      	movs	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68da      	ldr	r2, [r3, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4ab0      	ldr	r2, [pc, #704]	; (800510c <UART_SetConfig+0x330>)
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	0019      	movs	r1, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4aac      	ldr	r2, [pc, #688]	; (8005110 <UART_SetConfig+0x334>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d127      	bne.n	8004eb2 <UART_SetConfig+0xd6>
 8004e62:	4bac      	ldr	r3, [pc, #688]	; (8005114 <UART_SetConfig+0x338>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	2203      	movs	r2, #3
 8004e68:	4013      	ands	r3, r2
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d00d      	beq.n	8004e8a <UART_SetConfig+0xae>
 8004e6e:	d81b      	bhi.n	8004ea8 <UART_SetConfig+0xcc>
 8004e70:	2b02      	cmp	r3, #2
 8004e72:	d014      	beq.n	8004e9e <UART_SetConfig+0xc2>
 8004e74:	d818      	bhi.n	8004ea8 <UART_SetConfig+0xcc>
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <UART_SetConfig+0xa4>
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d00a      	beq.n	8004e94 <UART_SetConfig+0xb8>
 8004e7e:	e013      	b.n	8004ea8 <UART_SetConfig+0xcc>
 8004e80:	231f      	movs	r3, #31
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
 8004e88:	e0bd      	b.n	8005006 <UART_SetConfig+0x22a>
 8004e8a:	231f      	movs	r3, #31
 8004e8c:	18fb      	adds	r3, r7, r3
 8004e8e:	2202      	movs	r2, #2
 8004e90:	701a      	strb	r2, [r3, #0]
 8004e92:	e0b8      	b.n	8005006 <UART_SetConfig+0x22a>
 8004e94:	231f      	movs	r3, #31
 8004e96:	18fb      	adds	r3, r7, r3
 8004e98:	2204      	movs	r2, #4
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	e0b3      	b.n	8005006 <UART_SetConfig+0x22a>
 8004e9e:	231f      	movs	r3, #31
 8004ea0:	18fb      	adds	r3, r7, r3
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	701a      	strb	r2, [r3, #0]
 8004ea6:	e0ae      	b.n	8005006 <UART_SetConfig+0x22a>
 8004ea8:	231f      	movs	r3, #31
 8004eaa:	18fb      	adds	r3, r7, r3
 8004eac:	2210      	movs	r2, #16
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e0a9      	b.n	8005006 <UART_SetConfig+0x22a>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a98      	ldr	r2, [pc, #608]	; (8005118 <UART_SetConfig+0x33c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d134      	bne.n	8004f26 <UART_SetConfig+0x14a>
 8004ebc:	4b95      	ldr	r3, [pc, #596]	; (8005114 <UART_SetConfig+0x338>)
 8004ebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ec0:	23c0      	movs	r3, #192	; 0xc0
 8004ec2:	029b      	lsls	r3, r3, #10
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	22c0      	movs	r2, #192	; 0xc0
 8004ec8:	0292      	lsls	r2, r2, #10
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d017      	beq.n	8004efe <UART_SetConfig+0x122>
 8004ece:	22c0      	movs	r2, #192	; 0xc0
 8004ed0:	0292      	lsls	r2, r2, #10
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d822      	bhi.n	8004f1c <UART_SetConfig+0x140>
 8004ed6:	2280      	movs	r2, #128	; 0x80
 8004ed8:	0292      	lsls	r2, r2, #10
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d019      	beq.n	8004f12 <UART_SetConfig+0x136>
 8004ede:	2280      	movs	r2, #128	; 0x80
 8004ee0:	0292      	lsls	r2, r2, #10
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d81a      	bhi.n	8004f1c <UART_SetConfig+0x140>
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d004      	beq.n	8004ef4 <UART_SetConfig+0x118>
 8004eea:	2280      	movs	r2, #128	; 0x80
 8004eec:	0252      	lsls	r2, r2, #9
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00a      	beq.n	8004f08 <UART_SetConfig+0x12c>
 8004ef2:	e013      	b.n	8004f1c <UART_SetConfig+0x140>
 8004ef4:	231f      	movs	r3, #31
 8004ef6:	18fb      	adds	r3, r7, r3
 8004ef8:	2200      	movs	r2, #0
 8004efa:	701a      	strb	r2, [r3, #0]
 8004efc:	e083      	b.n	8005006 <UART_SetConfig+0x22a>
 8004efe:	231f      	movs	r3, #31
 8004f00:	18fb      	adds	r3, r7, r3
 8004f02:	2202      	movs	r2, #2
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e07e      	b.n	8005006 <UART_SetConfig+0x22a>
 8004f08:	231f      	movs	r3, #31
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e079      	b.n	8005006 <UART_SetConfig+0x22a>
 8004f12:	231f      	movs	r3, #31
 8004f14:	18fb      	adds	r3, r7, r3
 8004f16:	2208      	movs	r2, #8
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	e074      	b.n	8005006 <UART_SetConfig+0x22a>
 8004f1c:	231f      	movs	r3, #31
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	2210      	movs	r2, #16
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e06f      	b.n	8005006 <UART_SetConfig+0x22a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a7c      	ldr	r2, [pc, #496]	; (800511c <UART_SetConfig+0x340>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d134      	bne.n	8004f9a <UART_SetConfig+0x1be>
 8004f30:	4b78      	ldr	r3, [pc, #480]	; (8005114 <UART_SetConfig+0x338>)
 8004f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f34:	23c0      	movs	r3, #192	; 0xc0
 8004f36:	031b      	lsls	r3, r3, #12
 8004f38:	4013      	ands	r3, r2
 8004f3a:	22c0      	movs	r2, #192	; 0xc0
 8004f3c:	0312      	lsls	r2, r2, #12
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d017      	beq.n	8004f72 <UART_SetConfig+0x196>
 8004f42:	22c0      	movs	r2, #192	; 0xc0
 8004f44:	0312      	lsls	r2, r2, #12
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d822      	bhi.n	8004f90 <UART_SetConfig+0x1b4>
 8004f4a:	2280      	movs	r2, #128	; 0x80
 8004f4c:	0312      	lsls	r2, r2, #12
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d019      	beq.n	8004f86 <UART_SetConfig+0x1aa>
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	0312      	lsls	r2, r2, #12
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d81a      	bhi.n	8004f90 <UART_SetConfig+0x1b4>
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d004      	beq.n	8004f68 <UART_SetConfig+0x18c>
 8004f5e:	2280      	movs	r2, #128	; 0x80
 8004f60:	02d2      	lsls	r2, r2, #11
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00a      	beq.n	8004f7c <UART_SetConfig+0x1a0>
 8004f66:	e013      	b.n	8004f90 <UART_SetConfig+0x1b4>
 8004f68:	231f      	movs	r3, #31
 8004f6a:	18fb      	adds	r3, r7, r3
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	701a      	strb	r2, [r3, #0]
 8004f70:	e049      	b.n	8005006 <UART_SetConfig+0x22a>
 8004f72:	231f      	movs	r3, #31
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	2202      	movs	r2, #2
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e044      	b.n	8005006 <UART_SetConfig+0x22a>
 8004f7c:	231f      	movs	r3, #31
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	2204      	movs	r2, #4
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	e03f      	b.n	8005006 <UART_SetConfig+0x22a>
 8004f86:	231f      	movs	r3, #31
 8004f88:	18fb      	adds	r3, r7, r3
 8004f8a:	2208      	movs	r2, #8
 8004f8c:	701a      	strb	r2, [r3, #0]
 8004f8e:	e03a      	b.n	8005006 <UART_SetConfig+0x22a>
 8004f90:	231f      	movs	r3, #31
 8004f92:	18fb      	adds	r3, r7, r3
 8004f94:	2210      	movs	r2, #16
 8004f96:	701a      	strb	r2, [r3, #0]
 8004f98:	e035      	b.n	8005006 <UART_SetConfig+0x22a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a60      	ldr	r2, [pc, #384]	; (8005120 <UART_SetConfig+0x344>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d104      	bne.n	8004fae <UART_SetConfig+0x1d2>
 8004fa4:	231f      	movs	r3, #31
 8004fa6:	18fb      	adds	r3, r7, r3
 8004fa8:	2200      	movs	r2, #0
 8004faa:	701a      	strb	r2, [r3, #0]
 8004fac:	e02b      	b.n	8005006 <UART_SetConfig+0x22a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a5c      	ldr	r2, [pc, #368]	; (8005124 <UART_SetConfig+0x348>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d104      	bne.n	8004fc2 <UART_SetConfig+0x1e6>
 8004fb8:	231f      	movs	r3, #31
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	e021      	b.n	8005006 <UART_SetConfig+0x22a>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a58      	ldr	r2, [pc, #352]	; (8005128 <UART_SetConfig+0x34c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d104      	bne.n	8004fd6 <UART_SetConfig+0x1fa>
 8004fcc:	231f      	movs	r3, #31
 8004fce:	18fb      	adds	r3, r7, r3
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	701a      	strb	r2, [r3, #0]
 8004fd4:	e017      	b.n	8005006 <UART_SetConfig+0x22a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a54      	ldr	r2, [pc, #336]	; (800512c <UART_SetConfig+0x350>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d104      	bne.n	8004fea <UART_SetConfig+0x20e>
 8004fe0:	231f      	movs	r3, #31
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	701a      	strb	r2, [r3, #0]
 8004fe8:	e00d      	b.n	8005006 <UART_SetConfig+0x22a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a50      	ldr	r2, [pc, #320]	; (8005130 <UART_SetConfig+0x354>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d104      	bne.n	8004ffe <UART_SetConfig+0x222>
 8004ff4:	231f      	movs	r3, #31
 8004ff6:	18fb      	adds	r3, r7, r3
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	e003      	b.n	8005006 <UART_SetConfig+0x22a>
 8004ffe:	231f      	movs	r3, #31
 8005000:	18fb      	adds	r3, r7, r3
 8005002:	2210      	movs	r2, #16
 8005004:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	69da      	ldr	r2, [r3, #28]
 800500a:	2380      	movs	r3, #128	; 0x80
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	429a      	cmp	r2, r3
 8005010:	d15c      	bne.n	80050cc <UART_SetConfig+0x2f0>
  {
    switch (clocksource)
 8005012:	231f      	movs	r3, #31
 8005014:	18fb      	adds	r3, r7, r3
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d015      	beq.n	8005048 <UART_SetConfig+0x26c>
 800501c:	dc18      	bgt.n	8005050 <UART_SetConfig+0x274>
 800501e:	2b04      	cmp	r3, #4
 8005020:	d00d      	beq.n	800503e <UART_SetConfig+0x262>
 8005022:	dc15      	bgt.n	8005050 <UART_SetConfig+0x274>
 8005024:	2b00      	cmp	r3, #0
 8005026:	d002      	beq.n	800502e <UART_SetConfig+0x252>
 8005028:	2b02      	cmp	r3, #2
 800502a:	d005      	beq.n	8005038 <UART_SetConfig+0x25c>
 800502c:	e010      	b.n	8005050 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800502e:	f7fe f8d3 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 8005032:	0003      	movs	r3, r0
 8005034:	61bb      	str	r3, [r7, #24]
        break;
 8005036:	e012      	b.n	800505e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005038:	4b3e      	ldr	r3, [pc, #248]	; (8005134 <UART_SetConfig+0x358>)
 800503a:	61bb      	str	r3, [r7, #24]
        break;
 800503c:	e00f      	b.n	800505e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800503e:	f7fe f84f 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 8005042:	0003      	movs	r3, r0
 8005044:	61bb      	str	r3, [r7, #24]
        break;
 8005046:	e00a      	b.n	800505e <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	61bb      	str	r3, [r7, #24]
        break;
 800504e:	e006      	b.n	800505e <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 8005050:	2300      	movs	r3, #0
 8005052:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005054:	231e      	movs	r3, #30
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
        break;
 800505c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d100      	bne.n	8005066 <UART_SetConfig+0x28a>
 8005064:	e095      	b.n	8005192 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	005a      	lsls	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	085b      	lsrs	r3, r3, #1
 8005070:	18d2      	adds	r2, r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	0019      	movs	r1, r3
 8005078:	0010      	movs	r0, r2
 800507a:	f7fb f84d 	bl	8000118 <__udivsi3>
 800507e:	0003      	movs	r3, r0
 8005080:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	2b0f      	cmp	r3, #15
 8005086:	d91c      	bls.n	80050c2 <UART_SetConfig+0x2e6>
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	025b      	lsls	r3, r3, #9
 800508e:	429a      	cmp	r2, r3
 8005090:	d217      	bcs.n	80050c2 <UART_SetConfig+0x2e6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	b29a      	uxth	r2, r3
 8005096:	200e      	movs	r0, #14
 8005098:	183b      	adds	r3, r7, r0
 800509a:	210f      	movs	r1, #15
 800509c:	438a      	bics	r2, r1
 800509e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	085b      	lsrs	r3, r3, #1
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	2207      	movs	r2, #7
 80050a8:	4013      	ands	r3, r2
 80050aa:	b299      	uxth	r1, r3
 80050ac:	183b      	adds	r3, r7, r0
 80050ae:	183a      	adds	r2, r7, r0
 80050b0:	8812      	ldrh	r2, [r2, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	183a      	adds	r2, r7, r0
 80050bc:	8812      	ldrh	r2, [r2, #0]
 80050be:	60da      	str	r2, [r3, #12]
 80050c0:	e067      	b.n	8005192 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 80050c2:	231e      	movs	r3, #30
 80050c4:	18fb      	adds	r3, r7, r3
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]
 80050ca:	e062      	b.n	8005192 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050cc:	231f      	movs	r3, #31
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	2b08      	cmp	r3, #8
 80050d4:	d030      	beq.n	8005138 <UART_SetConfig+0x35c>
 80050d6:	dc33      	bgt.n	8005140 <UART_SetConfig+0x364>
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d00d      	beq.n	80050f8 <UART_SetConfig+0x31c>
 80050dc:	dc30      	bgt.n	8005140 <UART_SetConfig+0x364>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <UART_SetConfig+0x30c>
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d005      	beq.n	80050f2 <UART_SetConfig+0x316>
 80050e6:	e02b      	b.n	8005140 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050e8:	f7fe f876 	bl	80031d8 <HAL_RCC_GetPCLK1Freq>
 80050ec:	0003      	movs	r3, r0
 80050ee:	61bb      	str	r3, [r7, #24]
        break;
 80050f0:	e02d      	b.n	800514e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <UART_SetConfig+0x358>)
 80050f4:	61bb      	str	r3, [r7, #24]
        break;
 80050f6:	e02a      	b.n	800514e <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050f8:	f7fd fff2 	bl	80030e0 <HAL_RCC_GetSysClockFreq>
 80050fc:	0003      	movs	r3, r0
 80050fe:	61bb      	str	r3, [r7, #24]
        break;
 8005100:	e025      	b.n	800514e <UART_SetConfig+0x372>
 8005102:	46c0      	nop			; (mov r8, r8)
 8005104:	efff69f3 	.word	0xefff69f3
 8005108:	ffffcfff 	.word	0xffffcfff
 800510c:	fffff4ff 	.word	0xfffff4ff
 8005110:	40013800 	.word	0x40013800
 8005114:	40021000 	.word	0x40021000
 8005118:	40004400 	.word	0x40004400
 800511c:	40004800 	.word	0x40004800
 8005120:	40004c00 	.word	0x40004c00
 8005124:	40005000 	.word	0x40005000
 8005128:	40011400 	.word	0x40011400
 800512c:	40011800 	.word	0x40011800
 8005130:	40011c00 	.word	0x40011c00
 8005134:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005138:	2380      	movs	r3, #128	; 0x80
 800513a:	021b      	lsls	r3, r3, #8
 800513c:	61bb      	str	r3, [r7, #24]
        break;
 800513e:	e006      	b.n	800514e <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005144:	231e      	movs	r3, #30
 8005146:	18fb      	adds	r3, r7, r3
 8005148:	2201      	movs	r2, #1
 800514a:	701a      	strb	r2, [r3, #0]
        break;
 800514c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01e      	beq.n	8005192 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	085a      	lsrs	r2, r3, #1
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	18d2      	adds	r2, r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	0019      	movs	r1, r3
 8005164:	0010      	movs	r0, r2
 8005166:	f7fa ffd7 	bl	8000118 <__udivsi3>
 800516a:	0003      	movs	r3, r0
 800516c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b0f      	cmp	r3, #15
 8005172:	d90a      	bls.n	800518a <UART_SetConfig+0x3ae>
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	2380      	movs	r3, #128	; 0x80
 8005178:	025b      	lsls	r3, r3, #9
 800517a:	429a      	cmp	r2, r3
 800517c:	d205      	bcs.n	800518a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	b29a      	uxth	r2, r3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	60da      	str	r2, [r3, #12]
 8005188:	e003      	b.n	8005192 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800518a:	231e      	movs	r3, #30
 800518c:	18fb      	adds	r3, r7, r3
 800518e:	2201      	movs	r2, #1
 8005190:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800519e:	231e      	movs	r3, #30
 80051a0:	18fb      	adds	r3, r7, r3
 80051a2:	781b      	ldrb	r3, [r3, #0]
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b008      	add	sp, #32
 80051aa:	bd80      	pop	{r7, pc}

080051ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b8:	2201      	movs	r2, #1
 80051ba:	4013      	ands	r3, r2
 80051bc:	d00b      	beq.n	80051d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	4a4a      	ldr	r2, [pc, #296]	; (80052f0 <UART_AdvFeatureConfig+0x144>)
 80051c6:	4013      	ands	r3, r2
 80051c8:	0019      	movs	r1, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	2202      	movs	r2, #2
 80051dc:	4013      	ands	r3, r2
 80051de:	d00b      	beq.n	80051f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	4a43      	ldr	r2, [pc, #268]	; (80052f4 <UART_AdvFeatureConfig+0x148>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	0019      	movs	r1, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	2204      	movs	r2, #4
 80051fe:	4013      	ands	r3, r2
 8005200:	d00b      	beq.n	800521a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	4a3b      	ldr	r2, [pc, #236]	; (80052f8 <UART_AdvFeatureConfig+0x14c>)
 800520a:	4013      	ands	r3, r2
 800520c:	0019      	movs	r1, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	430a      	orrs	r2, r1
 8005218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521e:	2208      	movs	r2, #8
 8005220:	4013      	ands	r3, r2
 8005222:	d00b      	beq.n	800523c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	4a34      	ldr	r2, [pc, #208]	; (80052fc <UART_AdvFeatureConfig+0x150>)
 800522c:	4013      	ands	r3, r2
 800522e:	0019      	movs	r1, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	430a      	orrs	r2, r1
 800523a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	2210      	movs	r2, #16
 8005242:	4013      	ands	r3, r2
 8005244:	d00b      	beq.n	800525e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	4a2c      	ldr	r2, [pc, #176]	; (8005300 <UART_AdvFeatureConfig+0x154>)
 800524e:	4013      	ands	r3, r2
 8005250:	0019      	movs	r1, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2220      	movs	r2, #32
 8005264:	4013      	ands	r3, r2
 8005266:	d00b      	beq.n	8005280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	4a25      	ldr	r2, [pc, #148]	; (8005304 <UART_AdvFeatureConfig+0x158>)
 8005270:	4013      	ands	r3, r2
 8005272:	0019      	movs	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005284:	2240      	movs	r2, #64	; 0x40
 8005286:	4013      	ands	r3, r2
 8005288:	d01d      	beq.n	80052c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <UART_AdvFeatureConfig+0x15c>)
 8005292:	4013      	ands	r3, r2
 8005294:	0019      	movs	r1, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	035b      	lsls	r3, r3, #13
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d10b      	bne.n	80052c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	4a15      	ldr	r2, [pc, #84]	; (800530c <UART_AdvFeatureConfig+0x160>)
 80052b6:	4013      	ands	r3, r2
 80052b8:	0019      	movs	r1, r3
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	430a      	orrs	r2, r1
 80052c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	2280      	movs	r2, #128	; 0x80
 80052cc:	4013      	ands	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	4a0e      	ldr	r2, [pc, #56]	; (8005310 <UART_AdvFeatureConfig+0x164>)
 80052d8:	4013      	ands	r3, r2
 80052da:	0019      	movs	r1, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	430a      	orrs	r2, r1
 80052e6:	605a      	str	r2, [r3, #4]
  }
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	46bd      	mov	sp, r7
 80052ec:	b002      	add	sp, #8
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	fffdffff 	.word	0xfffdffff
 80052f4:	fffeffff 	.word	0xfffeffff
 80052f8:	fffbffff 	.word	0xfffbffff
 80052fc:	ffff7fff 	.word	0xffff7fff
 8005300:	ffffefff 	.word	0xffffefff
 8005304:	ffffdfff 	.word	0xffffdfff
 8005308:	ffefffff 	.word	0xffefffff
 800530c:	ff9fffff 	.word	0xff9fffff
 8005310:	fff7ffff 	.word	0xfff7ffff

08005314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b092      	sub	sp, #72	; 0x48
 8005318:	af02      	add	r7, sp, #8
 800531a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2284      	movs	r2, #132	; 0x84
 8005320:	2100      	movs	r1, #0
 8005322:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005324:	f7fc fa18 	bl	8001758 <HAL_GetTick>
 8005328:	0003      	movs	r3, r0
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2208      	movs	r2, #8
 8005334:	4013      	ands	r3, r2
 8005336:	2b08      	cmp	r3, #8
 8005338:	d12c      	bne.n	8005394 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800533a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800533c:	2280      	movs	r2, #128	; 0x80
 800533e:	0391      	lsls	r1, r2, #14
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	4a46      	ldr	r2, [pc, #280]	; (800545c <UART_CheckIdleState+0x148>)
 8005344:	9200      	str	r2, [sp, #0]
 8005346:	2200      	movs	r2, #0
 8005348:	f000 f88c 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 800534c:	1e03      	subs	r3, r0, #0
 800534e:	d021      	beq.n	8005394 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005350:	f3ef 8310 	mrs	r3, PRIMASK
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
 800535a:	2301      	movs	r3, #1
 800535c:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	f383 8810 	msr	PRIMASK, r3
}
 8005364:	46c0      	nop			; (mov r8, r8)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2180      	movs	r1, #128	; 0x80
 8005372:	438a      	bics	r2, r1
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800537c:	f383 8810 	msr	PRIMASK, r3
}
 8005380:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2278      	movs	r2, #120	; 0x78
 800538c:	2100      	movs	r1, #0
 800538e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e05f      	b.n	8005454 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2204      	movs	r2, #4
 800539c:	4013      	ands	r3, r2
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d146      	bne.n	8005430 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053a4:	2280      	movs	r2, #128	; 0x80
 80053a6:	03d1      	lsls	r1, r2, #15
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4a2c      	ldr	r2, [pc, #176]	; (800545c <UART_CheckIdleState+0x148>)
 80053ac:	9200      	str	r2, [sp, #0]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f000 f858 	bl	8005464 <UART_WaitOnFlagUntilTimeout>
 80053b4:	1e03      	subs	r3, r0, #0
 80053b6:	d03b      	beq.n	8005430 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053b8:	f3ef 8310 	mrs	r3, PRIMASK
 80053bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80053be:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053c0:	637b      	str	r3, [r7, #52]	; 0x34
 80053c2:	2301      	movs	r3, #1
 80053c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f383 8810 	msr	PRIMASK, r3
}
 80053cc:	46c0      	nop			; (mov r8, r8)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4921      	ldr	r1, [pc, #132]	; (8005460 <UART_CheckIdleState+0x14c>)
 80053da:	400a      	ands	r2, r1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f383 8810 	msr	PRIMASK, r3
}
 80053e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ea:	f3ef 8310 	mrs	r3, PRIMASK
 80053ee:	61bb      	str	r3, [r7, #24]
  return(result);
 80053f0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053f2:	633b      	str	r3, [r7, #48]	; 0x30
 80053f4:	2301      	movs	r3, #1
 80053f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	f383 8810 	msr	PRIMASK, r3
}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689a      	ldr	r2, [r3, #8]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2101      	movs	r1, #1
 800540c:	438a      	bics	r2, r1
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005412:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	6a3b      	ldr	r3, [r7, #32]
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2280      	movs	r2, #128	; 0x80
 8005420:	2120      	movs	r1, #32
 8005422:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2278      	movs	r2, #120	; 0x78
 8005428:	2100      	movs	r1, #0
 800542a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e011      	b.n	8005454 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2220      	movs	r2, #32
 8005434:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2280      	movs	r2, #128	; 0x80
 800543a:	2120      	movs	r1, #32
 800543c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2278      	movs	r2, #120	; 0x78
 800544e:	2100      	movs	r1, #0
 8005450:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	0018      	movs	r0, r3
 8005456:	46bd      	mov	sp, r7
 8005458:	b010      	add	sp, #64	; 0x40
 800545a:	bd80      	pop	{r7, pc}
 800545c:	01ffffff 	.word	0x01ffffff
 8005460:	fffffedf 	.word	0xfffffedf

08005464 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	603b      	str	r3, [r7, #0]
 8005470:	1dfb      	adds	r3, r7, #7
 8005472:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005474:	e04b      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	3301      	adds	r3, #1
 800547a:	d048      	beq.n	800550e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547c:	f7fc f96c 	bl	8001758 <HAL_GetTick>
 8005480:	0002      	movs	r2, r0
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <UART_WaitOnFlagUntilTimeout+0x2e>
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e04b      	b.n	800552e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2204      	movs	r2, #4
 800549e:	4013      	ands	r3, r2
 80054a0:	d035      	beq.n	800550e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	2208      	movs	r2, #8
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b08      	cmp	r3, #8
 80054ae:	d111      	bne.n	80054d4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2208      	movs	r2, #8
 80054b6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f000 f83c 	bl	8005538 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2284      	movs	r2, #132	; 0x84
 80054c4:	2108      	movs	r1, #8
 80054c6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2278      	movs	r2, #120	; 0x78
 80054cc:	2100      	movs	r1, #0
 80054ce:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	e02c      	b.n	800552e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	69da      	ldr	r2, [r3, #28]
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	401a      	ands	r2, r3
 80054e0:	2380      	movs	r3, #128	; 0x80
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d112      	bne.n	800550e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2280      	movs	r2, #128	; 0x80
 80054ee:	0112      	lsls	r2, r2, #4
 80054f0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 f81f 	bl	8005538 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2284      	movs	r2, #132	; 0x84
 80054fe:	2120      	movs	r1, #32
 8005500:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2278      	movs	r2, #120	; 0x78
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e00f      	b.n	800552e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	425a      	negs	r2, r3
 800551e:	4153      	adcs	r3, r2
 8005520:	b2db      	uxtb	r3, r3
 8005522:	001a      	movs	r2, r3
 8005524:	1dfb      	adds	r3, r7, #7
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d0a4      	beq.n	8005476 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	0018      	movs	r0, r3
 8005530:	46bd      	mov	sp, r7
 8005532:	b004      	add	sp, #16
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08e      	sub	sp, #56	; 0x38
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005540:	f3ef 8310 	mrs	r3, PRIMASK
 8005544:	617b      	str	r3, [r7, #20]
  return(result);
 8005546:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
 800554a:	2301      	movs	r3, #1
 800554c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	f383 8810 	msr	PRIMASK, r3
}
 8005554:	46c0      	nop			; (mov r8, r8)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4926      	ldr	r1, [pc, #152]	; (80055fc <UART_EndRxTransfer+0xc4>)
 8005562:	400a      	ands	r2, r1
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800556a:	69fb      	ldr	r3, [r7, #28]
 800556c:	f383 8810 	msr	PRIMASK, r3
}
 8005570:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005572:	f3ef 8310 	mrs	r3, PRIMASK
 8005576:	623b      	str	r3, [r7, #32]
  return(result);
 8005578:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800557a:	633b      	str	r3, [r7, #48]	; 0x30
 800557c:	2301      	movs	r3, #1
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	f383 8810 	msr	PRIMASK, r3
}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689a      	ldr	r2, [r3, #8]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2101      	movs	r1, #1
 8005594:	438a      	bics	r2, r1
 8005596:	609a      	str	r2, [r3, #8]
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	f383 8810 	msr	PRIMASK, r3
}
 80055a2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d118      	bne.n	80055de <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ac:	f3ef 8310 	mrs	r3, PRIMASK
 80055b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80055b2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055b6:	2301      	movs	r3, #1
 80055b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f383 8810 	msr	PRIMASK, r3
}
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2110      	movs	r1, #16
 80055ce:	438a      	bics	r2, r1
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	f383 8810 	msr	PRIMASK, r3
}
 80055dc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2280      	movs	r2, #128	; 0x80
 80055e2:	2120      	movs	r1, #32
 80055e4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	46bd      	mov	sp, r7
 80055f6:	b00e      	add	sp, #56	; 0x38
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	46c0      	nop			; (mov r8, r8)
 80055fc:	fffffedf 	.word	0xfffffedf

08005600 <__errno>:
 8005600:	4b01      	ldr	r3, [pc, #4]	; (8005608 <__errno+0x8>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	4770      	bx	lr
 8005606:	46c0      	nop			; (mov r8, r8)
 8005608:	20000010 	.word	0x20000010

0800560c <__libc_init_array>:
 800560c:	b570      	push	{r4, r5, r6, lr}
 800560e:	2600      	movs	r6, #0
 8005610:	4d0c      	ldr	r5, [pc, #48]	; (8005644 <__libc_init_array+0x38>)
 8005612:	4c0d      	ldr	r4, [pc, #52]	; (8005648 <__libc_init_array+0x3c>)
 8005614:	1b64      	subs	r4, r4, r5
 8005616:	10a4      	asrs	r4, r4, #2
 8005618:	42a6      	cmp	r6, r4
 800561a:	d109      	bne.n	8005630 <__libc_init_array+0x24>
 800561c:	2600      	movs	r6, #0
 800561e:	f000 fc8b 	bl	8005f38 <_init>
 8005622:	4d0a      	ldr	r5, [pc, #40]	; (800564c <__libc_init_array+0x40>)
 8005624:	4c0a      	ldr	r4, [pc, #40]	; (8005650 <__libc_init_array+0x44>)
 8005626:	1b64      	subs	r4, r4, r5
 8005628:	10a4      	asrs	r4, r4, #2
 800562a:	42a6      	cmp	r6, r4
 800562c:	d105      	bne.n	800563a <__libc_init_array+0x2e>
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	00b3      	lsls	r3, r6, #2
 8005632:	58eb      	ldr	r3, [r5, r3]
 8005634:	4798      	blx	r3
 8005636:	3601      	adds	r6, #1
 8005638:	e7ee      	b.n	8005618 <__libc_init_array+0xc>
 800563a:	00b3      	lsls	r3, r6, #2
 800563c:	58eb      	ldr	r3, [r5, r3]
 800563e:	4798      	blx	r3
 8005640:	3601      	adds	r6, #1
 8005642:	e7f2      	b.n	800562a <__libc_init_array+0x1e>
 8005644:	08005fec 	.word	0x08005fec
 8005648:	08005fec 	.word	0x08005fec
 800564c:	08005fec 	.word	0x08005fec
 8005650:	08005ff0 	.word	0x08005ff0

08005654 <memset>:
 8005654:	0003      	movs	r3, r0
 8005656:	1882      	adds	r2, r0, r2
 8005658:	4293      	cmp	r3, r2
 800565a:	d100      	bne.n	800565e <memset+0xa>
 800565c:	4770      	bx	lr
 800565e:	7019      	strb	r1, [r3, #0]
 8005660:	3301      	adds	r3, #1
 8005662:	e7f9      	b.n	8005658 <memset+0x4>

08005664 <siprintf>:
 8005664:	b40e      	push	{r1, r2, r3}
 8005666:	b500      	push	{lr}
 8005668:	490b      	ldr	r1, [pc, #44]	; (8005698 <siprintf+0x34>)
 800566a:	b09c      	sub	sp, #112	; 0x70
 800566c:	ab1d      	add	r3, sp, #116	; 0x74
 800566e:	9002      	str	r0, [sp, #8]
 8005670:	9006      	str	r0, [sp, #24]
 8005672:	9107      	str	r1, [sp, #28]
 8005674:	9104      	str	r1, [sp, #16]
 8005676:	4809      	ldr	r0, [pc, #36]	; (800569c <siprintf+0x38>)
 8005678:	4909      	ldr	r1, [pc, #36]	; (80056a0 <siprintf+0x3c>)
 800567a:	cb04      	ldmia	r3!, {r2}
 800567c:	9105      	str	r1, [sp, #20]
 800567e:	6800      	ldr	r0, [r0, #0]
 8005680:	a902      	add	r1, sp, #8
 8005682:	9301      	str	r3, [sp, #4]
 8005684:	f000 f870 	bl	8005768 <_svfiprintf_r>
 8005688:	2300      	movs	r3, #0
 800568a:	9a02      	ldr	r2, [sp, #8]
 800568c:	7013      	strb	r3, [r2, #0]
 800568e:	b01c      	add	sp, #112	; 0x70
 8005690:	bc08      	pop	{r3}
 8005692:	b003      	add	sp, #12
 8005694:	4718      	bx	r3
 8005696:	46c0      	nop			; (mov r8, r8)
 8005698:	7fffffff 	.word	0x7fffffff
 800569c:	20000010 	.word	0x20000010
 80056a0:	ffff0208 	.word	0xffff0208

080056a4 <__ssputs_r>:
 80056a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80056a6:	688e      	ldr	r6, [r1, #8]
 80056a8:	b085      	sub	sp, #20
 80056aa:	0007      	movs	r7, r0
 80056ac:	000c      	movs	r4, r1
 80056ae:	9203      	str	r2, [sp, #12]
 80056b0:	9301      	str	r3, [sp, #4]
 80056b2:	429e      	cmp	r6, r3
 80056b4:	d83c      	bhi.n	8005730 <__ssputs_r+0x8c>
 80056b6:	2390      	movs	r3, #144	; 0x90
 80056b8:	898a      	ldrh	r2, [r1, #12]
 80056ba:	00db      	lsls	r3, r3, #3
 80056bc:	421a      	tst	r2, r3
 80056be:	d034      	beq.n	800572a <__ssputs_r+0x86>
 80056c0:	6909      	ldr	r1, [r1, #16]
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	6960      	ldr	r0, [r4, #20]
 80056c6:	1a5b      	subs	r3, r3, r1
 80056c8:	9302      	str	r3, [sp, #8]
 80056ca:	2303      	movs	r3, #3
 80056cc:	4343      	muls	r3, r0
 80056ce:	0fdd      	lsrs	r5, r3, #31
 80056d0:	18ed      	adds	r5, r5, r3
 80056d2:	9b01      	ldr	r3, [sp, #4]
 80056d4:	9802      	ldr	r0, [sp, #8]
 80056d6:	3301      	adds	r3, #1
 80056d8:	181b      	adds	r3, r3, r0
 80056da:	106d      	asrs	r5, r5, #1
 80056dc:	42ab      	cmp	r3, r5
 80056de:	d900      	bls.n	80056e2 <__ssputs_r+0x3e>
 80056e0:	001d      	movs	r5, r3
 80056e2:	0553      	lsls	r3, r2, #21
 80056e4:	d532      	bpl.n	800574c <__ssputs_r+0xa8>
 80056e6:	0029      	movs	r1, r5
 80056e8:	0038      	movs	r0, r7
 80056ea:	f000 fb53 	bl	8005d94 <_malloc_r>
 80056ee:	1e06      	subs	r6, r0, #0
 80056f0:	d109      	bne.n	8005706 <__ssputs_r+0x62>
 80056f2:	230c      	movs	r3, #12
 80056f4:	603b      	str	r3, [r7, #0]
 80056f6:	2340      	movs	r3, #64	; 0x40
 80056f8:	2001      	movs	r0, #1
 80056fa:	89a2      	ldrh	r2, [r4, #12]
 80056fc:	4240      	negs	r0, r0
 80056fe:	4313      	orrs	r3, r2
 8005700:	81a3      	strh	r3, [r4, #12]
 8005702:	b005      	add	sp, #20
 8005704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005706:	9a02      	ldr	r2, [sp, #8]
 8005708:	6921      	ldr	r1, [r4, #16]
 800570a:	f000 faba 	bl	8005c82 <memcpy>
 800570e:	89a3      	ldrh	r3, [r4, #12]
 8005710:	4a14      	ldr	r2, [pc, #80]	; (8005764 <__ssputs_r+0xc0>)
 8005712:	401a      	ands	r2, r3
 8005714:	2380      	movs	r3, #128	; 0x80
 8005716:	4313      	orrs	r3, r2
 8005718:	81a3      	strh	r3, [r4, #12]
 800571a:	9b02      	ldr	r3, [sp, #8]
 800571c:	6126      	str	r6, [r4, #16]
 800571e:	18f6      	adds	r6, r6, r3
 8005720:	6026      	str	r6, [r4, #0]
 8005722:	6165      	str	r5, [r4, #20]
 8005724:	9e01      	ldr	r6, [sp, #4]
 8005726:	1aed      	subs	r5, r5, r3
 8005728:	60a5      	str	r5, [r4, #8]
 800572a:	9b01      	ldr	r3, [sp, #4]
 800572c:	429e      	cmp	r6, r3
 800572e:	d900      	bls.n	8005732 <__ssputs_r+0x8e>
 8005730:	9e01      	ldr	r6, [sp, #4]
 8005732:	0032      	movs	r2, r6
 8005734:	9903      	ldr	r1, [sp, #12]
 8005736:	6820      	ldr	r0, [r4, #0]
 8005738:	f000 faac 	bl	8005c94 <memmove>
 800573c:	68a3      	ldr	r3, [r4, #8]
 800573e:	2000      	movs	r0, #0
 8005740:	1b9b      	subs	r3, r3, r6
 8005742:	60a3      	str	r3, [r4, #8]
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	199e      	adds	r6, r3, r6
 8005748:	6026      	str	r6, [r4, #0]
 800574a:	e7da      	b.n	8005702 <__ssputs_r+0x5e>
 800574c:	002a      	movs	r2, r5
 800574e:	0038      	movs	r0, r7
 8005750:	f000 fb96 	bl	8005e80 <_realloc_r>
 8005754:	1e06      	subs	r6, r0, #0
 8005756:	d1e0      	bne.n	800571a <__ssputs_r+0x76>
 8005758:	0038      	movs	r0, r7
 800575a:	6921      	ldr	r1, [r4, #16]
 800575c:	f000 faae 	bl	8005cbc <_free_r>
 8005760:	e7c7      	b.n	80056f2 <__ssputs_r+0x4e>
 8005762:	46c0      	nop			; (mov r8, r8)
 8005764:	fffffb7f 	.word	0xfffffb7f

08005768 <_svfiprintf_r>:
 8005768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800576a:	b0a1      	sub	sp, #132	; 0x84
 800576c:	9003      	str	r0, [sp, #12]
 800576e:	001d      	movs	r5, r3
 8005770:	898b      	ldrh	r3, [r1, #12]
 8005772:	000f      	movs	r7, r1
 8005774:	0016      	movs	r6, r2
 8005776:	061b      	lsls	r3, r3, #24
 8005778:	d511      	bpl.n	800579e <_svfiprintf_r+0x36>
 800577a:	690b      	ldr	r3, [r1, #16]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10e      	bne.n	800579e <_svfiprintf_r+0x36>
 8005780:	2140      	movs	r1, #64	; 0x40
 8005782:	f000 fb07 	bl	8005d94 <_malloc_r>
 8005786:	6038      	str	r0, [r7, #0]
 8005788:	6138      	str	r0, [r7, #16]
 800578a:	2800      	cmp	r0, #0
 800578c:	d105      	bne.n	800579a <_svfiprintf_r+0x32>
 800578e:	230c      	movs	r3, #12
 8005790:	9a03      	ldr	r2, [sp, #12]
 8005792:	3801      	subs	r0, #1
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	b021      	add	sp, #132	; 0x84
 8005798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800579a:	2340      	movs	r3, #64	; 0x40
 800579c:	617b      	str	r3, [r7, #20]
 800579e:	2300      	movs	r3, #0
 80057a0:	ac08      	add	r4, sp, #32
 80057a2:	6163      	str	r3, [r4, #20]
 80057a4:	3320      	adds	r3, #32
 80057a6:	7663      	strb	r3, [r4, #25]
 80057a8:	3310      	adds	r3, #16
 80057aa:	76a3      	strb	r3, [r4, #26]
 80057ac:	9507      	str	r5, [sp, #28]
 80057ae:	0035      	movs	r5, r6
 80057b0:	782b      	ldrb	r3, [r5, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <_svfiprintf_r+0x52>
 80057b6:	2b25      	cmp	r3, #37	; 0x25
 80057b8:	d147      	bne.n	800584a <_svfiprintf_r+0xe2>
 80057ba:	1bab      	subs	r3, r5, r6
 80057bc:	9305      	str	r3, [sp, #20]
 80057be:	42b5      	cmp	r5, r6
 80057c0:	d00c      	beq.n	80057dc <_svfiprintf_r+0x74>
 80057c2:	0032      	movs	r2, r6
 80057c4:	0039      	movs	r1, r7
 80057c6:	9803      	ldr	r0, [sp, #12]
 80057c8:	f7ff ff6c 	bl	80056a4 <__ssputs_r>
 80057cc:	1c43      	adds	r3, r0, #1
 80057ce:	d100      	bne.n	80057d2 <_svfiprintf_r+0x6a>
 80057d0:	e0ae      	b.n	8005930 <_svfiprintf_r+0x1c8>
 80057d2:	6962      	ldr	r2, [r4, #20]
 80057d4:	9b05      	ldr	r3, [sp, #20]
 80057d6:	4694      	mov	ip, r2
 80057d8:	4463      	add	r3, ip
 80057da:	6163      	str	r3, [r4, #20]
 80057dc:	782b      	ldrb	r3, [r5, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d100      	bne.n	80057e4 <_svfiprintf_r+0x7c>
 80057e2:	e0a5      	b.n	8005930 <_svfiprintf_r+0x1c8>
 80057e4:	2201      	movs	r2, #1
 80057e6:	2300      	movs	r3, #0
 80057e8:	4252      	negs	r2, r2
 80057ea:	6062      	str	r2, [r4, #4]
 80057ec:	a904      	add	r1, sp, #16
 80057ee:	3254      	adds	r2, #84	; 0x54
 80057f0:	1852      	adds	r2, r2, r1
 80057f2:	1c6e      	adds	r6, r5, #1
 80057f4:	6023      	str	r3, [r4, #0]
 80057f6:	60e3      	str	r3, [r4, #12]
 80057f8:	60a3      	str	r3, [r4, #8]
 80057fa:	7013      	strb	r3, [r2, #0]
 80057fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80057fe:	2205      	movs	r2, #5
 8005800:	7831      	ldrb	r1, [r6, #0]
 8005802:	4854      	ldr	r0, [pc, #336]	; (8005954 <_svfiprintf_r+0x1ec>)
 8005804:	f000 fa32 	bl	8005c6c <memchr>
 8005808:	1c75      	adds	r5, r6, #1
 800580a:	2800      	cmp	r0, #0
 800580c:	d11f      	bne.n	800584e <_svfiprintf_r+0xe6>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	06d3      	lsls	r3, r2, #27
 8005812:	d504      	bpl.n	800581e <_svfiprintf_r+0xb6>
 8005814:	2353      	movs	r3, #83	; 0x53
 8005816:	a904      	add	r1, sp, #16
 8005818:	185b      	adds	r3, r3, r1
 800581a:	2120      	movs	r1, #32
 800581c:	7019      	strb	r1, [r3, #0]
 800581e:	0713      	lsls	r3, r2, #28
 8005820:	d504      	bpl.n	800582c <_svfiprintf_r+0xc4>
 8005822:	2353      	movs	r3, #83	; 0x53
 8005824:	a904      	add	r1, sp, #16
 8005826:	185b      	adds	r3, r3, r1
 8005828:	212b      	movs	r1, #43	; 0x2b
 800582a:	7019      	strb	r1, [r3, #0]
 800582c:	7833      	ldrb	r3, [r6, #0]
 800582e:	2b2a      	cmp	r3, #42	; 0x2a
 8005830:	d016      	beq.n	8005860 <_svfiprintf_r+0xf8>
 8005832:	0035      	movs	r5, r6
 8005834:	2100      	movs	r1, #0
 8005836:	200a      	movs	r0, #10
 8005838:	68e3      	ldr	r3, [r4, #12]
 800583a:	782a      	ldrb	r2, [r5, #0]
 800583c:	1c6e      	adds	r6, r5, #1
 800583e:	3a30      	subs	r2, #48	; 0x30
 8005840:	2a09      	cmp	r2, #9
 8005842:	d94e      	bls.n	80058e2 <_svfiprintf_r+0x17a>
 8005844:	2900      	cmp	r1, #0
 8005846:	d111      	bne.n	800586c <_svfiprintf_r+0x104>
 8005848:	e017      	b.n	800587a <_svfiprintf_r+0x112>
 800584a:	3501      	adds	r5, #1
 800584c:	e7b0      	b.n	80057b0 <_svfiprintf_r+0x48>
 800584e:	4b41      	ldr	r3, [pc, #260]	; (8005954 <_svfiprintf_r+0x1ec>)
 8005850:	6822      	ldr	r2, [r4, #0]
 8005852:	1ac0      	subs	r0, r0, r3
 8005854:	2301      	movs	r3, #1
 8005856:	4083      	lsls	r3, r0
 8005858:	4313      	orrs	r3, r2
 800585a:	002e      	movs	r6, r5
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	e7ce      	b.n	80057fe <_svfiprintf_r+0x96>
 8005860:	9b07      	ldr	r3, [sp, #28]
 8005862:	1d19      	adds	r1, r3, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	9107      	str	r1, [sp, #28]
 8005868:	2b00      	cmp	r3, #0
 800586a:	db01      	blt.n	8005870 <_svfiprintf_r+0x108>
 800586c:	930b      	str	r3, [sp, #44]	; 0x2c
 800586e:	e004      	b.n	800587a <_svfiprintf_r+0x112>
 8005870:	425b      	negs	r3, r3
 8005872:	60e3      	str	r3, [r4, #12]
 8005874:	2302      	movs	r3, #2
 8005876:	4313      	orrs	r3, r2
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	782b      	ldrb	r3, [r5, #0]
 800587c:	2b2e      	cmp	r3, #46	; 0x2e
 800587e:	d10a      	bne.n	8005896 <_svfiprintf_r+0x12e>
 8005880:	786b      	ldrb	r3, [r5, #1]
 8005882:	2b2a      	cmp	r3, #42	; 0x2a
 8005884:	d135      	bne.n	80058f2 <_svfiprintf_r+0x18a>
 8005886:	9b07      	ldr	r3, [sp, #28]
 8005888:	3502      	adds	r5, #2
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	9207      	str	r2, [sp, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	db2b      	blt.n	80058ec <_svfiprintf_r+0x184>
 8005894:	9309      	str	r3, [sp, #36]	; 0x24
 8005896:	4e30      	ldr	r6, [pc, #192]	; (8005958 <_svfiprintf_r+0x1f0>)
 8005898:	2203      	movs	r2, #3
 800589a:	0030      	movs	r0, r6
 800589c:	7829      	ldrb	r1, [r5, #0]
 800589e:	f000 f9e5 	bl	8005c6c <memchr>
 80058a2:	2800      	cmp	r0, #0
 80058a4:	d006      	beq.n	80058b4 <_svfiprintf_r+0x14c>
 80058a6:	2340      	movs	r3, #64	; 0x40
 80058a8:	1b80      	subs	r0, r0, r6
 80058aa:	4083      	lsls	r3, r0
 80058ac:	6822      	ldr	r2, [r4, #0]
 80058ae:	3501      	adds	r5, #1
 80058b0:	4313      	orrs	r3, r2
 80058b2:	6023      	str	r3, [r4, #0]
 80058b4:	7829      	ldrb	r1, [r5, #0]
 80058b6:	2206      	movs	r2, #6
 80058b8:	4828      	ldr	r0, [pc, #160]	; (800595c <_svfiprintf_r+0x1f4>)
 80058ba:	1c6e      	adds	r6, r5, #1
 80058bc:	7621      	strb	r1, [r4, #24]
 80058be:	f000 f9d5 	bl	8005c6c <memchr>
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d03c      	beq.n	8005940 <_svfiprintf_r+0x1d8>
 80058c6:	4b26      	ldr	r3, [pc, #152]	; (8005960 <_svfiprintf_r+0x1f8>)
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d125      	bne.n	8005918 <_svfiprintf_r+0x1b0>
 80058cc:	2207      	movs	r2, #7
 80058ce:	9b07      	ldr	r3, [sp, #28]
 80058d0:	3307      	adds	r3, #7
 80058d2:	4393      	bics	r3, r2
 80058d4:	3308      	adds	r3, #8
 80058d6:	9307      	str	r3, [sp, #28]
 80058d8:	6963      	ldr	r3, [r4, #20]
 80058da:	9a04      	ldr	r2, [sp, #16]
 80058dc:	189b      	adds	r3, r3, r2
 80058de:	6163      	str	r3, [r4, #20]
 80058e0:	e765      	b.n	80057ae <_svfiprintf_r+0x46>
 80058e2:	4343      	muls	r3, r0
 80058e4:	0035      	movs	r5, r6
 80058e6:	2101      	movs	r1, #1
 80058e8:	189b      	adds	r3, r3, r2
 80058ea:	e7a6      	b.n	800583a <_svfiprintf_r+0xd2>
 80058ec:	2301      	movs	r3, #1
 80058ee:	425b      	negs	r3, r3
 80058f0:	e7d0      	b.n	8005894 <_svfiprintf_r+0x12c>
 80058f2:	2300      	movs	r3, #0
 80058f4:	200a      	movs	r0, #10
 80058f6:	001a      	movs	r2, r3
 80058f8:	3501      	adds	r5, #1
 80058fa:	6063      	str	r3, [r4, #4]
 80058fc:	7829      	ldrb	r1, [r5, #0]
 80058fe:	1c6e      	adds	r6, r5, #1
 8005900:	3930      	subs	r1, #48	; 0x30
 8005902:	2909      	cmp	r1, #9
 8005904:	d903      	bls.n	800590e <_svfiprintf_r+0x1a6>
 8005906:	2b00      	cmp	r3, #0
 8005908:	d0c5      	beq.n	8005896 <_svfiprintf_r+0x12e>
 800590a:	9209      	str	r2, [sp, #36]	; 0x24
 800590c:	e7c3      	b.n	8005896 <_svfiprintf_r+0x12e>
 800590e:	4342      	muls	r2, r0
 8005910:	0035      	movs	r5, r6
 8005912:	2301      	movs	r3, #1
 8005914:	1852      	adds	r2, r2, r1
 8005916:	e7f1      	b.n	80058fc <_svfiprintf_r+0x194>
 8005918:	ab07      	add	r3, sp, #28
 800591a:	9300      	str	r3, [sp, #0]
 800591c:	003a      	movs	r2, r7
 800591e:	0021      	movs	r1, r4
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <_svfiprintf_r+0x1fc>)
 8005922:	9803      	ldr	r0, [sp, #12]
 8005924:	e000      	b.n	8005928 <_svfiprintf_r+0x1c0>
 8005926:	bf00      	nop
 8005928:	9004      	str	r0, [sp, #16]
 800592a:	9b04      	ldr	r3, [sp, #16]
 800592c:	3301      	adds	r3, #1
 800592e:	d1d3      	bne.n	80058d8 <_svfiprintf_r+0x170>
 8005930:	89bb      	ldrh	r3, [r7, #12]
 8005932:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005934:	065b      	lsls	r3, r3, #25
 8005936:	d400      	bmi.n	800593a <_svfiprintf_r+0x1d2>
 8005938:	e72d      	b.n	8005796 <_svfiprintf_r+0x2e>
 800593a:	2001      	movs	r0, #1
 800593c:	4240      	negs	r0, r0
 800593e:	e72a      	b.n	8005796 <_svfiprintf_r+0x2e>
 8005940:	ab07      	add	r3, sp, #28
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	003a      	movs	r2, r7
 8005946:	0021      	movs	r1, r4
 8005948:	4b06      	ldr	r3, [pc, #24]	; (8005964 <_svfiprintf_r+0x1fc>)
 800594a:	9803      	ldr	r0, [sp, #12]
 800594c:	f000 f87c 	bl	8005a48 <_printf_i>
 8005950:	e7ea      	b.n	8005928 <_svfiprintf_r+0x1c0>
 8005952:	46c0      	nop			; (mov r8, r8)
 8005954:	08005fb8 	.word	0x08005fb8
 8005958:	08005fbe 	.word	0x08005fbe
 800595c:	08005fc2 	.word	0x08005fc2
 8005960:	00000000 	.word	0x00000000
 8005964:	080056a5 	.word	0x080056a5

08005968 <_printf_common>:
 8005968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800596a:	0015      	movs	r5, r2
 800596c:	9301      	str	r3, [sp, #4]
 800596e:	688a      	ldr	r2, [r1, #8]
 8005970:	690b      	ldr	r3, [r1, #16]
 8005972:	000c      	movs	r4, r1
 8005974:	9000      	str	r0, [sp, #0]
 8005976:	4293      	cmp	r3, r2
 8005978:	da00      	bge.n	800597c <_printf_common+0x14>
 800597a:	0013      	movs	r3, r2
 800597c:	0022      	movs	r2, r4
 800597e:	602b      	str	r3, [r5, #0]
 8005980:	3243      	adds	r2, #67	; 0x43
 8005982:	7812      	ldrb	r2, [r2, #0]
 8005984:	2a00      	cmp	r2, #0
 8005986:	d001      	beq.n	800598c <_printf_common+0x24>
 8005988:	3301      	adds	r3, #1
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	069b      	lsls	r3, r3, #26
 8005990:	d502      	bpl.n	8005998 <_printf_common+0x30>
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	3302      	adds	r3, #2
 8005996:	602b      	str	r3, [r5, #0]
 8005998:	6822      	ldr	r2, [r4, #0]
 800599a:	2306      	movs	r3, #6
 800599c:	0017      	movs	r7, r2
 800599e:	401f      	ands	r7, r3
 80059a0:	421a      	tst	r2, r3
 80059a2:	d027      	beq.n	80059f4 <_printf_common+0x8c>
 80059a4:	0023      	movs	r3, r4
 80059a6:	3343      	adds	r3, #67	; 0x43
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	1e5a      	subs	r2, r3, #1
 80059ac:	4193      	sbcs	r3, r2
 80059ae:	6822      	ldr	r2, [r4, #0]
 80059b0:	0692      	lsls	r2, r2, #26
 80059b2:	d430      	bmi.n	8005a16 <_printf_common+0xae>
 80059b4:	0022      	movs	r2, r4
 80059b6:	9901      	ldr	r1, [sp, #4]
 80059b8:	9800      	ldr	r0, [sp, #0]
 80059ba:	9e08      	ldr	r6, [sp, #32]
 80059bc:	3243      	adds	r2, #67	; 0x43
 80059be:	47b0      	blx	r6
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d025      	beq.n	8005a10 <_printf_common+0xa8>
 80059c4:	2306      	movs	r3, #6
 80059c6:	6820      	ldr	r0, [r4, #0]
 80059c8:	682a      	ldr	r2, [r5, #0]
 80059ca:	68e1      	ldr	r1, [r4, #12]
 80059cc:	2500      	movs	r5, #0
 80059ce:	4003      	ands	r3, r0
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d103      	bne.n	80059dc <_printf_common+0x74>
 80059d4:	1a8d      	subs	r5, r1, r2
 80059d6:	43eb      	mvns	r3, r5
 80059d8:	17db      	asrs	r3, r3, #31
 80059da:	401d      	ands	r5, r3
 80059dc:	68a3      	ldr	r3, [r4, #8]
 80059de:	6922      	ldr	r2, [r4, #16]
 80059e0:	4293      	cmp	r3, r2
 80059e2:	dd01      	ble.n	80059e8 <_printf_common+0x80>
 80059e4:	1a9b      	subs	r3, r3, r2
 80059e6:	18ed      	adds	r5, r5, r3
 80059e8:	2700      	movs	r7, #0
 80059ea:	42bd      	cmp	r5, r7
 80059ec:	d120      	bne.n	8005a30 <_printf_common+0xc8>
 80059ee:	2000      	movs	r0, #0
 80059f0:	e010      	b.n	8005a14 <_printf_common+0xac>
 80059f2:	3701      	adds	r7, #1
 80059f4:	68e3      	ldr	r3, [r4, #12]
 80059f6:	682a      	ldr	r2, [r5, #0]
 80059f8:	1a9b      	subs	r3, r3, r2
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	ddd2      	ble.n	80059a4 <_printf_common+0x3c>
 80059fe:	0022      	movs	r2, r4
 8005a00:	2301      	movs	r3, #1
 8005a02:	9901      	ldr	r1, [sp, #4]
 8005a04:	9800      	ldr	r0, [sp, #0]
 8005a06:	9e08      	ldr	r6, [sp, #32]
 8005a08:	3219      	adds	r2, #25
 8005a0a:	47b0      	blx	r6
 8005a0c:	1c43      	adds	r3, r0, #1
 8005a0e:	d1f0      	bne.n	80059f2 <_printf_common+0x8a>
 8005a10:	2001      	movs	r0, #1
 8005a12:	4240      	negs	r0, r0
 8005a14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005a16:	2030      	movs	r0, #48	; 0x30
 8005a18:	18e1      	adds	r1, r4, r3
 8005a1a:	3143      	adds	r1, #67	; 0x43
 8005a1c:	7008      	strb	r0, [r1, #0]
 8005a1e:	0021      	movs	r1, r4
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	3145      	adds	r1, #69	; 0x45
 8005a24:	7809      	ldrb	r1, [r1, #0]
 8005a26:	18a2      	adds	r2, r4, r2
 8005a28:	3243      	adds	r2, #67	; 0x43
 8005a2a:	3302      	adds	r3, #2
 8005a2c:	7011      	strb	r1, [r2, #0]
 8005a2e:	e7c1      	b.n	80059b4 <_printf_common+0x4c>
 8005a30:	0022      	movs	r2, r4
 8005a32:	2301      	movs	r3, #1
 8005a34:	9901      	ldr	r1, [sp, #4]
 8005a36:	9800      	ldr	r0, [sp, #0]
 8005a38:	9e08      	ldr	r6, [sp, #32]
 8005a3a:	321a      	adds	r2, #26
 8005a3c:	47b0      	blx	r6
 8005a3e:	1c43      	adds	r3, r0, #1
 8005a40:	d0e6      	beq.n	8005a10 <_printf_common+0xa8>
 8005a42:	3701      	adds	r7, #1
 8005a44:	e7d1      	b.n	80059ea <_printf_common+0x82>
	...

08005a48 <_printf_i>:
 8005a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a4a:	b08b      	sub	sp, #44	; 0x2c
 8005a4c:	9206      	str	r2, [sp, #24]
 8005a4e:	000a      	movs	r2, r1
 8005a50:	3243      	adds	r2, #67	; 0x43
 8005a52:	9307      	str	r3, [sp, #28]
 8005a54:	9005      	str	r0, [sp, #20]
 8005a56:	9204      	str	r2, [sp, #16]
 8005a58:	7e0a      	ldrb	r2, [r1, #24]
 8005a5a:	000c      	movs	r4, r1
 8005a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a5e:	2a78      	cmp	r2, #120	; 0x78
 8005a60:	d807      	bhi.n	8005a72 <_printf_i+0x2a>
 8005a62:	2a62      	cmp	r2, #98	; 0x62
 8005a64:	d809      	bhi.n	8005a7a <_printf_i+0x32>
 8005a66:	2a00      	cmp	r2, #0
 8005a68:	d100      	bne.n	8005a6c <_printf_i+0x24>
 8005a6a:	e0c1      	b.n	8005bf0 <_printf_i+0x1a8>
 8005a6c:	2a58      	cmp	r2, #88	; 0x58
 8005a6e:	d100      	bne.n	8005a72 <_printf_i+0x2a>
 8005a70:	e08c      	b.n	8005b8c <_printf_i+0x144>
 8005a72:	0026      	movs	r6, r4
 8005a74:	3642      	adds	r6, #66	; 0x42
 8005a76:	7032      	strb	r2, [r6, #0]
 8005a78:	e022      	b.n	8005ac0 <_printf_i+0x78>
 8005a7a:	0010      	movs	r0, r2
 8005a7c:	3863      	subs	r0, #99	; 0x63
 8005a7e:	2815      	cmp	r0, #21
 8005a80:	d8f7      	bhi.n	8005a72 <_printf_i+0x2a>
 8005a82:	f7fa fb3f 	bl	8000104 <__gnu_thumb1_case_shi>
 8005a86:	0016      	.short	0x0016
 8005a88:	fff6001f 	.word	0xfff6001f
 8005a8c:	fff6fff6 	.word	0xfff6fff6
 8005a90:	001ffff6 	.word	0x001ffff6
 8005a94:	fff6fff6 	.word	0xfff6fff6
 8005a98:	fff6fff6 	.word	0xfff6fff6
 8005a9c:	003600a8 	.word	0x003600a8
 8005aa0:	fff6009a 	.word	0xfff6009a
 8005aa4:	00b9fff6 	.word	0x00b9fff6
 8005aa8:	0036fff6 	.word	0x0036fff6
 8005aac:	fff6fff6 	.word	0xfff6fff6
 8005ab0:	009e      	.short	0x009e
 8005ab2:	0026      	movs	r6, r4
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	3642      	adds	r6, #66	; 0x42
 8005ab8:	1d11      	adds	r1, r2, #4
 8005aba:	6019      	str	r1, [r3, #0]
 8005abc:	6813      	ldr	r3, [r2, #0]
 8005abe:	7033      	strb	r3, [r6, #0]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0a7      	b.n	8005c14 <_printf_i+0x1cc>
 8005ac4:	6808      	ldr	r0, [r1, #0]
 8005ac6:	6819      	ldr	r1, [r3, #0]
 8005ac8:	1d0a      	adds	r2, r1, #4
 8005aca:	0605      	lsls	r5, r0, #24
 8005acc:	d50b      	bpl.n	8005ae6 <_printf_i+0x9e>
 8005ace:	680d      	ldr	r5, [r1, #0]
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	2d00      	cmp	r5, #0
 8005ad4:	da03      	bge.n	8005ade <_printf_i+0x96>
 8005ad6:	232d      	movs	r3, #45	; 0x2d
 8005ad8:	9a04      	ldr	r2, [sp, #16]
 8005ada:	426d      	negs	r5, r5
 8005adc:	7013      	strb	r3, [r2, #0]
 8005ade:	4b61      	ldr	r3, [pc, #388]	; (8005c64 <_printf_i+0x21c>)
 8005ae0:	270a      	movs	r7, #10
 8005ae2:	9303      	str	r3, [sp, #12]
 8005ae4:	e01b      	b.n	8005b1e <_printf_i+0xd6>
 8005ae6:	680d      	ldr	r5, [r1, #0]
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	0641      	lsls	r1, r0, #25
 8005aec:	d5f1      	bpl.n	8005ad2 <_printf_i+0x8a>
 8005aee:	b22d      	sxth	r5, r5
 8005af0:	e7ef      	b.n	8005ad2 <_printf_i+0x8a>
 8005af2:	680d      	ldr	r5, [r1, #0]
 8005af4:	6819      	ldr	r1, [r3, #0]
 8005af6:	1d08      	adds	r0, r1, #4
 8005af8:	6018      	str	r0, [r3, #0]
 8005afa:	062e      	lsls	r6, r5, #24
 8005afc:	d501      	bpl.n	8005b02 <_printf_i+0xba>
 8005afe:	680d      	ldr	r5, [r1, #0]
 8005b00:	e003      	b.n	8005b0a <_printf_i+0xc2>
 8005b02:	066d      	lsls	r5, r5, #25
 8005b04:	d5fb      	bpl.n	8005afe <_printf_i+0xb6>
 8005b06:	680d      	ldr	r5, [r1, #0]
 8005b08:	b2ad      	uxth	r5, r5
 8005b0a:	4b56      	ldr	r3, [pc, #344]	; (8005c64 <_printf_i+0x21c>)
 8005b0c:	2708      	movs	r7, #8
 8005b0e:	9303      	str	r3, [sp, #12]
 8005b10:	2a6f      	cmp	r2, #111	; 0x6f
 8005b12:	d000      	beq.n	8005b16 <_printf_i+0xce>
 8005b14:	3702      	adds	r7, #2
 8005b16:	0023      	movs	r3, r4
 8005b18:	2200      	movs	r2, #0
 8005b1a:	3343      	adds	r3, #67	; 0x43
 8005b1c:	701a      	strb	r2, [r3, #0]
 8005b1e:	6863      	ldr	r3, [r4, #4]
 8005b20:	60a3      	str	r3, [r4, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	db03      	blt.n	8005b2e <_printf_i+0xe6>
 8005b26:	2204      	movs	r2, #4
 8005b28:	6821      	ldr	r1, [r4, #0]
 8005b2a:	4391      	bics	r1, r2
 8005b2c:	6021      	str	r1, [r4, #0]
 8005b2e:	2d00      	cmp	r5, #0
 8005b30:	d102      	bne.n	8005b38 <_printf_i+0xf0>
 8005b32:	9e04      	ldr	r6, [sp, #16]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00c      	beq.n	8005b52 <_printf_i+0x10a>
 8005b38:	9e04      	ldr	r6, [sp, #16]
 8005b3a:	0028      	movs	r0, r5
 8005b3c:	0039      	movs	r1, r7
 8005b3e:	f7fa fb71 	bl	8000224 <__aeabi_uidivmod>
 8005b42:	9b03      	ldr	r3, [sp, #12]
 8005b44:	3e01      	subs	r6, #1
 8005b46:	5c5b      	ldrb	r3, [r3, r1]
 8005b48:	7033      	strb	r3, [r6, #0]
 8005b4a:	002b      	movs	r3, r5
 8005b4c:	0005      	movs	r5, r0
 8005b4e:	429f      	cmp	r7, r3
 8005b50:	d9f3      	bls.n	8005b3a <_printf_i+0xf2>
 8005b52:	2f08      	cmp	r7, #8
 8005b54:	d109      	bne.n	8005b6a <_printf_i+0x122>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	07db      	lsls	r3, r3, #31
 8005b5a:	d506      	bpl.n	8005b6a <_printf_i+0x122>
 8005b5c:	6863      	ldr	r3, [r4, #4]
 8005b5e:	6922      	ldr	r2, [r4, #16]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	dc02      	bgt.n	8005b6a <_printf_i+0x122>
 8005b64:	2330      	movs	r3, #48	; 0x30
 8005b66:	3e01      	subs	r6, #1
 8005b68:	7033      	strb	r3, [r6, #0]
 8005b6a:	9b04      	ldr	r3, [sp, #16]
 8005b6c:	1b9b      	subs	r3, r3, r6
 8005b6e:	6123      	str	r3, [r4, #16]
 8005b70:	9b07      	ldr	r3, [sp, #28]
 8005b72:	0021      	movs	r1, r4
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	9805      	ldr	r0, [sp, #20]
 8005b78:	9b06      	ldr	r3, [sp, #24]
 8005b7a:	aa09      	add	r2, sp, #36	; 0x24
 8005b7c:	f7ff fef4 	bl	8005968 <_printf_common>
 8005b80:	1c43      	adds	r3, r0, #1
 8005b82:	d14c      	bne.n	8005c1e <_printf_i+0x1d6>
 8005b84:	2001      	movs	r0, #1
 8005b86:	4240      	negs	r0, r0
 8005b88:	b00b      	add	sp, #44	; 0x2c
 8005b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b8c:	3145      	adds	r1, #69	; 0x45
 8005b8e:	700a      	strb	r2, [r1, #0]
 8005b90:	4a34      	ldr	r2, [pc, #208]	; (8005c64 <_printf_i+0x21c>)
 8005b92:	9203      	str	r2, [sp, #12]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	6821      	ldr	r1, [r4, #0]
 8005b98:	ca20      	ldmia	r2!, {r5}
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	0608      	lsls	r0, r1, #24
 8005b9e:	d516      	bpl.n	8005bce <_printf_i+0x186>
 8005ba0:	07cb      	lsls	r3, r1, #31
 8005ba2:	d502      	bpl.n	8005baa <_printf_i+0x162>
 8005ba4:	2320      	movs	r3, #32
 8005ba6:	4319      	orrs	r1, r3
 8005ba8:	6021      	str	r1, [r4, #0]
 8005baa:	2710      	movs	r7, #16
 8005bac:	2d00      	cmp	r5, #0
 8005bae:	d1b2      	bne.n	8005b16 <_printf_i+0xce>
 8005bb0:	2320      	movs	r3, #32
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	439a      	bics	r2, r3
 8005bb6:	6022      	str	r2, [r4, #0]
 8005bb8:	e7ad      	b.n	8005b16 <_printf_i+0xce>
 8005bba:	2220      	movs	r2, #32
 8005bbc:	6809      	ldr	r1, [r1, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	6022      	str	r2, [r4, #0]
 8005bc2:	0022      	movs	r2, r4
 8005bc4:	2178      	movs	r1, #120	; 0x78
 8005bc6:	3245      	adds	r2, #69	; 0x45
 8005bc8:	7011      	strb	r1, [r2, #0]
 8005bca:	4a27      	ldr	r2, [pc, #156]	; (8005c68 <_printf_i+0x220>)
 8005bcc:	e7e1      	b.n	8005b92 <_printf_i+0x14a>
 8005bce:	0648      	lsls	r0, r1, #25
 8005bd0:	d5e6      	bpl.n	8005ba0 <_printf_i+0x158>
 8005bd2:	b2ad      	uxth	r5, r5
 8005bd4:	e7e4      	b.n	8005ba0 <_printf_i+0x158>
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	680d      	ldr	r5, [r1, #0]
 8005bda:	1d10      	adds	r0, r2, #4
 8005bdc:	6949      	ldr	r1, [r1, #20]
 8005bde:	6018      	str	r0, [r3, #0]
 8005be0:	6813      	ldr	r3, [r2, #0]
 8005be2:	062e      	lsls	r6, r5, #24
 8005be4:	d501      	bpl.n	8005bea <_printf_i+0x1a2>
 8005be6:	6019      	str	r1, [r3, #0]
 8005be8:	e002      	b.n	8005bf0 <_printf_i+0x1a8>
 8005bea:	066d      	lsls	r5, r5, #25
 8005bec:	d5fb      	bpl.n	8005be6 <_printf_i+0x19e>
 8005bee:	8019      	strh	r1, [r3, #0]
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	9e04      	ldr	r6, [sp, #16]
 8005bf4:	6123      	str	r3, [r4, #16]
 8005bf6:	e7bb      	b.n	8005b70 <_printf_i+0x128>
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	1d11      	adds	r1, r2, #4
 8005bfc:	6019      	str	r1, [r3, #0]
 8005bfe:	6816      	ldr	r6, [r2, #0]
 8005c00:	2100      	movs	r1, #0
 8005c02:	0030      	movs	r0, r6
 8005c04:	6862      	ldr	r2, [r4, #4]
 8005c06:	f000 f831 	bl	8005c6c <memchr>
 8005c0a:	2800      	cmp	r0, #0
 8005c0c:	d001      	beq.n	8005c12 <_printf_i+0x1ca>
 8005c0e:	1b80      	subs	r0, r0, r6
 8005c10:	6060      	str	r0, [r4, #4]
 8005c12:	6863      	ldr	r3, [r4, #4]
 8005c14:	6123      	str	r3, [r4, #16]
 8005c16:	2300      	movs	r3, #0
 8005c18:	9a04      	ldr	r2, [sp, #16]
 8005c1a:	7013      	strb	r3, [r2, #0]
 8005c1c:	e7a8      	b.n	8005b70 <_printf_i+0x128>
 8005c1e:	6923      	ldr	r3, [r4, #16]
 8005c20:	0032      	movs	r2, r6
 8005c22:	9906      	ldr	r1, [sp, #24]
 8005c24:	9805      	ldr	r0, [sp, #20]
 8005c26:	9d07      	ldr	r5, [sp, #28]
 8005c28:	47a8      	blx	r5
 8005c2a:	1c43      	adds	r3, r0, #1
 8005c2c:	d0aa      	beq.n	8005b84 <_printf_i+0x13c>
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	079b      	lsls	r3, r3, #30
 8005c32:	d415      	bmi.n	8005c60 <_printf_i+0x218>
 8005c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c36:	68e0      	ldr	r0, [r4, #12]
 8005c38:	4298      	cmp	r0, r3
 8005c3a:	daa5      	bge.n	8005b88 <_printf_i+0x140>
 8005c3c:	0018      	movs	r0, r3
 8005c3e:	e7a3      	b.n	8005b88 <_printf_i+0x140>
 8005c40:	0022      	movs	r2, r4
 8005c42:	2301      	movs	r3, #1
 8005c44:	9906      	ldr	r1, [sp, #24]
 8005c46:	9805      	ldr	r0, [sp, #20]
 8005c48:	9e07      	ldr	r6, [sp, #28]
 8005c4a:	3219      	adds	r2, #25
 8005c4c:	47b0      	blx	r6
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	d098      	beq.n	8005b84 <_printf_i+0x13c>
 8005c52:	3501      	adds	r5, #1
 8005c54:	68e3      	ldr	r3, [r4, #12]
 8005c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c58:	1a9b      	subs	r3, r3, r2
 8005c5a:	42ab      	cmp	r3, r5
 8005c5c:	dcf0      	bgt.n	8005c40 <_printf_i+0x1f8>
 8005c5e:	e7e9      	b.n	8005c34 <_printf_i+0x1ec>
 8005c60:	2500      	movs	r5, #0
 8005c62:	e7f7      	b.n	8005c54 <_printf_i+0x20c>
 8005c64:	08005fc9 	.word	0x08005fc9
 8005c68:	08005fda 	.word	0x08005fda

08005c6c <memchr>:
 8005c6c:	b2c9      	uxtb	r1, r1
 8005c6e:	1882      	adds	r2, r0, r2
 8005c70:	4290      	cmp	r0, r2
 8005c72:	d101      	bne.n	8005c78 <memchr+0xc>
 8005c74:	2000      	movs	r0, #0
 8005c76:	4770      	bx	lr
 8005c78:	7803      	ldrb	r3, [r0, #0]
 8005c7a:	428b      	cmp	r3, r1
 8005c7c:	d0fb      	beq.n	8005c76 <memchr+0xa>
 8005c7e:	3001      	adds	r0, #1
 8005c80:	e7f6      	b.n	8005c70 <memchr+0x4>

08005c82 <memcpy>:
 8005c82:	2300      	movs	r3, #0
 8005c84:	b510      	push	{r4, lr}
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d100      	bne.n	8005c8c <memcpy+0xa>
 8005c8a:	bd10      	pop	{r4, pc}
 8005c8c:	5ccc      	ldrb	r4, [r1, r3]
 8005c8e:	54c4      	strb	r4, [r0, r3]
 8005c90:	3301      	adds	r3, #1
 8005c92:	e7f8      	b.n	8005c86 <memcpy+0x4>

08005c94 <memmove>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4288      	cmp	r0, r1
 8005c98:	d902      	bls.n	8005ca0 <memmove+0xc>
 8005c9a:	188b      	adds	r3, r1, r2
 8005c9c:	4298      	cmp	r0, r3
 8005c9e:	d303      	bcc.n	8005ca8 <memmove+0x14>
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	e007      	b.n	8005cb4 <memmove+0x20>
 8005ca4:	5c8b      	ldrb	r3, [r1, r2]
 8005ca6:	5483      	strb	r3, [r0, r2]
 8005ca8:	3a01      	subs	r2, #1
 8005caa:	d2fb      	bcs.n	8005ca4 <memmove+0x10>
 8005cac:	bd10      	pop	{r4, pc}
 8005cae:	5ccc      	ldrb	r4, [r1, r3]
 8005cb0:	54c4      	strb	r4, [r0, r3]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d1fa      	bne.n	8005cae <memmove+0x1a>
 8005cb8:	e7f8      	b.n	8005cac <memmove+0x18>
	...

08005cbc <_free_r>:
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	0005      	movs	r5, r0
 8005cc0:	2900      	cmp	r1, #0
 8005cc2:	d010      	beq.n	8005ce6 <_free_r+0x2a>
 8005cc4:	1f0c      	subs	r4, r1, #4
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	da00      	bge.n	8005cce <_free_r+0x12>
 8005ccc:	18e4      	adds	r4, r4, r3
 8005cce:	0028      	movs	r0, r5
 8005cd0:	f000 f918 	bl	8005f04 <__malloc_lock>
 8005cd4:	4a1d      	ldr	r2, [pc, #116]	; (8005d4c <_free_r+0x90>)
 8005cd6:	6813      	ldr	r3, [r2, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d105      	bne.n	8005ce8 <_free_r+0x2c>
 8005cdc:	6063      	str	r3, [r4, #4]
 8005cde:	6014      	str	r4, [r2, #0]
 8005ce0:	0028      	movs	r0, r5
 8005ce2:	f000 f917 	bl	8005f14 <__malloc_unlock>
 8005ce6:	bd70      	pop	{r4, r5, r6, pc}
 8005ce8:	42a3      	cmp	r3, r4
 8005cea:	d908      	bls.n	8005cfe <_free_r+0x42>
 8005cec:	6821      	ldr	r1, [r4, #0]
 8005cee:	1860      	adds	r0, r4, r1
 8005cf0:	4283      	cmp	r3, r0
 8005cf2:	d1f3      	bne.n	8005cdc <_free_r+0x20>
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	1841      	adds	r1, r0, r1
 8005cfa:	6021      	str	r1, [r4, #0]
 8005cfc:	e7ee      	b.n	8005cdc <_free_r+0x20>
 8005cfe:	001a      	movs	r2, r3
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <_free_r+0x4e>
 8005d06:	42a3      	cmp	r3, r4
 8005d08:	d9f9      	bls.n	8005cfe <_free_r+0x42>
 8005d0a:	6811      	ldr	r1, [r2, #0]
 8005d0c:	1850      	adds	r0, r2, r1
 8005d0e:	42a0      	cmp	r0, r4
 8005d10:	d10b      	bne.n	8005d2a <_free_r+0x6e>
 8005d12:	6820      	ldr	r0, [r4, #0]
 8005d14:	1809      	adds	r1, r1, r0
 8005d16:	1850      	adds	r0, r2, r1
 8005d18:	6011      	str	r1, [r2, #0]
 8005d1a:	4283      	cmp	r3, r0
 8005d1c:	d1e0      	bne.n	8005ce0 <_free_r+0x24>
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	1841      	adds	r1, r0, r1
 8005d24:	6011      	str	r1, [r2, #0]
 8005d26:	6053      	str	r3, [r2, #4]
 8005d28:	e7da      	b.n	8005ce0 <_free_r+0x24>
 8005d2a:	42a0      	cmp	r0, r4
 8005d2c:	d902      	bls.n	8005d34 <_free_r+0x78>
 8005d2e:	230c      	movs	r3, #12
 8005d30:	602b      	str	r3, [r5, #0]
 8005d32:	e7d5      	b.n	8005ce0 <_free_r+0x24>
 8005d34:	6821      	ldr	r1, [r4, #0]
 8005d36:	1860      	adds	r0, r4, r1
 8005d38:	4283      	cmp	r3, r0
 8005d3a:	d103      	bne.n	8005d44 <_free_r+0x88>
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	1841      	adds	r1, r0, r1
 8005d42:	6021      	str	r1, [r4, #0]
 8005d44:	6063      	str	r3, [r4, #4]
 8005d46:	6054      	str	r4, [r2, #4]
 8005d48:	e7ca      	b.n	8005ce0 <_free_r+0x24>
 8005d4a:	46c0      	nop			; (mov r8, r8)
 8005d4c:	200004d8 	.word	0x200004d8

08005d50 <sbrk_aligned>:
 8005d50:	b570      	push	{r4, r5, r6, lr}
 8005d52:	4e0f      	ldr	r6, [pc, #60]	; (8005d90 <sbrk_aligned+0x40>)
 8005d54:	000d      	movs	r5, r1
 8005d56:	6831      	ldr	r1, [r6, #0]
 8005d58:	0004      	movs	r4, r0
 8005d5a:	2900      	cmp	r1, #0
 8005d5c:	d102      	bne.n	8005d64 <sbrk_aligned+0x14>
 8005d5e:	f000 f8bf 	bl	8005ee0 <_sbrk_r>
 8005d62:	6030      	str	r0, [r6, #0]
 8005d64:	0029      	movs	r1, r5
 8005d66:	0020      	movs	r0, r4
 8005d68:	f000 f8ba 	bl	8005ee0 <_sbrk_r>
 8005d6c:	1c43      	adds	r3, r0, #1
 8005d6e:	d00a      	beq.n	8005d86 <sbrk_aligned+0x36>
 8005d70:	2303      	movs	r3, #3
 8005d72:	1cc5      	adds	r5, r0, #3
 8005d74:	439d      	bics	r5, r3
 8005d76:	42a8      	cmp	r0, r5
 8005d78:	d007      	beq.n	8005d8a <sbrk_aligned+0x3a>
 8005d7a:	1a29      	subs	r1, r5, r0
 8005d7c:	0020      	movs	r0, r4
 8005d7e:	f000 f8af 	bl	8005ee0 <_sbrk_r>
 8005d82:	1c43      	adds	r3, r0, #1
 8005d84:	d101      	bne.n	8005d8a <sbrk_aligned+0x3a>
 8005d86:	2501      	movs	r5, #1
 8005d88:	426d      	negs	r5, r5
 8005d8a:	0028      	movs	r0, r5
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
 8005d8e:	46c0      	nop			; (mov r8, r8)
 8005d90:	200004dc 	.word	0x200004dc

08005d94 <_malloc_r>:
 8005d94:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d96:	2203      	movs	r2, #3
 8005d98:	1ccb      	adds	r3, r1, #3
 8005d9a:	4393      	bics	r3, r2
 8005d9c:	3308      	adds	r3, #8
 8005d9e:	0006      	movs	r6, r0
 8005da0:	001f      	movs	r7, r3
 8005da2:	2b0c      	cmp	r3, #12
 8005da4:	d232      	bcs.n	8005e0c <_malloc_r+0x78>
 8005da6:	270c      	movs	r7, #12
 8005da8:	42b9      	cmp	r1, r7
 8005daa:	d831      	bhi.n	8005e10 <_malloc_r+0x7c>
 8005dac:	0030      	movs	r0, r6
 8005dae:	f000 f8a9 	bl	8005f04 <__malloc_lock>
 8005db2:	4d32      	ldr	r5, [pc, #200]	; (8005e7c <_malloc_r+0xe8>)
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	001c      	movs	r4, r3
 8005db8:	2c00      	cmp	r4, #0
 8005dba:	d12e      	bne.n	8005e1a <_malloc_r+0x86>
 8005dbc:	0039      	movs	r1, r7
 8005dbe:	0030      	movs	r0, r6
 8005dc0:	f7ff ffc6 	bl	8005d50 <sbrk_aligned>
 8005dc4:	0004      	movs	r4, r0
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	d11e      	bne.n	8005e08 <_malloc_r+0x74>
 8005dca:	682c      	ldr	r4, [r5, #0]
 8005dcc:	0025      	movs	r5, r4
 8005dce:	2d00      	cmp	r5, #0
 8005dd0:	d14a      	bne.n	8005e68 <_malloc_r+0xd4>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	0029      	movs	r1, r5
 8005dd6:	18e3      	adds	r3, r4, r3
 8005dd8:	0030      	movs	r0, r6
 8005dda:	9301      	str	r3, [sp, #4]
 8005ddc:	f000 f880 	bl	8005ee0 <_sbrk_r>
 8005de0:	9b01      	ldr	r3, [sp, #4]
 8005de2:	4283      	cmp	r3, r0
 8005de4:	d143      	bne.n	8005e6e <_malloc_r+0xda>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	3703      	adds	r7, #3
 8005dea:	1aff      	subs	r7, r7, r3
 8005dec:	2303      	movs	r3, #3
 8005dee:	439f      	bics	r7, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	2f0c      	cmp	r7, #12
 8005df4:	d200      	bcs.n	8005df8 <_malloc_r+0x64>
 8005df6:	270c      	movs	r7, #12
 8005df8:	0039      	movs	r1, r7
 8005dfa:	0030      	movs	r0, r6
 8005dfc:	f7ff ffa8 	bl	8005d50 <sbrk_aligned>
 8005e00:	1c43      	adds	r3, r0, #1
 8005e02:	d034      	beq.n	8005e6e <_malloc_r+0xda>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	19df      	adds	r7, r3, r7
 8005e08:	6027      	str	r7, [r4, #0]
 8005e0a:	e013      	b.n	8005e34 <_malloc_r+0xa0>
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	dacb      	bge.n	8005da8 <_malloc_r+0x14>
 8005e10:	230c      	movs	r3, #12
 8005e12:	2500      	movs	r5, #0
 8005e14:	6033      	str	r3, [r6, #0]
 8005e16:	0028      	movs	r0, r5
 8005e18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e1a:	6822      	ldr	r2, [r4, #0]
 8005e1c:	1bd1      	subs	r1, r2, r7
 8005e1e:	d420      	bmi.n	8005e62 <_malloc_r+0xce>
 8005e20:	290b      	cmp	r1, #11
 8005e22:	d917      	bls.n	8005e54 <_malloc_r+0xc0>
 8005e24:	19e2      	adds	r2, r4, r7
 8005e26:	6027      	str	r7, [r4, #0]
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	d111      	bne.n	8005e50 <_malloc_r+0xbc>
 8005e2c:	602a      	str	r2, [r5, #0]
 8005e2e:	6863      	ldr	r3, [r4, #4]
 8005e30:	6011      	str	r1, [r2, #0]
 8005e32:	6053      	str	r3, [r2, #4]
 8005e34:	0030      	movs	r0, r6
 8005e36:	0025      	movs	r5, r4
 8005e38:	f000 f86c 	bl	8005f14 <__malloc_unlock>
 8005e3c:	2207      	movs	r2, #7
 8005e3e:	350b      	adds	r5, #11
 8005e40:	1d23      	adds	r3, r4, #4
 8005e42:	4395      	bics	r5, r2
 8005e44:	1aea      	subs	r2, r5, r3
 8005e46:	429d      	cmp	r5, r3
 8005e48:	d0e5      	beq.n	8005e16 <_malloc_r+0x82>
 8005e4a:	1b5b      	subs	r3, r3, r5
 8005e4c:	50a3      	str	r3, [r4, r2]
 8005e4e:	e7e2      	b.n	8005e16 <_malloc_r+0x82>
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	e7ec      	b.n	8005e2e <_malloc_r+0x9a>
 8005e54:	6862      	ldr	r2, [r4, #4]
 8005e56:	42a3      	cmp	r3, r4
 8005e58:	d101      	bne.n	8005e5e <_malloc_r+0xca>
 8005e5a:	602a      	str	r2, [r5, #0]
 8005e5c:	e7ea      	b.n	8005e34 <_malloc_r+0xa0>
 8005e5e:	605a      	str	r2, [r3, #4]
 8005e60:	e7e8      	b.n	8005e34 <_malloc_r+0xa0>
 8005e62:	0023      	movs	r3, r4
 8005e64:	6864      	ldr	r4, [r4, #4]
 8005e66:	e7a7      	b.n	8005db8 <_malloc_r+0x24>
 8005e68:	002c      	movs	r4, r5
 8005e6a:	686d      	ldr	r5, [r5, #4]
 8005e6c:	e7af      	b.n	8005dce <_malloc_r+0x3a>
 8005e6e:	230c      	movs	r3, #12
 8005e70:	0030      	movs	r0, r6
 8005e72:	6033      	str	r3, [r6, #0]
 8005e74:	f000 f84e 	bl	8005f14 <__malloc_unlock>
 8005e78:	e7cd      	b.n	8005e16 <_malloc_r+0x82>
 8005e7a:	46c0      	nop			; (mov r8, r8)
 8005e7c:	200004d8 	.word	0x200004d8

08005e80 <_realloc_r>:
 8005e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e82:	0007      	movs	r7, r0
 8005e84:	000e      	movs	r6, r1
 8005e86:	0014      	movs	r4, r2
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	d105      	bne.n	8005e98 <_realloc_r+0x18>
 8005e8c:	0011      	movs	r1, r2
 8005e8e:	f7ff ff81 	bl	8005d94 <_malloc_r>
 8005e92:	0005      	movs	r5, r0
 8005e94:	0028      	movs	r0, r5
 8005e96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	d103      	bne.n	8005ea4 <_realloc_r+0x24>
 8005e9c:	f7ff ff0e 	bl	8005cbc <_free_r>
 8005ea0:	0025      	movs	r5, r4
 8005ea2:	e7f7      	b.n	8005e94 <_realloc_r+0x14>
 8005ea4:	f000 f83e 	bl	8005f24 <_malloc_usable_size_r>
 8005ea8:	9001      	str	r0, [sp, #4]
 8005eaa:	4284      	cmp	r4, r0
 8005eac:	d803      	bhi.n	8005eb6 <_realloc_r+0x36>
 8005eae:	0035      	movs	r5, r6
 8005eb0:	0843      	lsrs	r3, r0, #1
 8005eb2:	42a3      	cmp	r3, r4
 8005eb4:	d3ee      	bcc.n	8005e94 <_realloc_r+0x14>
 8005eb6:	0021      	movs	r1, r4
 8005eb8:	0038      	movs	r0, r7
 8005eba:	f7ff ff6b 	bl	8005d94 <_malloc_r>
 8005ebe:	1e05      	subs	r5, r0, #0
 8005ec0:	d0e8      	beq.n	8005e94 <_realloc_r+0x14>
 8005ec2:	9b01      	ldr	r3, [sp, #4]
 8005ec4:	0022      	movs	r2, r4
 8005ec6:	429c      	cmp	r4, r3
 8005ec8:	d900      	bls.n	8005ecc <_realloc_r+0x4c>
 8005eca:	001a      	movs	r2, r3
 8005ecc:	0031      	movs	r1, r6
 8005ece:	0028      	movs	r0, r5
 8005ed0:	f7ff fed7 	bl	8005c82 <memcpy>
 8005ed4:	0031      	movs	r1, r6
 8005ed6:	0038      	movs	r0, r7
 8005ed8:	f7ff fef0 	bl	8005cbc <_free_r>
 8005edc:	e7da      	b.n	8005e94 <_realloc_r+0x14>
	...

08005ee0 <_sbrk_r>:
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	b570      	push	{r4, r5, r6, lr}
 8005ee4:	4d06      	ldr	r5, [pc, #24]	; (8005f00 <_sbrk_r+0x20>)
 8005ee6:	0004      	movs	r4, r0
 8005ee8:	0008      	movs	r0, r1
 8005eea:	602b      	str	r3, [r5, #0]
 8005eec:	f7fb f95a 	bl	80011a4 <_sbrk>
 8005ef0:	1c43      	adds	r3, r0, #1
 8005ef2:	d103      	bne.n	8005efc <_sbrk_r+0x1c>
 8005ef4:	682b      	ldr	r3, [r5, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d000      	beq.n	8005efc <_sbrk_r+0x1c>
 8005efa:	6023      	str	r3, [r4, #0]
 8005efc:	bd70      	pop	{r4, r5, r6, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	200004e0 	.word	0x200004e0

08005f04 <__malloc_lock>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	4802      	ldr	r0, [pc, #8]	; (8005f10 <__malloc_lock+0xc>)
 8005f08:	f000 f814 	bl	8005f34 <__retarget_lock_acquire_recursive>
 8005f0c:	bd10      	pop	{r4, pc}
 8005f0e:	46c0      	nop			; (mov r8, r8)
 8005f10:	200004e4 	.word	0x200004e4

08005f14 <__malloc_unlock>:
 8005f14:	b510      	push	{r4, lr}
 8005f16:	4802      	ldr	r0, [pc, #8]	; (8005f20 <__malloc_unlock+0xc>)
 8005f18:	f000 f80d 	bl	8005f36 <__retarget_lock_release_recursive>
 8005f1c:	bd10      	pop	{r4, pc}
 8005f1e:	46c0      	nop			; (mov r8, r8)
 8005f20:	200004e4 	.word	0x200004e4

08005f24 <_malloc_usable_size_r>:
 8005f24:	1f0b      	subs	r3, r1, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	1f18      	subs	r0, r3, #4
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	da01      	bge.n	8005f32 <_malloc_usable_size_r+0xe>
 8005f2e:	580b      	ldr	r3, [r1, r0]
 8005f30:	18c0      	adds	r0, r0, r3
 8005f32:	4770      	bx	lr

08005f34 <__retarget_lock_acquire_recursive>:
 8005f34:	4770      	bx	lr

08005f36 <__retarget_lock_release_recursive>:
 8005f36:	4770      	bx	lr

08005f38 <_init>:
 8005f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f3a:	46c0      	nop			; (mov r8, r8)
 8005f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f3e:	bc08      	pop	{r3}
 8005f40:	469e      	mov	lr, r3
 8005f42:	4770      	bx	lr

08005f44 <_fini>:
 8005f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f46:	46c0      	nop			; (mov r8, r8)
 8005f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4a:	bc08      	pop	{r3}
 8005f4c:	469e      	mov	lr, r3
 8005f4e:	4770      	bx	lr
